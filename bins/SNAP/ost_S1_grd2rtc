#! /bin/bash

# The MIT License (MIT)
# Copyright (c) 2016 Andreas Vollrath

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#-------------------------------------------------------------------------------------------
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "3" ]; then

	echo -e ""
	echo -e "----------------------------------------------------------------------------------"
	echo -e " Open Foris SAR Toolkit, version ${OSK_VERSION}"
	echo -e " Preprocess Sentinel-1 GRD scene to a radiometrically terrain corrected product"
	echo -e "----------------------------------------------------------------------------------"
	echo -e ""
	echo -e "----------------------------------------------------------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- ESA Sentinel Application Platform SNAP"
	echo -e "	- gdal-bin"
	echo -e "----------------------------------------------------------------------------------"
	echo -e ""
	echo -e " Usage: oft-sar-S1-GRD-single-preprocess <filename> <output_folder> <output resolution>" # <elevation> "
	echo -e ""
	echo -e " input parameters:"
	echo -e "  filename		(input) filename of the downloaded zip file"
	echo -e "  output_folder	(output) pathname of the output folder"
	echo -e "  output resolution: "
	echo -e "			  Available choices:"
	echo -e "			  HI_RES (10m output) "
	echo -e "			  MED_RES (30m output)"
#	echo -e "  elevation	(optional) filename to the digital elevation model"
#	echo -e ""
#	echo -e "  NOTE: The DEM file should be provided in Geotiff-format as a 16Bit Integer data type with 0 as the no data value."
	echo -e ""
	exit 1
else
	echo -e "----------------------------------------------------------------------------------"
	echo -e " Open Foris SAR Toolkit, version ${OSK_VERSION}"
	echo -e " Preprocess a Sentinel-1 GRD scene to a radiometrically terrain corrected product"
	echo -e "----------------------------------------------------------------------------------"


	# set up initial script variables
	FILE=`readlink -f $1`
	BASE=`basename ${FILE}`
	PROC_DIR=`dirname ${FILE}`
	TMP_DIR=${SAR_TMP:-$PROC_DIR/TMP}
	mkdir -p ${TMP_DIR}

	OUT_DIR=$(readlink -f $2)
	mkdir -p ${OUT_DIR}

	RESOLUTION=$3

	# source libs
	source ${OPENSARKIT}/lib/helpers_source
fi

# get scene infos
s1_info ${FILE}

if [[ ${FILE} == *imported_subset.dim ]];then

	SECONDS=0
	echo -ne " Applying the Lee Sigma Speckle Filter ..."
	bash ${SNAP_EXE} Speckle-Filter -Ssource=${FILE} -t ${TMP_DIR}/${SCENE_ID}"_speckle" > /dev/null 2>&1
	duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

	s1_rtc_processing ${TMP_DIR}/${SCENE_ID}"_speckle.dim" ${OUT_DIR}/${SCENE_ID} ${RESOLUTION} 0 dummyfoo ${TMP_DIR} ${OUT_DIR}
	rm -rf ${TMP_DIR}/${SCENE_ID}"_speckle"*
else
	s1_frame_import ${FILE} ${TMP_DIR}/${SCENE_ID}"_import" ${OUT_DIR}

	SECONDS=0
	echo -ne " Applying the Lee Sigma Speckle Filter ..."
	bash ${SNAP_EXE} Speckle-Filter -Ssource=${TMP_DIR}/${SCENE_ID}"_import.dim" -t ${TMP_DIR}/${SCENE_ID}"_speckle" > /dev/null 2>&1
	duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
	rm -rf ${TMP_DIR}/${SCENE_ID}"_import"*

	s1_rtc_processing ${TMP_DIR}/${SCENE_ID}"_speckle.dim" ${OUT_DIR}/${SCENE_ID} ${RESOLUTION} 0 dummyfoo ${TMP_DIR} ${OUT_DIR}
	rm -rf ${TMP_DIR}/${SCENE_ID}"_speckle"*
fi

if [[ ${POL_MODE} == "SDV" ]];then
	SECONDS=0
	echo -ne " Creating final output file (Band 1: VV, Band 2: VH, Band 3 VV/VH ratio) ..."
	gdal_merge.py -o ${OUT_DIR}/${SCENE_ID}".RTC".tif -n 0 -a_nodata 0 -separate ${TMP_DIR}/${SCENE_ID}".RTC".data/Gamma0_VV_db.img ${TMP_DIR}/${SCENE_ID}".RTC".data/Gamma0_VH_db.img ${TMP_DIR}/${SCENE_ID}".RTC".data/VV-VH_ratio.img > $OUT_DIR/log_export 2>&1
  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

elif [[ ${POL_MODE} == "SSV" ]];then
	SECONDS=0
	echo -ne " Creating final output file (Band 1: VV) ..."
	gdal_translate -a_nodata 0 ${TMP_DIR}/${SCENE_ID}".RTC".data/Gamma0_VV_db.img ${OUT_DIR}/${SCENE_ID}".RTC".tif > $OUT_DIR/log_export 2>&1
  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
fi

rm -rf ${TMP_DIR}
echo "------------------------------------------------"
echo " Succesfully processed ${SCENE_ID}"
echo "------------------------------------------------"
