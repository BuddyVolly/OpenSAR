#! /bin/bash

# The MIT License (MIT)
# Copyright (c) 2016 Andreas Vollrath

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#-------------------------------------------------------------------------------------------
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "5" ]; then

	echo -e "------------------------------------------------------------------"
	echo -e " Open Foris SAR Toolkit, version ${OSK_VERSION}"
	echo -e " Bulk preprocessing Sentinel-1 GRD scenes to geocoded, "
	echo -e " radiometrically terrain corrected Gamma0 backscatter products and"
	echo -e " and optionally calculate multi-temporal metrics"
	echo -e "------------------------------------------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e "Software dependencies:"
	echo -e "	- ESA Sentinel Application Platform SNAP"
	echo -e "	- gdal-bin"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " Usage: oft-sar-S1-GRD-bulk-preprocess <input directory> <ISO3/AOI> <output resolution> <MT-metrics> <output datatype>"
	echo -e ""
	echo -e " input parameters:"
	echo -e " input directory (input) higher-level directory of the downloaded zip file (i.e. DATA folder created by oft-sar-S1-download)"
	echo -e " ISO3/AOI (input)	 ISO3 country code or shapefile of your area of interest"
	echo -e " output resolution 	 the output resolution"
	echo -e "			   Available choices:"
	echo -e "			    HI_RES (10m output) "
	echo -e "			    MED_RES (30m output)"
	echo -e " MT-metrics		 calculate muti-temporal metrics"
	echo -e "			  Available choices:"
	echo -e "			   0: does not calculate the MT-metrics "
	echo -e "			   1: calculates the MT-metrics"
	echo -e " datatype		 choose the output datatype (applies only to MT layers)"
	echo -e "			  Available choices:"
	echo -e "			   1: unsigned 8-bit integer (UInt8)"
	echo -e "			   2: unsigned 16-bit integer (UInt16)"
	echo -e "			   3: 32-bit float (Float32)"
#	echo -e " filtering		do additional Multi-Directional Filtering (recommended for single time "
#	echo -e "			  Available choices:"
#	echo -e "			   0: No additional filter applied"
#	echo -e "			   1: additional filter applied"
#	echo -e " elevation		(input) filename to the digital elevation model"
#	echo -e ""
#	echo -e " NOTE: The DEM file should be provided in Geotiff-format as a 16Bit Integer data type with 0 as the no data value."
	echo -e ""
	exit 1
else
	echo -e "------------------------------------------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Bulk preprocessing Sentinel-1 GRD scenes to a geocoded, "
	echo -e " radiometrically-terrain-corrected, multi-temporal Gamma0 backscatter stack"
	echo -e " and optionally calculate multi-temporal metrics"
	echo -e "------------------------------------------------------------------"

	# set up initial script variables
	#cd $1
	#PROC_DIR=`pwd`
	PROC_DIR=$(readlink -f $1)
	TMP_DIR=${SAR_TMP:-$PROC_DIR/TMP}
	#TMP_DIR=${PROC_DIR}/TMP
	rm -rf $TMP_DIR

	if [ "`echo $2 | grep shp`" ]; then # AOI case
		AOI=`readlink -f $2`
		echo " Selected AOI file: ${AOI}"
	else # country case
		AOI=$2
	fi

	RESOLUTION=$3
	# MT_MODE Flag
	MT_MODE=$4
	DATATYPE=$5

	# source libs
	source ${OPENSARKIT}/lib/helpers_source

fi

cd ${PROC_DIR}
NR_OF_TRACKS=`ls -1 -d ${PROC_DIR}/[0-9]* | wc -l`
j=1
# loop thorugh the tracks
for TRACK in `ls -1 -d ${PROC_DIR}/[0-9]*`;do


	if [ ${NR_OF_TRACKS} -eq 1 ];then
		echo " Info: Processing Track: `basename ${TRACK}`"
	else
		echo " Info: Processing Track: `basename ${TRACK}` ($j/${NR_OF_TRACKS}) "
	fi

	echo " Info: Entering Track: ${TRACK}"
	cd ${TRACK}

	NR_OF_ACQ=`ls -1 | wc -l`
	echo " Info: Found ${NR_OF_ACQ} acquisitions for this swath"

	# loop through acquisition dates
	for ACQ in `ls -1`;do

		echo " Info: Entering ${ACQ}"
		cd ${ACQ}

		if ls ${PWD}/*imported_subset.dim > /dev/null 2>&1;then
			SCRIPT_MODE=SUBSET
			NR_FRAMES=`ls -1 -d ${PWD}/*dim 2>/dev/null | wc -l`
		elif ls ${PWD}/*.dim  > /dev/null 2>&1 ;then
			SCRIPT_MODE=DIM
			NR_FRAMES=`ls -1 -d ${PWD}/*dim 2>/dev/null | wc -l`
		elif ls ${PWD}/*zip > /dev/null 2>&1 ;then
			SCRIPT_MODE=RAW
			NR_FRAMES=`ls -1 -d ${PWD}/*zip 2>/dev/null | wc -l`
		else
			echo " ERROR: No valid files found in directory ${PWD}" #&& exit 1
		fi


		if [ ${NR_FRAMES} -eq 1 ];then

			echo " Info: Found ${NR_FRAMES} scene to process"

			FRAME=`ls -1 ${PWD}/*dim 2>/dev/null || ls -1 ${PWD}/*zip 2>/dev/null`
			s1_info ${FRAME}

			LOG_DIR=${PWD}/LOG
			TMP_DIR_FRAME=${PWD}/TMP
			mkdir -p ${LOG_DIR}
			mkdir -p ${TMP_DIR_FRAME}

			if [[ ${SCRIPT_MODE} == SUBSET && ${MT_MODE} == 0 ]];then
				s1_rtc_processing ${FRAME} ${PWD}/${ACQ}"_RTC" ${RESOLUTION} 1 1 ${TMP_DIR_FRAME} ${LOG_DIR}
			elif [[ ${SCRIPT_MODE} == SUBSET && ${MT_MODE} == 1 ]];then
				s1_rtc_processing ${FRAME} ${PWD}/${ACQ}"_RTC" ${RESOLUTION} 0 0 ${TMP_DIR_FRAME} ${LOG_DIR}
			elif [[ ${SCRIPT_MODE} != SUBSET && ${MT_MODE} == 0 ]];then
				s1_frame_import ${FRAME} ${TMP_DIR_FRAME}/${ACQ}"_import" ${LOG_DIR}
				s1_rtc_processing ${TMP_DIR_FRAME}/${ACQ}"_import.dim" ${PWD}/${ACQ}"_RTC" ${RESOLUTION} 1 1 ${TMP_DIR_FRAME} ${LOG_DIR}
			elif [[ ${MODE} != SUBSET && ${MT_MODE} == 1 ]];then
				s1_frame_import ${FRAME} ${TMP_DIR_FRAME}/${ACQ}"_import" ${LOG_DIR}
				s1_rtc_processing ${TMP_DIR_FRAME}/${ACQ}"_import.dim" ${PWD}/${ACQ}"_RTC" ${RESOLUTION} 0 0 ${TMP_DIR_FRAME} ${LOG_DIR}
			fi
			rm -rf ${TMP_DIR_FRAME}

		else

			echo " Info: Found ${NR_FRAMES} scenes to assemble and process"

			LOG_DIR=${PWD}/LOG
			TMP_DIR_FRAME=${PWD}/TMP
			mkdir -p ${LOG_DIR}
			mkdir -p ${TMP_DIR_FRAME}

			ls -1 -d ${PWD}/*dim 2>/dev/null || ls -1 -d ${PWD}/*zip 2>/dev/null > ${TMP_DIR_FRAME}/filelist

			if [ ${SCRIPT_MODE} == SUBSET ];then
				echo " Subset mode"
				#in case of subset area covering 2 scenesTO BE DONE s1_subset_rtc_processing ${TMP_DIR_FRAME}/filelist ${PWD}/${ACQ}"_RTC.dim" $2 ${TMP_DIR_FRAME} ${LOG_DIR}
			else

				s1_swath_import ${TMP_DIR_FRAME}/filelist ${TMP_DIR_FRAME}/${ACQ}"_import" ${TMP_DIR_FRAME} ${LOG_DIR}
				s1_rtc_processing ${TMP_DIR_FRAME}/${ACQ}"_import.dim" ${PWD}/${ACQ}"_RTC" ${RESOLUTION} 0 0 ${TMP_DIR_FRAME} ${LOG_DIR}

				if [ ${MT_MODE} == 0 ];then
					s1_rtc_processing ${TMP_DIR_FRAME}/${ACQ}"_import.dim" ${PWD}/${ACQ}"_RTC" ${RESOLUTION} 1 1 ${TMP_DIR_FRAME} ${LOG_DIR}
				fi
			fi
			rm -rf ${TMP_DIR_FRAME}/
		fi

		cd ../

	done # finish acquisition date loop

	j=`expr $j + 1`
	cd ${PROC_DIR}

done # finish track loop

# calculate MT-metrics
if [ ${MT_MODE} == 1 ];then

		oft-sar-S1-GRD-MT-metrics ${PROC_DIR} ${AOI} ${DATATYPE}

fi

rm -rf ${TMP_DIR}
