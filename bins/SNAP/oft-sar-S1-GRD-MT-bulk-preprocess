#! /bin/bash

# The MIT License (MIT)
# Copyright (c) 2016 Andreas Vollrath

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal 
# in the Software without restriction, including without limitation the rights 
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "3" ]; then
	
	echo -e "------------------------------------------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Bulk preprocessing Sentinel-1 GRD scenes to geocoded, "
	echo -e " radiometrically terrain corrected Gamma0 backscatter products and"
	echo -e " and optionally calculate multi-temporal metrics"	
	echo -e "------------------------------------------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e "Software dependencies:"
	echo -e "	- ESA Sentinel Application Platform SNAP"
	echo -e "	- gdal-bin"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " Usage: oft-sar-S1-GRD-bulk-preprocess <input directory> <output resolution> <MT-metrics>"
	echo -e ""
	echo -e " input parameters:"
	echo -e " input directory	(input) higher-level directory of the downloaded zip file (i.e. DATA folder created by oft-sar-S1-download)"
	echo -e " output resolution 	the output resolution"
	echo -e "			  Available choices:"
	echo -e "			  HI_RES (10m output) "
	echo -e "			  MED_RES (30m output)"
	echo -e " MT-metrics		calculate muti-temporal metrics"
	echo -e "			  Available choices:"
	echo -e "			  0: does not calculate the MT-metrics "
	echo -e "			  1: calculates the MT-metrics"
#	echo -e " filtering		do additional Multi-Directional Filtering (recommended for single time "
#	echo -e "			  Available choices:"
#	echo -e "			   0: No additional filter applied"
#	echo -e "			   1: additional filter applied"
#	echo -e " elevation		(input) filename to the digital elevation model"
#	echo -e ""
#	echo -e " NOTE: The DEM file should be provided in Geotiff-format as a 16Bit Integer data type with 0 as the no data value."
	echo -e ""
	exit 1
else
	echo -e "------------------------------------------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Bulk preprocessing Sentinel-1 GRD scenes to a geocoded, "
	echo -e " radiometrically-terrain-corrected, multi-temporal Gamma0 backscatter stack"
	echo -e " and optionally calculate multi-temporal metrics"	
	echo -e "------------------------------------------------------------------"

	# set up initial script variables
	cd $1
	PROC_DIR=`pwd`
	TMP_DIR=${PROC_DIR}/TMP
	rm -rf $TMP_DIR
	
	# MT_MODE Flag
	MT_MODE=$3

	# source libs
	source ${OPENSARKIT}/lib/helpers_source

fi

NR_OF_TRACKS=`ls -1 -d ${PROC_DIR}/[0-9]* | wc -l`
j=1
# loop thorugh the tracks
for TRACK in `ls -1 -d ${PROC_DIR}/[0-9]*`;do


	if [ ${NR_OF_TRACKS} -eq 1 ];then
		echo " Info: Processing Track: `basename ${TRACK}`"
	else
		echo " Info: Processing Track: `basename ${TRACK}` ($j/${NR_OF_TRACKS}) "
	fi

	echo " Info: Entering Track: ${TRACK}"
	cd ${TRACK}

	NR_OF_ACQ=`ls -1 | wc -l`
	echo " Info: Found ${NR_OF_ACQ} acquisitions for this swath"

	# loop through acquisition dates	
	for ACQ in `ls -1`;do 	
	
		echo " Info: Entering ${ACQ}"
		cd ${ACQ}		

		if ls ${PWD}/*imported_subset.dim 1> /dev/null;then
			SCRIPT_MODE=SUBSET
			NR_FRAMES=`ls -1 -d ${PWD}/*dim 2>/dev/null | wc -l`
		elif ls ${PWD}/*.dim 1> /dev/null;then
			SCRIPT_MODE=DIM
			NR_FRAMES=`ls -1 -d ${PWD}/*dim 2>/dev/null | wc -l`
		elif ls ${PWD}/*zip 1> /dev/null;then
			SCRIPT_MODE=RAW
			NR_FRAMES=`ls -1 -d ${PWD}/*zip 2>/dev/null | wc -l`
		else
			echo " ERROR: No valid files found in directory ${PWD}" #&& exit 1
		fi
		
		if [ ${NR_FRAMES} -eq 1 ];then

			echo " Info: Found ${NR_FRAMES} scene to process"

			FRAME=`ls -1 ${PWD}/*dim 2>/dev/null || ls -1 ${PWD}/*zip 2>/dev/null`
			s1_info ${FRAME}

			LOG_DIR=${PWD}/LOG
			TMP_DIR_FRAME=${PWD}/TMP
			mkdir -p ${LOG_DIR}
			mkdir -p ${TMP_DIR_FRAME}
		
			if [[ ${SCRIPT_MODE} == SUBSET && ${MT_MODE} == 0 ]];then
				s1_rtc_processing ${FRAME} ${PWD}/${ACQ}"_RTC" $2 1 1 ${TMP_DIR_FRAME} ${LOG_DIR}
			elif [[ ${SCRIPT_MODE} == SUBSET && ${MT_MODE} == 1 ]];then
				s1_rtc_processing ${FRAME} ${PWD}/${ACQ}"_RTC" $2 0 0 ${TMP_DIR_FRAME} ${LOG_DIR}
			elif [[ ${SCRIPT_MODE} != SUBSET && ${MT_MODE} == 0 ]];then
				s1_frame_import ${FRAME} ${TMP_DIR_FRAME}/${ACQ}"_import" ${LOG_DIR}
				s1_rtc_processing ${TMP_DIR_FRAME}/${ACQ}"_import.dim" ${PWD}/${ACQ}"_RTC" $2 1 1 ${TMP_DIR_FRAME} ${LOG_DIR}
			elif [[ ${MODE} != SUBSET && ${MT_MODE} == 1 ]];then
				s1_frame_import ${FRAME} ${TMP_DIR_FRAME}/${ACQ}"_import" ${LOG_DIR}
				s1_rtc_processing ${TMP_DIR_FRAME}/${ACQ}"_import.dim" ${PWD}/${ACQ}"_RTC" $2 0 0 ${TMP_DIR_FRAME} ${LOG_DIR}
			fi

		else

			echo " Info: Found ${NR_FRAMES} scenes to assemble and process"
	
			LOG_DIR=${PWD}/LOG
			TMP_DIR_FRAME=${PWD}/TMP
			mkdir -p ${LOG_DIR}
			mkdir -p ${TMP_DIR_FRAME}

			ls -1 -d ${PWD}/*dim 2>/dev/null || ls -1 -d ${PWD}/*zip 2>/dev/null > ${TMP_DIR_FRAME}/filelist
			
			if [ ${MODE} == SUBSET ];then
				echo " Subset mode"						
				#in case of subset area covering 2 scenesTO BE DONE s1_subset_rtc_processing ${TMP_DIR_FRAME}/filelist ${PWD}/${ACQ}"_RTC.dim" $2 ${TMP_DIR_FRAME} ${LOG_DIR}		
			else
				
				s1_swath_import ${TMP_DIR_FRAME}/filelist ${TMP_DIR_FRAME}/${ACQ}"_import" ${TMP_DIR_FRAME} ${LOG_DIR}
				s1_rtc_processing ${TMP_DIR_FRAME}/${ACQ}"_import.dim" ${PWD}/${ACQ}"_RTC" $2 0 0 ${TMP_DIR_FRAME} ${LOG_DIR}

				if [ ${MT_MODE} == 0 ];then 
					s1_rtc_processing ${TMP_DIR_FRAME}/${ACQ}"_import.dim" ${PWD}/${ACQ}"_RTC" $2 0 0 ${TMP_DIR_FRAME} ${LOG_DIR}
					rm -rf ${TMP_DIR_FRAME}/${ACQ}"_import".d*
				fi
			fi

		fi

		cd ../

	done # finish acquisition date loop 

	if [ $3 == 1 ];then
		STACK=${PWD}/MT_STACK
		LOG_DIR=${PWD}/MT_STACK/LOG
		TMP_DIR_TRACK=${PWD}/MT_STACK/TMP
		mkdir -p ${LOG_DIR}
		mkdir -p ${TMP_DIR_TRACK}


		FILELIST=$(ls -1 ${PWD}/*/*_RTC.dim | tr '\n' ',' | rev | cut -c 2- | rev)
		if [[ `ls -1 ${PWD}/*/*_RTC.data/*VH* 2>/dev/null | wc -l` -gt 0 ]];then
			s1_mt_metrics ${FILELIST} ${STACK} VH ${TMP_DIR_TRACK} ${LOG_DIR}
			rm -rf ${TMP_DIR_TRACK}
			SECONDS=0
			echo -ne " Creating multi-channel vrt files for visualization within GIS ..."
			gdalbuildvrt -separate -srcnodata 0 ${STACK}/vv_stack.vrt ${STACK}/mt_stack.vv.db.speckle.data/*img >> ${LOG_DIR}/log_final_vrt 2&>1 & spinner $! 
			gdalbuildvrt -separate -srcnodata 0 ${STACK}/vh_stack.vrt ${STACK}/mt_stack.vh.db.speckle.data/*img >> ${LOG_DIR}/log_final_vrt 2&>1 & spinner $!
			gdalbuildvrt -separate -srcnodata 0 ${STACK}/mt_stack.vrt ${STACK}/mt-metrics_sdv.data/*img >> ${LOG_DIR}/log_final_vrt 2&>1 \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
		else
			s1_mt_metrics ${FILELIST} ${STACK} VV ${TMP_DIR_TRACK} ${LOG_DIR}
			rm -rf ${TMP_DIR_TRACK}
			SECONDS=0
			echo -ne " Creating multi-channel vrt files for visualization within GIS ..."
			gdalbuildvrt -separate -srcnodata 0 ${STACK}/vv_stack.vrt ${STACK}/mt_stack.vv.db.speckle.data/*img >> ${LOG_DIR}/log_final_vrt 2&>1 \
			gdalbuildvrt -separate -srcnodata 0 ${STACK}/mt_stack.vrt ${STACK}/mt-metrics_sdv.data/*img >> ${LOG_DIR}/log_final_vrt 2&>1 \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

		fi
	fi

		j=`expr $j + 1`
		cd ${PROC_DIR}
done # finish track loop

rm -rf $TMP_DIR ${TMP_DIR_TRACK}
