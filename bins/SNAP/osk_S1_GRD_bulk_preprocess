#! /bin/bash

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "3" ]; then
	
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Bulk preprocessing Sentinel-1 GRD data"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e "Software dependencies:"
	echo -e "	- SNAP Toolbox"
	echo -e "	- gdal-bin"
	echo -e "	- saga"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " Usage: osk_S1_GRD_bulk_preprocess <input_folder> <mode> <filtering>"
	echo -e ""
	echo -e " input parameters:"
	echo -e " filename		(input) filename of the downloaded zip file"
	echo -e " mode			processing mode"
	echo -e "			  Available choices:"
	echo -e "			  HI_RES (10m output) "
	echo -e "			  MED_RES (30m output)"
	echo -e " filtering		do additional Multi-Directional Filtering (recommended for single time "
	echo -e "			  Available choices:"
	echo -e "			   0: No additional filter applied"
	echo -e "			   1: additional filter applied"
#	echo -e " elevation		(input) filename to the digital elevation model"
#	echo -e ""
#	echo -e " NOTE: The DEM file should be provided in Geotiff-format as a 16Bit Integer data type with 0 as the no data value."
	echo -e ""
	exit 1
else
	echo -e ""
	echo -e "----------------------------------------------------------------------------------"
	echo -e " Launching bulk processing script for Sentinel-1 GRD products"
	echo -e "----------------------------------------------------------------------------------"
	echo -e ""

	# set up initial script variables
	cd $1
	PROC_DIR=`pwd`
	
	DEM_FILE=$2
	CPU=`nproc`
	source ${OPENSARKIT}/lib/saga_helpers
	source ${OPENSARKIT}/lib/gdal_helpers
	#mkdir -p $3
	#cd $3
	#OUT_DIR=`pwd`
fi


for LINE in `ls -1 ${PROC_DIR}`;do
	
	cd ${LINE}
	# list zip files
	export TMP_DIR=${PROC_DIR}/TMP
	mkdir -p ${TMP_DIR}

	if [[ `ls *.zip -1 | wc -l` -eq 1 || `ls *.dim -1 | wc -l` -eq 1 ]];then

		if [ -e *.dim ];then

			SCENE=`ls *dim` 		
			echo " Processing File ${SCENE} "
			osk_S1_GRD_single_preprocess ${SCENE} . $2 $3

		elif [ -e *.zip];then	
	
			SCENE=`ls *.zip` 
			echo " Processing File ${SCENE} "
			osk_S1_GRD_single_preprocess ${SCENE} . $2 $3

		fi

	else # in case of more then one slice

		for FILE in `ls -1 -d ${PWD}/*zip`;do
			
			# get the basic filename
			BASE=`basename ${FILE}`
			echo "----------------------------------------------------------------------------------"	
			echo " Preprocessing File: ${FILE}"
			echo "----------------------------------------------------------------------------------"
			echo ""			
			echo " Importing S1 GRD data file and apply the precise orbit file and calibrate the data to beta0"
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_Orb_Noise_Brd_Cal.xml -x -Pinput=${FILE} -Poutput=${TMP_DIR}/${BASE}-CAL.dim
	
		done

		
		echo " Assembling the products of the same swath"
		bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_slice_assembly.xml -Pfilelist=$(ls -d -1 ${TMP_DIR}/*.dim | tr '\n' ',' | rev | cut -c 2- | rev) -Poutput=${TMP_DIR}/${LINE}.dim
		
		rm -rf ${TMP_DIR}/*-CAL.d*

		echo " Remove border noise by deleting the outer 200 rows"
		COLUMNS=`gdalinfo ${TMP_DIR}/CAL.data/Beta0_VV.img | grep "Size is" | awk '{print $3}' | sed s/,//g`
		LINES=`gdalinfo ${TMP_DIR}/CAL.data/Beta0_VV.img | grep "Size is" | awk '{print $4}'`
		NEW_WIDTH=`expr $COLUMNS - 400`
		NEW_HEIGHT=`expr $LINES - 400`
		bash ${SNAP_EXE} Subset -Pregion=200,200,$NEW_WIDTH,$NEW_HEIGHT -PcopyMetadata="true" -Ssource=${TMP_DIR}/${LINE}.dim -t ${TMP_DIR}/${LINE}"_border.dim"

		rm -rf ${TMP_DIR}/${LINE}.d*

		if [ $2 == "MED_RES" ];then
			echo " Applying the Terrain Flattening and multilook the data with a factor of 3"
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TF_ML.xml -x -Pinput=${TMP_DIR}/${LINE}"_border.dim" -Poutput=${TMP_DIR}/TF.dim
			OUT_DIR=${PROC_DIR}/${LINE}
			rm -rf ${TMP_DIR}/${LINE}"_"border.d*
			echo " Applying the Refined Lee Speckle Filter and doing the Geometric Terrain Correction (i.e. Geocoding)"
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_SPK_TC.xml -x -Pinput=${TMP_DIR}/TF.dim -Poutput=${TMP_DIR}/TF_TC.dim
			rm -rf ${TMP_DIR}/TF.d*
		elif [ $2 == "HI_RES" ];then
			echo " Applying the Terrain Flattening on original resolution (i.e. 10m)"
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_TF_ML.xml -x -Pinput=${TMP_DIR}/${LINE}"_border.dim" -Poutput=${TMP_DIR}/TF.dim
			OUT_DIR=${PROC_DIR}/${LINE}
			rm -rf ${TMP_DIR}/${LINE}"_"border.d*
			echo " Applying the Refined Lee Speckle Filter and doing the Geometric Terrain Correction (i.e. Geocoding)"
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_SPK_TC.xml -x -Pinput=${TMP_DIR}/TF.dim -Poutput=${TMP_DIR}/TF_TC.dim
			rm -rf ${TMP_DIR}/TF.d*
		fi	
		
		echo " Cut layers to valid range (i.e. -30 to 3 dB)"
		osk_valid_range ${TMP_DIR}/TF_TC.data/Gamma0_VV.img ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sdat SAGA 0.001 1 -99999 ${TMP_DIR}
		osk_valid_range ${TMP_DIR}/TF_TC.data/Gamma0_VH.img ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sdat SAGA 0.001 1 -99999 ${TMP_DIR}
		
		if [ $3 -eq 1 ];then
			echo " Applying the Multi-Directional Lee Filter"
			osk_md_filter ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sdat ${TMP_DIR}/Gamma0_VV.md-filtered.sdat SAGA 5000 3000 1 ${TMP_DIR}
			osk_md_filter ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sdat ${TMP_DIR}/Gamma0_VH.md-filtered.sdat SAGA 5000 3000 1 ${TMP_DIR}
		else	
			mv ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sdat ${TMP_DIR}/Gamma0_VV.md-filtered.sdat
			mv ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sgrd ${TMP_DIR}/Gamma0_VV.md-filtered.sgrd
			mv ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.prj ${TMP_DIR}/Gamma0_VV.md-filtered.prj

			mv ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sdat ${TMP_DIR}/Gamma0_VH.md-filtered.sdat
			mv ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sgrd ${TMP_DIR}/Gamma0_VH.md-filtered.sgrd
			mv ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.prj ${TMP_DIR}/Gamma0_VH.md-filtered.prj
		fi

	echo " Calculating the VV/VH ratio"
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${TMP_DIR}/Gamma0_VV.md-filtered.sgrd -XGRIDS:${TMP_DIR}/Gamma0_VH.md-filtered.sgrd -RESULT:${TMP_DIR}/VVVH_ratio.sgrd -FORMULA:"a / b"
	osk_valid_range ${TMP_DIR}/VVVH_ratio.sdat ${OUT_DIR}/03_VVVH_ratio.sdat SAGA 0 10 -99999 ${TMP_DIR} 

	echo " Transforming to the dB scale"
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${TMP_DIR}/Gamma0_VV.md-filtered.sgrd -RESULT:${OUT_DIR}/01_Gamma0_VV.db.sgrd -FORMULA:"10 *log(a)"
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${TMP_DIR}/Gamma0_VH.md-filtered.sgrd -RESULT:${OUT_DIR}/02_Gamma0_VH.db.sgrd -FORMULA:"10 *log(a)"

	echo " Creating 8bit channels"
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${OUT_DIR}/03_VVVH_ratio.sdat ${OUT_DIR}/03_VVVH_ratio.8bit.tif
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${OUT_DIR}/01_Gamma0_VV.db.sdat ${OUT_DIR}/01_Gamma0_VV.db.8bit.tif
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${OUT_DIR}/02_Gamma0_VH.db.sdat ${OUT_DIR}/02_Gamma0_VH.db.8bit.tif

	echo " Creating an RGB file"
	gdalbuildvrt -separate -vrtnodata 0 ${OUT_DIR}/RGB_${LINE}.8bit.vrt ${OUT_DIR}/01_Gamma0_VV.db.8bit.tif ${OUT_DIR}/02_Gamma0_VH.db.8bit.tif ${OUT_DIR}/03_VVVH_ratio.8bit.tif
	gdalbuildvrt -separate -vrtnodata 0 ${OUT_DIR}/RGB_${LINE}.32bit.vrt ${OUT_DIR}/01_Gamma0_VV.db.sdat ${OUT_DIR}/02_Gamma0_VH.db.sdat ${OUT_DIR}/03_VVVH_ratio.sdat
	gdal_translate -a_nodata 0 ${OUT_DIR}/RGB_${LINE}.8bit.vrt ${OUT_DIR}/RGB_${LINE}.8bit.tif
	fi

	mkdir -p ZIP
	mv *.zip ZIP
	rm -rf target*
	rm -rf ${TMP_DIR}

	cd ../

done
