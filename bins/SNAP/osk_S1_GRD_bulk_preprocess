#! /bin/bash

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "3" ]; then
	
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Bulk preprocessing Sentinel-1 GRD data"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e "Software dependencies:"
	echo -e "	- SNAP Toolbox"
	echo -e "	- gdal-bin"
	echo -e "	- saga"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " Usage: osk_S1_GRD_bulk_preprocess <input directory> <mode> <filtering>"
	echo -e ""
	echo -e " input parameters:"
	echo -e " input directory	(input) higher-level directory of the downloaded zip file (i.e. DATA folder created by osk_S1_download)"
	echo -e " mode			processing mode"
	echo -e "			  Available choices:"
	echo -e "			  HI_RES (10m output) "
	echo -e "			  MED_RES (30m output)"
	echo -e " filtering		do additional Multi-Directional Filtering (recommended for single time "
	echo -e "			  Available choices:"
	echo -e "			   0: No additional filter applied"
	echo -e "			   1: additional filter applied"
#	echo -e " elevation		(input) filename to the digital elevation model"
#	echo -e ""
#	echo -e " NOTE: The DEM file should be provided in Geotiff-format as a 16Bit Integer data type with 0 as the no data value."
	echo -e ""
	exit 1
else
	echo -e ""
	echo -e "--------------------------------------------------------------------------------------------------------------"
	echo -e " Open Foris SAR Toolkit - Bulk preprocessing script for Sentinel-1 GRD products"
	echo -e " Preprocess Sentinel-1 GRD scenes to geocoded, radiometrically terrain corrected Gamma0 backscatter products"	
	echo -e "--------------------------------------------------------------------------------------------------------------"
	echo -e ""

	# set up initial script variables
	cd $1
	PROC_DIR=`pwd`
	TMP_DIR=${PROC_DIR}/TMP
	rm -rf $TMP_DIR
	DEM_FILE=$2
	CPU=`nproc`
	source ${OPENSARKIT}/lib/saga_helpers
	source ${OPENSARKIT}/lib/gdal_helpers
	source ${OPENSARKIT}/lib/bash_helpers
	source ${OPENSARKIT}/lib/s1_helpers
	#mkdir -p $3
	#cd $3
	#OUT_DIR=`pwd`
fi

NR_OF_TRACKS=`ls -1 ${PROC_DIR} | wc -l`
j=1
for LINE in `ls -1 ${PROC_DIR}`;do
	
	cd ${LINE}
	TRACK=${LINE:9:3}
	DATE=${LINE:0:8}
	# list zip files
	export TMP_DIR=${PROC_DIR}/TMP
	mkdir -p ${TMP_DIR}

	if [[ `ls -1 *.zip 2>/dev/null | wc -l` -eq 1 || `ls -1 *.dim 2>/dev/null | wc -l` -eq 1 ]];then

		if [ -e *.dim ];then

			SCENE=`ls *dim` 		
			echo -ne " Processing single frame from file: ${SCENE}"
			osk_S1_GRD_single_preprocess ${SCENE} . $2 $3

		elif [ -e *.zip ];then	
	
			SCENE=`ls *.zip` 
			echo -ne " Processing single frame from file: ${SCENE}" 
			osk_S1_GRD_single_preprocess ${SCENE} . $2 $3 

		fi

	else # in case of more then one slice

#		echo "----------------------------------------------------------------------------------"	
#		echo " 1) Importing all frames from track $TRACK acquired on the $DATE "
#		echo "----------------------------------------------------------------------------------"
		
		NR_FRAMES=`ls -1 -d ${PWD}/*zip | wc -l`
		i=1
		echo " Info: Entering folder: $LINE"
		echo " Info: Found ${NR_FRAMES} scenes to assemble and process"

		for FILE in `ls -1 -d ${PWD}/*zip`;do
			
			
			# get the basic filename
			BASE=`basename ${FILE}`
						
			SCENE_ID=`echo ${BASE} | rev | cut -c 5- | rev`
			DATE=${SCENE_ID:17:8}
			ORBIT=${SCENE_ID:49:6}
			START=`echo "${SCENE_ID:26:2}":"${SCENE_ID:28:2}":"${SCENE_ID:30:2}"`
			STOP=`echo "${SCENE_ID:42:2}":"${SCENE_ID:44:2}":"${SCENE_ID:46:2}"`
			TRACK=`s1_track_orbit $ORBIT`
			MODE=${SCENE_ID:7:3}
			POL_MODE=${SCENE_ID:13:3}
			#TRACK=${SCENE_ID:26:3}
			#FRAME_START=${SCENE_ID:29:3}
			#FRAME_END=${SCENE_ID:45:3}
			export SATELLITE="Sentinel-1"

			
			echo " " 
			echo "----------------------------------------------------------------"
			echo " Scene $i/${NR_FRAMES}:"
			echo " Scene Identifier: 		${SCENE_ID}"
			echo " Satellite/Sensor: 		${SATELLITE}"
			echo " Acquisiton Mode:		${MODE}"
			echo " Polarization Mode:		${POL_MODE}"
			echo " Acquisition Date:		${DATE:6:2}-${DATE:4:2}-${DATE:0:4}"
			echo " Start time:			${START}"
			echo " Stop time:			${STOP}"
			echo " Relative Satellite Track: 	${TRACK}"
			echo " Absolute Satellite Orbit: 	${ORBIT}"
			echo "----------------------------------------------------------------"

			echo ""
			SECONDS=0
			echo -ne " Importing S1 GRD data file, applying the precise orbit file and calibrating the DNs to beta0 ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_Orb_Noise_Brd_Cal.xml -x -Pinput=${FILE} -Poutput=${TMP_DIR}/${BASE}-CAL.dim \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_IMPORT}

			i=`expr $i + 1`
		done

		echo ""	
		echo "---------------------------------------------------------------------------------------------------------------------"	
		echo " 2) Assembling frames and process to the final output "
		echo "---------------------------------------------------------------------------------------------------------------------"

		SECONDS=0
		echo -ne " Assembling the products of the same swath ..." &&
		bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_slice_assembly.xml -Pfilelist=$(ls -d -1 ${TMP_DIR}/*.dim | tr '\n' ',' | rev | cut -c 2- | rev) -Poutput=${TMP_DIR}/${LINE}.dim \
		& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
		[ $? -ne 0 ] && return ${ERR_ASSEMBLE}

		rm -rf ${TMP_DIR}/*-CAL.d*
		COLUMNS=`gdalinfo ${TMP_DIR}/${LINE}.data/Beta0_VV.img | grep "Size is" | awk '{print $3}' | sed s/,//g`
		LINES=`gdalinfo ${TMP_DIR}/${LINE}.data/Beta0_VV.img | grep "Size is" | awk '{print $4}'`
		NEW_WIDTH=`expr $COLUMNS - 1000`
		NEW_HEIGHT=`expr $LINES - 1000`
		
		SECONDS=0
		echo -ne " Remove GRD border noise by deleting the outer 400 rows ..." &&
		bash ${SNAP_EXE} Subset -Pregion=500,500,$NEW_WIDTH,$NEW_HEIGHT -PcopyMetadata="true" -Ssource=${TMP_DIR}/${LINE}.dim -t ${TMP_DIR}/${LINE}"_border.dim" \
		& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
		[ $? -ne 0 ] && return ${ERR_BRD_NOISE} 
		rm -rf ${TMP_DIR}/${LINE}.d*

		if [ $2 == "MED_RES" ];then
			
			SECONDS=0
			echo -ne " Applying the Terrain Flattening and multilook the data with a factor of 3 ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TF_ML.xml -x -Pinput=${TMP_DIR}/${LINE}"_border.dim" -Poutput=${TMP_DIR}/TF.dim \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TF} 
			
			OUT_DIR=${PROC_DIR}/${LINE}
			rm -rf ${TMP_DIR}/${LINE}"_"border.d*

			SECONDS=0
			echo -ne " Applying the Refined Lee Speckle Filter and doing the Geometric Terrain Correction (i.e. Geocoding) ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_SPK_TC.xml -x -Pinput=${TMP_DIR}/TF.dim -Poutput=${TMP_DIR}/TF_TC.dim \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			rm -rf ${TMP_DIR}/TF.d*

		elif [ $2 == "HI_RES" ];then

			SECONDS=0
			echo -ne " Applying the Terrain Flattening on original resolution (i.e. 10m) ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_TF_ML.xml -x -Pinput=${TMP_DIR}/${LINE}"_border.dim" -Poutput=${TMP_DIR}/TF.dim \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			OUT_DIR=${PROC_DIR}/${LINE}
			rm -rf ${TMP_DIR}/${LINE}"_"border.d*
			
			SECONDS=0
			echo -ne " Applying the Refined Lee Speckle Filter and doing the Geometric Terrain Correction (i.e. Geocoding) ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_SPK_TC.xml -x -Pinput=${TMP_DIR}/TF.dim -Poutput=${TMP_DIR}/TF_TC.dim \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			rm -rf ${TMP_DIR}/TF.d*
		fi	
		
		SECONDS=0
		echo -ne " Cut layers to valid range (i.e. -30 to 3 dB) ..." &&
		osk_valid_range ${TMP_DIR}/TF_TC.data/Gamma0_VV.img ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sdat SAGA 0.001 1 -99999 ${TMP_DIR} & spinner $! && 
		osk_valid_range ${TMP_DIR}/TF_TC.data/Gamma0_VH.img ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sdat SAGA 0.001 1 -99999 ${TMP_DIR} \
		& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
		
		if [ $3 -eq 1 ];then
		
			SECONDS=0
			echo -ne " Applying the Multi-Directional Lee Filter ..." &&
			osk_md_filter ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sdat ${TMP_DIR}/Gamma0_VV.md-filtered.sdat SAGA 5000 3000 1 ${TMP_DIR} & spinner $! && 
			osk_md_filter ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sdat ${TMP_DIR}/Gamma0_VH.md-filtered.sdat SAGA 5000 3000 1 ${TMP_DIR} \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
		else	
			mv ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sdat ${TMP_DIR}/Gamma0_VV.md-filtered.sdat
			mv ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sgrd ${TMP_DIR}/Gamma0_VV.md-filtered.sgrd
			mv ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.prj ${TMP_DIR}/Gamma0_VV.md-filtered.prj

			mv ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sdat ${TMP_DIR}/Gamma0_VH.md-filtered.sdat
			mv ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sgrd ${TMP_DIR}/Gamma0_VH.md-filtered.sgrd
			mv ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.prj ${TMP_DIR}/Gamma0_VH.md-filtered.prj
		fi

	SECONDS=0
	echo -ne " Calculating the VV/VH ratio ..." &&
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${TMP_DIR}/Gamma0_VV.md-filtered.sgrd -XGRIDS:${TMP_DIR}/Gamma0_VH.md-filtered.sgrd -RESULT:${TMP_DIR}/VVVH_ratio.sgrd -FORMULA:"a / b" & spinner $! &&
	osk_valid_range ${TMP_DIR}/VVVH_ratio.sdat ${OUT_DIR}/03_VVVH_ratio.sdat SAGA 0 10 -99999 ${TMP_DIR} \
	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

	SECONDS=0
	echo -ne " Transforming to the dB scale ..." &&
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${TMP_DIR}/Gamma0_VV.md-filtered.sgrd -RESULT:${OUT_DIR}/01_Gamma0_VV.db.sgrd -FORMULA:"10 *log(a)" & spinner $! && 
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${TMP_DIR}/Gamma0_VH.md-filtered.sgrd -RESULT:${OUT_DIR}/02_Gamma0_VH.db.sgrd -FORMULA:"10 *log(a)" \
	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

	SECONDS=0
	echo -ne " Creating 8bit channels..." &&
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${OUT_DIR}/03_VVVH_ratio.sdat ${OUT_DIR}/03_VVVH_ratio.8bit.tif >/dev/null 2>&1 & spinner $! && 
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${OUT_DIR}/01_Gamma0_VV.db.sdat ${OUT_DIR}/01_Gamma0_VV.db.8bit.tif >/dev/null 2>&1 & spinner $! && 
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${OUT_DIR}/02_Gamma0_VH.db.sdat ${OUT_DIR}/02_Gamma0_VH.db.8bit.tif >/dev/null 2>&1 \
	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

	echo -ne " Creating an RGB file..." &&
	gdalbuildvrt -separate -vrtnodata 0 ${OUT_DIR}/RGB_${LINE}.8bit.vrt ${OUT_DIR}/01_Gamma0_VV.db.8bit.tif ${OUT_DIR}/02_Gamma0_VH.db.8bit.tif ${OUT_DIR}/03_VVVH_ratio.8bit.tif >/dev/null 2>&1 & spinner $! && 
	gdalbuildvrt -separate -vrtnodata 0 ${OUT_DIR}/RGB_${LINE}.32bit.vrt ${OUT_DIR}/01_Gamma0_VV.db.sdat ${OUT_DIR}/02_Gamma0_VH.db.sdat ${OUT_DIR}/03_VVVH_ratio.sdat >/dev/null 2>&1 & spinner $! && 
	gdal_translate -a_nodata 0 ${OUT_DIR}/RGB_${LINE}.8bit.vrt ${OUT_DIR}/RGB_${LINE}.8bit.tif >/dev/null 2>&1 \
	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
	fi

	echo "---------------------------------------------------------------------------------------------------------------------"	
	echo " 3) Processing of track $LINE succesfully finished ($j/$NR_OF_TRACKS tracks) "
	echo "---------------------------------------------------------------------------------------------------------------------"

	j=`expr j + 1`
	mkdir -p ZIP
	mv *.zip ZIP
	rm -rf target*
	rm -rf ${TMP_DIR}

	cd ../

done
