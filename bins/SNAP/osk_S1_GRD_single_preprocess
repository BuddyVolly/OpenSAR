#! /bin/bash 

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "3" ]; then
	
	echo -e ""
	echo -e "----------------------------------------------------------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Preprocess Sentinel-1 GRD data from ESA Scihub"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------------------------------------------------------"
	echo -e ""
	echo -e "----------------------------------------------------------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- ESA Sentinel Application Platform SNAP"
	echo -e "	- gdal-bin"
	echo -e "	- saga"
	echo -e "----------------------------------------------------------------------------------"
	echo -e ""
	echo -e " Usage: osk_S1_GRD_single_preprocess <filename> <elevation> <output_folder>"
	echo -e ""
	echo -e " input parameters:"
	echo -e "  filename		(input) filename of the downloaded zip file"
	echo -e "  elevation		(input) filename to the digital elevation model"
	echo -e ""
	echo -e "  NOTE: The DEM file should be provided in Geotiff-format as a 16Bit Integer data type with 0 as the no data value."
	echo -e ""
	echo -e "  output_folder		(output) pathname of the output folder"
	exit 1
else
	echo -e ""
	echo -e "----------------------------------------------------------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Preprocess Sentinel-1 GRD data from ESA Scihub"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------------------------------------------------------"
	echo -e ""
	echo -e "----------------------------------------------------------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- ESA Sentinel Application Platform SNAP"
	echo -e "	- gdal-bin"
	echo -e "	- saga"
	echo -e "----------------------------------------------------------------------------------"
	echo -e ""

	# set up initial script variables
	FILE=`readlink -f $1`
	BASE=`basename ${FILE}`
	PROC_DIR=`dirname ${FILE}`
	TMP1=${PROC_DIR}/TMP/
	rm -rf ${TMP1}	
	mkdir -p ${TMP1}
	export TMP_DIR=${PROC_DIR}/TMP/${BASE}
	mkdir -p ${TMP_DIR}
	DEM_FILE=$2
	mkdir -p $3
	cd $3
	OUT_DIR=`pwd`

	#
	source ${OPENSARKIT}/lib/saga_helpers
	source ${OPENSARKIT}/lib/gdal_helpers
fi


#-------------------------------------------------------------------------------------------
# 1 Get some scene infos and print them to Std.Out
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
# check input file
if [ `echo ${FILE} | rev | cut -c 1-3 | rev` == "dim" ];then

	echo "----------------------------------------------------------------"
	echo " Processing Scene: ${FILE}"
	echo "----------------------------------------------------------------"
else
	#-------------------------------------------------------------------------------------------
	# extract filenames
	SCENE_ID=`echo ${BASE} | rev | cut -c 5- | rev`
	DATE=${SCENE_ID:17:8}
	TRACK=${SCENE_ID:26:3}
	FRAME_START=${SCENE_ID:29:3}
	FRAME_END=${SCENE_ID:45:3}
	ORBIT=${SCENE_ID:49:6}
	MODE=${SCENE_ID:7:3}
	POL_MODE=${SCENE_ID:13:3}
	export SATELLITE="Sentinel-1"
	#-------------------------------------------------------------------------------------------

	echo "----------------------------------------------------------------"
	echo " Processing Scene: 		${SCENE_ID}"
	echo " Satellite/Sensor: 		${SATELLITE}"
	echo " Acquisiton Mode:		${MODE}"
	echo " Polarization Mode:		${POL_MODE}"
	echo " Acquisition Date (YYYYMMDD):	${DATE}"
	echo " Relative Satellite Track: 	${TRACK}"
	echo " Absolute Satellite Track: 	${ORBIT}"
	echo " Start Slice: 			${FRAME_START}"
	echo " End Slice: 			${FRAME_END}"
	echo "----------------------------------------------------------------"
fi
#-------------------------------------------------------------------------------------------
# 3 Preprocess imagery part I - Terrain Correction & Geocoding
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
# prepare DEM
#echo "create DEM crop"
#CROP_DEM=${TMP_DIR}/tmp_crop_dem.tif
#osk_crop_dem ${FILE} ${DEM_FILE} ${CROP_DEM}
#cd ${TMP_DIR}
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
# actual preprocessing according to the graphs
echo " Importing S1 GRD data file and apply the precise orbit file, remove border noise and calibrate the data to beta0"
bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_Orb_Noise_Brd_Cal.xml -x -Pinput=${FILE} -Poutput=${TMP_DIR}/CAL.dim
echo " Applying the Terrain Flattening and multilook the data with a factor of 3"
bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TF_ML.xml -x -Pinput=${TMP_DIR}/CAL.dim -Poutput=${TMP_DIR}/TF.dim
echo " Applying the Refined Lee Speckle Filter and doing the Geometric Terrain Correction (i.e. Geocoding)"
bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_SPK_TC.xml -x -Pinput=${TMP_DIR}/TF.dim -Poutput=${TMP_DIR}/TF_TC.dim

rm -rf ${PROC_DIR}/target*


if [ `echo ${FILE} | rev | cut -c 1-3 | rev` == "dim" ];then
	
	echo " Cut layers to valid range (i.e. -30 to 3 dB)"
	osk_valid_range ${TMP_DIR}/TF_TC.data/Gamma0_VV.img ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sdat SAGA 0.001 1 -99999 ${TMP_DIR}
	osk_valid_range ${TMP_DIR}/TF_TC.data/Gamma0_VH.img ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sdat SAGA 0.001 1 -99999 ${TMP_DIR}

	echo " Apply the Multi-Directional Lee Filter"
	osk_md_filter ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sdat ${OUT_DIR}/Gamma0_VV.md-filtered.sdat SAGA 5000 3000 1 ${TMP_DIR}
	osk_md_filter ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sdat ${OUT_DIR}/Gamma0_VH.md-filtered.sdat SAGA 5000 3000 1 ${TMP_DIR}

	echo " Calculate the VV/VH ratio"
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${OUT_DIR}/Gamma0_VV.md-filtered.sgrd -XGRIDS:${OUT_DIR}/Gamma0_VH.md-filtered.sgrd -RESULT:${TMP_DIR}/VVVH_ratio.sgrd -FORMULA:"a / b"
	osk_valid_range ${TMP_DIR}/VVVH_ratio.sdat ${OUT_DIR}/VVVH_ratio.md-filtered.sdat SAGA 0 10 -99999 ${TMP_DIR} 

	echo " Transform to the dB scaling"
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${OUT_DIR}/Gamma0_VV.md-filtered.sgrd -RESULT:${OUT_DIR}/Gamma0_VV.db.sgrd -FORMULA:"10 *log(a)"
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${OUT_DIR}/Gamma0_VH.md-filtered.sgrd -RESULT:${OUT_DIR}/Gamma0_VH.db.sgrd -FORMULA:"10 *log(a)"

	echo " Creating 8bit channels"
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${OUT_DIR}/VVVH_ratio.md-filtered.sdat ${OUT_DIR}/VVVH_ratio.md-filtered.8bit.tif
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${OUT_DIR}/Gamma0_VV.db.sdat ${OUT_DIR}/Gamma0_VV.db.8bit.tif
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${OUT_DIR}/Gamma0_VH.db.sdat ${OUT_DIR}/Gamma0_VH.db.8bit.tif

	echo " Creating an RGB file"
	gdalbuildvrt -separate -vrtnodata 0 ${TMP_DIR}/RGB_${LINE}.8bit.vrt ${OUT_DIR}/Gamma0_VV.db.8bit.tif ${OUT_DIR}/Gamma0_VH.db.8bit.tif ${OUT_DIR}/VVVH_ratio.md-filtered.8bit.tif
	gdal_translate -a_nodata 0 ${TMP_DIR}/RGB_${LINE}.8bit.vrt ${OUT_DIR}/RGB_${LINE}.8bit.tif
	fi

else

	#-------------------------------------------------------------------------------------------
	# set up final output directory
	FINAL_DIR=$OUT_DIR/${DATE}-${TRACK}
	mkdir -p ${FINAL_DIR}
	#-------------------------------------------------------------------------------------------


	echo " Cut layers to valid range (i.e. -30 to 3 dB)"
	osk_valid_range ${TMP_DIR}/TF_TC.data/Gamma0_VV.img ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sdat SAGA 0.001 1 -99999 ${TMP_DIR}
	osk_valid_range ${TMP_DIR}/TF_TC.data/Gamma0_VH.img ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sdat SAGA 0.001 1 -99999 ${TMP_DIR}

	echo " Apply the Multi-Directional Lee Filter"
	osk_md_filter ${TMP_DIR}/TF_TC.data/Gamma0_VV.rerange.sdat ${FINAL_DIR}/Gamma0_VV.md-filtered.sdat SAGA 5000 3000 1 ${TMP_DIR}
	osk_md_filter ${TMP_DIR}/TF_TC.data/Gamma0_VH.rerange.sdat ${FINAL_DIR}/Gamma0_VH.md-filtered.sdat SAGA 5000 3000 1 ${TMP_DIR}

	echo " Calculate the VV/VH ratio"
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${FINAL_DIR}/Gamma0_VV.md-filtered.sgrd -XGRIDS:${FINAL_DIR}/Gamma0_VH.md-filtered.sgrd -RESULT:${TMP_DIR}/VVVH_ratio.sgrd -FORMULA:"a / b"
	osk_valid_range ${TMP_DIR}/VVVH_ratio.sdat ${FINAL_DIR}/VVVH_ratio.md-filtered.sdat SAGA 0 10 -99999 ${TMP_DIR}

	echo " Transform to the dB scaling"
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${FINAL_DIR}/Gamma0_VV.md-filtered.sgrd -RESULT:${FINAL_DIR}/Gamma0_VV.db.sgrd -FORMULA:"10 *log(a)"
	saga_cmd -f=s -c=${CPU} grid_calculus 1 -GRIDS:${FINAL_DIR}/Gamma0_VH.md-filtered.sgrd -RESULT:${FINAL_DIR}/Gamma0_VH.db.sgrd -FORMULA:"10 *log(a)"

	echo " Creating 8bit channels"
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${FINAL_DIR}/VVVH_ratio.md-filtered.sdat ${FINAL_DIR}/VVVH_ratio.md-filtered.8bit.tif
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${FINAL_DIR}/Gamma0_VV.db.sdat ${FINAL_DIR}/Gamma0_VV.db.8bit.tif
	gdal_contrast_stretch -ndv '-99999' -outndv 0 -percentile-range 0.02 0.98 ${FINAL_DIR}/Gamma0_VH.db.sdat ${FINAL_DIR}/Gamma0_VH.db.8bit.tif

	echo " Creating an RGB file"
	gdalbuildvrt -separate -vrtnodata 0 ${TMP_DIR}/RGB_${LINE}.8bit.vrt ${FINAL_DIR}/Gamma0_VV.db.8bit.tif ${FINAL_DIR}/Gamma0_VH.db.8bit.tif ${FINAL_DIR}/VVVH_ratio.md-filtered.8bit.tif
	gdal_translate -a_nodata 0 ${TMP_DIR}/RGB_${LINE}.8bit.vrt ${FINAL_DIR}/RGB_${LINE}.8bit.tif

fi

rm -rf ${TMP_DIR}


