#! /bin/bash

# 0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "4" ]; then

	echo -e "-------------------------------------"
	echo -e " Open Foris SAR Toolkit, version ${OSK_VERSION}"
	echo -e " Prepare ALOS Kyoto & Carbon mosaics"
	echo -e "-------------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- gdal-bin"
	echo -e "	- SNAP toolbox"
	echo -e "----------------------------------"
	echo -e ""
#	echo -e " syntax: osk_ALOS_KC_process <project_folder> <ISO3/AOI> <year> <filtering> <texture>"
	echo -e " syntax: oft-sar-ALOS-KC-process <project_folder> <ISO3/AOI> <year> <filtering>"
	echo -e ""
	echo -e " description of input parameters:"
	echo -e " project_folder		(output) pathname of the project folder (i.e. the folder created by osk_ALOS_KC_download script)"
 	echo -e " ISO3/AOI		ISO3 country code or shapefile of your area of interest"
	echo -e " year			Acquisition Year (2007, 2008, 2009, 2010 or 2015)"
	echo -e " filtering		Apply Refined Lee Filter"
	echo -e "			  Available choices:"
	echo -e "			  0: no filtering applied"
	echo -e "			  1: filter applied"
#	echo -e " texture		Calculate Texture measures"
#	echo -e "			  Available choices:"
#	echo -e "			  0: no calculation applied"
#	echo -e "			  1: texture measures will be applied"
	echo -e ""		
	echo -e ""

  	exit 1
else
	echo -e "-------------------------------------"
	echo -e " Open Foris SAR Toolkit, version ${OSK_VERSION}"
	echo -e " Prepare ALOS Kyoto & Carbon mosaics"
	echo -e "-------------------------------------"
	echo -e ""

	# set up initial script variables
	mkdir -p $1
	cd $1
	OUT_DIR=`pwd` 
	ZIP_DIR=${OUT_DIR}/ZIP
	YEAR=$3
	YEAR_SHORT=${YEAR:2:2}
	mkdir -p ${OUT_DIR}/${YEAR}/
	export TMP_DIR=${OUT_DIR}/.TMP${YEAR}
	rm -rf ${TMP_DIR} >> /dev/null 2>&1
	mkdir -p ${TMP_DIR}
	LOG_DIR=${OUT_DIR}/${YEAR}/LOG
	mkdir -p ${LOG_DIR}
	# source libs
	source ${OPENSARKIT}/lib/helpers_source
fi


#------------------------------------------------------------------------
# extract data
cd $ZIP_DIR
SECONDS=0
echo -ne " Unpacking the downloaded archives ..." &&
for LINE in `ls -1 *${YEAR_SHORT}*tar.gz`;do

	tar -xzf ${LINE} -C ${TMP_DIR}

done \
& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
#------------------------------------------------------------------------

#----------------------------------------------------------------------
# check if AOI comes from country code or is already a shape
cd ${OUT_DIR}

if [ `echo $2 | grep shp` ]; then # AOI case
		AOI=`readlink -f $2`
		echo " Selected AOI file: ${AOI}"
else # country case
      COUNTRY=`echo "SELECT name FROM countries WHERE \"iso3\" = '$2';" | spatialite $DB_GLOBAL | head -50`
		SECONDS=0
		echo -ne " Extracting country boundaries for ${COUNTRY} ..." &&
	  	ogr2ogr -f "Esri Shapefile" ${TMP_DIR}/AOI.shp ${DB_GLOBAL} -dsco SPATIALITE=yes -where "\"iso3\" = \"${2}\"" -nln AOI countries > ${LOG_DIR}/log_process 2>&1 \
		& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
		AOI=${TMP_DIR}/AOI.shp
		
		SECONDS=0
		echo -ne " Creating a 0.1 degree buffer (used for final masking) ... " &&	
	   ogr2ogr -f "Esri Shapefile" ${TMP_DIR}/AOI_buffer.shp ${DB_GLOBAL} -dsco SPATIALITE=yes -sql "select ST_union(ST_buffer(geom,0.1)) from countries where \"iso3\" = \"${2}\""  >> ${LOG_DIR}/log_process 2>&1 \
		& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
		AOI_BUF=${TMP_DIR}/AOI_buffer.shp
fi

LAYER=`ogrinfo ${AOI} | tail -1 | awk $'{print $2}'`
#----------------------------------------------------------------------

#------------------------------------------------------------------------
# create output folders
mkdir -p ${OUT_DIR}/${YEAR}/FNF
mkdir -p ${OUT_DIR}/${YEAR}/MOS
mkdir -p ${OUT_DIR}/${YEAR}/AUX
#------------------------------------------------------------------------

#------------------------------------------------------------------------
echo "----------------------------------------------"
echo " Preparing the K&C Forest/Non-Forest map tiles"
echo "----------------------------------------------"

if [ ${YEAR} -gt 2010 ];then 
	SECONDS=0
	echo -ne " Merging the FNF tiles ..." &&
	gdalbuildvrt -srcnodata 0 ${TMP_DIR}/FNF_map.vrt ${TMP_DIR}/*_C_F02DAR  >> ${LOG_DIR}/log_process 2>&1 \
	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
else
	SECONDS=0
	echo -ne " Merging the FNF tiles ..." &&
	gdalbuildvrt -srcnodata 0 ${TMP_DIR}/FNF_map.vrt ${TMP_DIR}/*_C  >> ${LOG_DIR}/log_process 2>&1 \
	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
fi

if [ `echo $2 | grep shp` ]; then
	SECONDS=0	
	echo -ne " Cropping the FNF Map to the extent of the AOI ..." &&
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline ${TMP_DIR}/FNF_map.vrt ${OUT_DIR}/${YEAR}/FNF/${YEAR}"_KC_FNF_map.tif" >> ${LOG_DIR}/log_process 2>&1 \
	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
	rm -f ${TMP_DIR}/*_C_F02DAR* 
else
	SECONDS=0
	echo -ne " Cropping the FNF Map to the extent of the AOI ..." &&
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI_BUF} -crop_to_cutline ${TMP_DIR}/FNF_map.vrt ${OUT_DIR}/${YEAR}/FNF/${YEAR}"_KC_FNF_map.tif" >> ${LOG_DIR}/log_process 2>&1 \
	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
	rm -f ${TMP_DIR}/*_C
fi
#------------------------------------------------------------------------

#------------------------------------------------------------------------
echo "------------------------------------------------------------------------------------"
echo " Processing the Auxiliary information (i.e. Acquisition Date/Local Incidence Angle) "
echo "------------------------------------------------------------------------------------"

SECONDS=0
echo -ne " Extracting auxiliary information ..." &&
gdalbuildvrt -srcnodata 0 ${TMP_DIR}/LINCI.vrt $(ls ${TMP_DIR}/*_linci* | grep -v hdr) >> ${LOG_DIR}/log_process 2>&1 & spinner $!
gdalbuildvrt -srcnodata 0 ${TMP_DIR}/DATE.vrt $(ls ${TMP_DIR}/*_date* | grep -v hdr) >> ${LOG_DIR}/log_process 2>&1 \
& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

SECONDS=0
if [ `echo $2 | grep shp` ]; then
	echo -ne " Cropping the auxiliary data to the extent of the AOI ..." &&
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline ${TMP_DIR}/LINCI.vrt ${OUT_DIR}/${YEAR}/AUX/${YEAR}"_loc_inc_angle.tif" >> ${LOG_DIR}/log_process 2>&1 & spinner $!
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline ${TMP_DIR}/DATE.vrt ${OUT_DIR}/${YEAR}/AUX/${YEAR}"_acquisition_date.tif" >> ${LOG_DIR}/log_process 2>&1 \
	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
else
	echo -ne " Cropping the auxiliary data to the extent of the AOI ..." &&
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI_BUF} -crop_to_cutline ${TMP_DIR}/LINCI.vrt ${OUT_DIR}/${YEAR}/AUX/${YEAR}"_loc_inc_angle.tif" >> ${LOG_DIR}/log_process 2>&1 & spinner $!
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI_BUF} -crop_to_cutline ${TMP_DIR}/DATE.vrt ${OUT_DIR}/${YEAR}/AUX/${YEAR}"_acquisition_date.tif" >> ${LOG_DIR}/log_process 2>&1 \
	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
fi 
#------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------
echo "---------------------------"
echo " Processing the Data Tiles "
echo "---------------------------"

cd ${TMP_DIR}
for DATA in `ls -1 *${YEAR_SHORT}"_sl_HH"* | grep -v hdr`;do #filter HH1x1 tiles that fall in the AOI
		
	#-------------------------------------------------------------------------------------
	# check if 1x1 tile intersects with AOI
	
	# create a shapefile
	SECONDS=0
	echo -ne " Check for overlap between the AOI and the 1x1 degree tile: ${DATA} " &&
	gdal_trace_outline ${DATA} -out-cs ll -ogr-out ${DATA}.shp >> ${LOG_DIR}/log_process 2>&1 & spinner $! &&
	LAYER_TILE=`ogrinfo ${DATA}.shp | tail -1 | awk $'{print $2}'`
	DATA_PATH=`readlink -f ${DATA}`		
	AOI_PATH=`readlink -f $AOI`

	# create a vrt for intersect analysis
	echo "<OGRVRTDataSource>" > ${TMP_DIR}/intersect_tile.vrt
	echo "   <OGRVRTLayer name=\"${LAYER_TILE}\">" >> ${TMP_DIR}/intersect_tile.vrt
	echo "      <SrcDataSource>${DATA_PATH}.shp</SrcDataSource>" >> ${TMP_DIR}/intersect_tile.vrt
	echo "   </OGRVRTLayer>" >> ${TMP_DIR}/intersect_tile.vrt
	echo "   <OGRVRTLayer name=\"${LAYER}\">" >> ${TMP_DIR}/intersect_tile.vrt
	echo "      <SrcDataSource>${AOI_PATH}</SrcDataSource>" >> ${TMP_DIR}/intersect_tile.vrt
	echo "   </OGRVRTLayer>" >> ${TMP_DIR}/intersect_tile.vrt
	echo "</OGRVRTDataSource>" >> ${TMP_DIR}/intersect_tile.vrt	


	# create intersect table	
	ogr2ogr -f "csv" ${TMP_DIR}/grids.csv ${TMP_DIR}/intersect_tile.vrt -dialect sqlite -sql "SELECT * FROM ${LAYER} a, ${LAYER_TILE} b WHERE ST_Intersects(a.geometry, b.geometry)" >> ${LOG_DIR}/log_process 2>&1 $ spinner $! &&
	
	if [ `cat ${TMP_DIR}/grids.csv | wc -l` -gt 1 ];then
	
		echo "- Overlapping data tile ${DATA} will be processed"
			
		DATA_HH=${DATA}
		DATA_HV=$(sed 's|_sl_HH|_sl_HV|g' <<< ${DATA_HH})

		#translate ot tif to make it readable for SNAP
		gdal_translate -of GTiff ${TMP_DIR}/${DATA_HH} ${TMP_DIR}/${DATA_HH}.tif >> ${LOG_DIR}/log_process 2>&1 
		gdal_translate -of GTiff ${TMP_DIR}/${DATA_HV} ${TMP_DIR}/${DATA_HV}.tif >> ${LOG_DIR}/log_process 2>&1 

		# Speckle Filtering
		if [ $4 -eq 1 ];then #filter case
			SECONDS=0
			echo -ne " Applying the Refined Lee Filter on the HH band ..." &&
			bash $SNAP_EXE Speckle-Filter -x -Pfilter='Refined Lee' -Ssource=${TMP_DIR}/${DATA_HH}.tif -f 'GeoTIFF' -t ${TMP_DIR}/${DATA_HH}.filtered.tif >> ${LOG_DIR}/log_process 2>&1 \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

			SECONDS=0
			echo -ne " Applying the Refined Lee Filter on the HV band ..." &&
			bash $SNAP_EXE Speckle-Filter -x -Pfilter='Refined Lee' -Ssource=${TMP_DIR}/${DATA_HV}.tif -f 'GeoTIFF' -t ${TMP_DIR}/${DATA_HV}.filtered.tif >> ${LOG_DIR}/log_process 2>&1 \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
		fi

		if [ $4 -eq 1 ];then #filter case
			kc_rfdi ${TMP_DIR}/${DATA_HH}.filtered.tif ${TMP_DIR}/${DATA_HV}.filtered.tif ${TMP_DIR}/${DATA_HH}.rfdi.tif ${LOG_DIR}
		else
			kc_rfdi ${TMP_DIR}/${DATA_HH}.tif ${TMP_DIR}/${DATA_HV}.tif ${TMP_DIR}/${DATA_HH}.rfdi.tif ${LOG_DIR}
		fi

		# Layover/Shadow masking
		mkdir -p ${TMP_DIR}/TILES
		
		SECONDS=0
		echo -ne " Masking out layover/shadow areas ..." &&
		if [ ${YEAR} -gt 2010 ];then 
			gdal_calc.py -A ${DATA:0:10}"_mask_F02DAR" --outfile=${DATA}"_mask.tif" --calc="1*(A==255)" >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
		else
			gdal_calc.py -A ${DATA:0:10}"_mask" --outfile=${DATA}"_mask.tif" --calc="1*(A==255)" >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
		fi
		
		if [ $4 -eq 1 ];then #filter case
			bash $SNAP_EXE ${SNAP_GRAPHS}/KC_mask.xml -x -Pfilelist="${TMP_DIR}/${DATA}"_mask.tif",${TMP_DIR}/${DATA_HH}.filtered.tif" -Poutput=${TMP_DIR}/TILES/1_${DATA_HH}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
			bash $SNAP_EXE ${SNAP_GRAPHS}/KC_mask.xml -x -Pfilelist="${TMP_DIR}/${DATA}"_mask.tif",${TMP_DIR}/${DATA_HV}.filtered.tif" -Poutput=${TMP_DIR}/TILES/2_${DATA_HV}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $!
			bash $SNAP_EXE ${SNAP_GRAPHS}/KC_mask_rfdi.xml -x -Pfilelist="${TMP_DIR}/${DATA}"_mask.tif",${TMP_DIR}/${DATA_HH}.rfdi.tif" -Poutput=${TMP_DIR}/${DATA_HH}.rfdi.mask.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! \
			&& duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
		else
			bash $SNAP_EXE ${SNAP_GRAPHS}/KC_mask.xml -x -Pfilelist="${TMP_DIR}/${DATA}"_mask.tif",${TMP_DIR}/${DATA_HH}.tif" -Poutput=${TMP_DIR}/TILES/1_${DATA_HH}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
			bash $SNAP_EXE ${SNAP_GRAPHS}/KC_mask.xml -x -Pfilelist="${TMP_DIR}/${DATA}"_mask.tif",${TMP_DIR}/${DATA_HV}.tif" -Poutput=${TMP_DIR}/TILES/2_${DATA_HV}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
			bash $SNAP_EXE ${SNAP_GRAPHS}/KC_mask_rfdi.xml -x -Pfilelist="${TMP_DIR}/${DATA}"_mask.tif",${TMP_DIR}/${DATA_HH}.rfdi.tif" -Poutput=${TMP_DIR}/${DATA_HH}.rfdi.mask.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! \
			&& duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
		fi	


		SECONDS=0
		echo -ne " Rescaling the RFDI to unsigned 16 bit integer values ..." &&
		MIN="0"
		MAX="1"
		gdal_translate -scale ${MIN} ${MAX} 0 65535 -a_nodata 0 -ot UInt16 ${TMP_DIR}/${DATA_HH}.rfdi.mask.tif ${TMP_DIR}/TILES/4_${DATA_HH}.rfdi.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! \
		&& duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

		rm -f ${TMP_DIR}/${DATA_HH}*
		rm -f ${TMP_DIR}/${DATA_HV}*

		SECONDS=0
		echo -ne " Creating the HH/HV ratio channel ..." &&
		bash $SNAP_EXE ${SNAP_GRAPHS}/KC_ratio.xml -x -Pfilelist="${TMP_DIR}/TILES/1_${DATA_HH}.tif,${TMP_DIR}/TILES/2_${DATA_HV}.tif" -Poutput=${TMP_DIR}/TILES/${DATA_HH}"_HV_ratio.float.tif" >> ${LOG_DIR}/log_process 2>&1 & spinner $!
		gdal_translate -a_nodata 0 ${TMP_DIR}/TILES/${DATA_HH}"_HV_ratio.float.tif" ${TMP_DIR}/TILES/${DATA_HH}"_HV_ratio.float.ndv.tif" >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
		MIN=0  #	`gdal_min ${TMP_DIR}/TILES/${DATA_HH}"_HV_ratio.float.ndv.tif"`
		MAX=15 #`gdal_max ${TMP_DIR}/TILES/${DATA_HH}"_HV_ratio.float.ndv.tif"`
   	gdal_translate -scale ${MIN} ${MAX} 0 65535 -a_nodata 0 -ot UInt16 ${TMP_DIR}/TILES/${DATA_HH}"_HV_ratio.float.ndv.tif" ${TMP_DIR}/TILES/3_${DATA_HH}"_HV_ratio.tif" >> ${LOG_DIR}/log_process 2>&1 & spinner $! \
		&& duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

		rm -f ${TMP_DIR}/TILES/${DATA_HH}"_HV_ratio.float.ndv.tif" ${TMP_DIR}/TILES/${DATA_HH}"_HV_ratio.float.ndv.tif"

	else 

		echo -e "- No Overlap, going on with next tile."	
	fi

	rm -f ${TMP_DIR}/grids.csv

done
		
#--------------------------------------------------------------
# 3 build the final mosaic

SECONDS=0
echo -ne " Merging the data tiles ..." &&
gdalbuildvrt ${TMP_DIR}/TILES/mosaic_hh.vrt ${TMP_DIR}/TILES/1_*sl_HH*tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
gdalbuildvrt ${TMP_DIR}/TILES/mosaic_hv.vrt ${TMP_DIR}/TILES/2_*sl_HV*tif >> ${LOG_DIR}/log_process 2>&1 & spinner $!
gdalbuildvrt ${TMP_DIR}/TILES/mosaic_hhhv.vrt ${TMP_DIR}/TILES/3_*HH*HV_ratio.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
gdalbuildvrt ${TMP_DIR}/TILES/mosaic_rfdi.vrt ${TMP_DIR}/TILES/4_*rfdi.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $!\
&& duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

if [ `echo $2 | grep shp` ]; then # AOI case
	SECONDS=0
	echo -ne " Creating RGB mosaic (R:HH, G:HV, B:HH/HV) ..."
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline ${TMP_DIR}/TILES/mosaic_hh.vrt ${OUT_DIR}/${YEAR}/MOS/01_Gamma0_HH_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline ${TMP_DIR}/TILES/mosaic_hv.vrt ${OUT_DIR}/${YEAR}/MOS/02_Gamma0_HV_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline ${TMP_DIR}/TILES/mosaic_hhhv.vrt ${OUT_DIR}/${YEAR}/MOS/03_HHHV_ratio_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline ${TMP_DIR}/TILES/mosaic_rfdi.vrt ${OUT_DIR}/${YEAR}/MOS/04_RFDI_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
	gdalbuildvrt -separate -vrtnodata 0 ${OUT_DIR}/${YEAR}/MOS/RGB_${YEAR}.vrt ${OUT_DIR}/${YEAR}/MOS/01_Gamma0_HH_${YEAR}.tif ${OUT_DIR}/${YEAR}/MOS/02_Gamma0_HV_${YEAR}.tif ${OUT_DIR}/${YEAR}/MOS/03_HHHV_ratio_${YEAR}.tif \
	>> ${LOG_DIR}/log_process 2>&1 & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
else # buffered country boundaries
	SECONDS=0
	echo -ne " Creating RGB mosaic (R:HH, G:HV, B:HH/HV) ..."
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI_BUF} -crop_to_cutline ${TMP_DIR}/TILES/mosaic_hh.vrt ${OUT_DIR}/${YEAR}/MOS/01_Gamma0_HH_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $!
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI_BUF} -crop_to_cutline ${TMP_DIR}/TILES/mosaic_hv.vrt ${OUT_DIR}/${YEAR}/MOS/02_Gamma0_HV_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI_BUF} -crop_to_cutline ${TMP_DIR}/TILES/mosaic_hhhv.vrt ${OUT_DIR}/${YEAR}/MOS/03_HHHV_ratio_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI_BUF} -crop_to_cutline ${TMP_DIR}/TILES/mosaic_rfdi.vrt ${OUT_DIR}/${YEAR}/MOS/04_RFDI_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1 & spinner $! 
	gdalbuildvrt -separate -vrtnodata 0 ${OUT_DIR}/${YEAR}/MOS/RGB_${YEAR}.vrt ${OUT_DIR}/${YEAR}/MOS/01_Gamma0_HH_${YEAR}.tif ${OUT_DIR}/${YEAR}/MOS/02_Gamma0_HV_${YEAR}.tif ${OUT_DIR}/${YEAR}/MOS/03_HHHV_ratio_${YEAR}.tif \
	>> ${LOG_DIR}/log_process 2>&1 & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
fi
#--------------------------------------------------------------

# remove Temp Folder
rm -rf ${TMP_DIR}

echo " ---------------------------------------------------------------------------------------------"
echo " Succesfully processed the K&C tiles "
echo " You can find the RGB backscatter data in: ${OUT_DIR}/${YEAR}/MOS/RGB_${YEAR}.vrt"
echo " You can find the K&C Forest/Non-forest data in: ${OUT_DIR}/${YEAR}/FNF/${YEAR}"_KC_FNF_map.tif""
echo " You can find the corresponding acquisiton dates: ${OUT_DIR}/${YEAR}/AUX/${YEAR}"_acquisition_date.tif""
echo " You can find the corresponding local incidence angles in: ${OUT_DIR}/${YEAR}/AUX/${YEAR}"_loc_inc_angle.tif""
echo " ---------------------------------------------------------------------------------------------"
