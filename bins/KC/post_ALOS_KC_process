#! /bin/bash

# The MIT License (MIT)
# Copyright (c) 2016 Andreas Vollrath

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# 0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "4" ]; then

	echo -e "-------------------------------------"
	echo -e " Open Foris SAR Toolkit, version ${OST_VERSION}"
	echo -e " Prepare ALOS Kyoto & Carbon mosaics"
	echo -e "-------------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- gdal-bin"
	echo -e "	- SNAP toolbox"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " syntax: oft-sar-ALOS-KC-process <project_folder> <ISO3/AOI> <year> <filtering>"
	echo -e ""
	echo -e " description of input parameters:"
	echo -e " project_folder		(output) pathname of the project folder (i.e. the folder created by osk_ALOS_KC_download script)"
 	echo -e " ISO3/AOI		ISO3 country code or shapefile of your area of interest"
	echo -e " Year			Acquisition Year (2007, 2008, 2009, 2010 or 2015)"
	echo -e " filtering		Apply Multi-directional Lee Filter (Lee et al. 1998)"
	echo -e "			  Available choices:"
	echo -e "			  0: no filtering applied"
	echo -e "			  1: filter applied"
	echo -e "			  2: Unbiased Non-Local Means Filter (experimental)"
#	echo -e " texture		Calculate Texture measures"
#	echo -e "			  Available choices:"
#	echo -e "			  0: no calculation applied"
#	echo -e "			  1: texture measures will be applied"
	echo -e ""
	echo -e ""

  	exit 1
else

	# source libs
	source ${OPENSARKIT}/lib/helpers_source

	# set up initial script variables
	mkdir -p $1
	cd $1
	OUT_DIR=`pwd`
	ZIP_DIR=${OUT_DIR}/ZIP
	YEAR=$3
	YEAR_SHORT=${YEAR:2:2}
	mkdir -p ${OUT_DIR}/${YEAR}/
	export TMP_DIR=${OUT_DIR}/.TMP${YEAR}
	TMP_DIR=${SAR_TMP:-$OUT_DIR/.TMP$YEAR}
	rm -rf ${TMP_DIR} >> /dev/null 2>&1
	mkdir -p ${TMP_DIR}
	LOG_DIR=${OUT_DIR}/${YEAR}/LOG
	mkdir -p ${LOG_DIR}
	export GDAL_CACHEMAX=512

	echo -e "-------------------------------------" | tee ${OUT_DIR}/.kc_pro_progress
	echo -e " Open SAR Toolkit, version ${OST_VERSION}" | tee -a ${OUT_DIR}/.kc_pro_progress
	echo -e " Prepare ALOS Kyoto & Carbon mosaics" | tee -a ${OUT_DIR}/.kc_pro_progress
	echo -e "-------------------------------------" | tee -a ${OUT_DIR}/.kc_pro_progress
	echo -e "" | tee -a ${OUT_DIR}/.kc_pro_progress


fi

#------------------------------------------------------------------------
# check archive integrity
cd $ZIP_DIR

# check if we can use the RAM on sepal
NR_OF_TILES=$(ls -1 *_${YEAR_SHORT}_*tar.gz | wc -l)

# check if ramdisk can be used
set_tmp_KC ${NR_OF_TILES} >> ${OUT_DIR}/.kc_pro_progress
set_tmp_KC ${NR_OF_TILES}

SECONDS=0
echo -ne " Checking the integrity of the downloaded archives ..." | tee -a ${OUT_DIR}/.kc_pro_progress
for file in $(ls -1 *_${YEAR_SHORT}_*tar.gz); do
	echo "source $OPENSARKIT/lib/helpers_source; check_tar $file >> ${TMP_DIR}/check" >> ${TMP_DIR}/check_cmd
done

# run the parallel command
cat ${TMP_DIR}/check_cmd | parallel --no-notice -j "`nproc`" bash -c {}

if [[ $(cat ${TMP_DIR}/check | grep -v 0 | wc -l) -gt 0 ]];then
	 echo "Your downloaded data is corrupted. Please delete the downloaded files and re-start downloading." | tee -a ${OUT_DIR}/.kc_pro_progress && exit 11
fi
duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress
#------------------------------------------------------------------------

#------------------------------------------------------------------------
# extract data
cd $ZIP_DIR
SECONDS=0
echo -ne " Unpacking the downloaded archives ..."  | tee -a ${OUT_DIR}/.kc_pro_progress
ls -1 *_${YEAR_SHORT}_*tar.gz | parallel --no-notice -j "`nproc`" tar -xzf {} -C ${TMP_DIR}
duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress

#------------------------------------------------------------------------

#----------------------------------------------------------------------
# check if AOI comes from country code or is already a shape
cd ${OUT_DIR}

if [ "`echo $2 | grep shp`" ]; then # AOI case
	AOI=`readlink -f $2`
	echo " Selected AOI file: ${AOI}"
else # country case
  COUNTRY=`echo "SELECT name FROM countries WHERE \"iso3\" = '$2';" | spatialite ${OST_DB} | head -50`
	SECONDS=0
	echo -ne " Extracting country boundaries for ${COUNTRY} ..."  | tee -a ${OUT_DIR}/.kc_pro_progress
	ogr2ogr -f "Esri Shapefile" ${TMP_DIR}/AOI.shp ${OST_DB} -dsco SPATIALITE=yes -where "\"iso3\" = \"${2}\"" -nln AOI countries > ${LOG_DIR}/log_process 2>&1
	duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress
	AOI=${TMP_DIR}/AOI.shp

	SECONDS=0
	echo -ne " Creating a 0.1 degree buffer (used for final masking) ... "  | tee -a ${OUT_DIR}/.kc_pro_progress
 	ogr2ogr -f "Esri Shapefile" ${TMP_DIR}/AOI_buffer.shp ${OST_DB} -dsco SPATIALITE=yes -sql "select ST_union(ST_buffer(geom,0.1)) from countries where \"iso3\" = \"${2}\""  >> ${LOG_DIR}/log_process 2>&1
	duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress
	# in case a country is selected we use the buffered AOI
	AOI=${TMP_DIR}/AOI_buffer.shp
fi
#----------------------------------------------------------------------

#------------------------------------------------------------------------
# create output folders
#mkdir -p ${OUT_DIR}/${YEAR}/FNF
mkdir -p ${OUT_DIR}/${YEAR}/MOS
mkdir -p ${OUT_DIR}/${YEAR}/Auxiliary
#------------------------------------------------------------------------

#------------------------------------------------------------------------
echo "------------------------------------------------------------------------------------" | tee -a ${OUT_DIR}/.kc_pro_progress
echo " Processing the Auxiliary information (i.e. Acquisition Date/Local Incidence Angle) " | tee -a ${OUT_DIR}/.kc_pro_progress
echo "------------------------------------------------------------------------------------" | tee -a ${OUT_DIR}/.kc_pro_progress

SECONDS=0
echo -ne " Extracting auxiliary information ..."  | tee -a ${OUT_DIR}/.kc_pro_progress
gdalbuildvrt -srcnodata 0 ${TMP_DIR}/LINCI.vrt $(ls ${TMP_DIR}/*_linci* | grep -v hdr) >> ${LOG_DIR}/log_process 2>&1
gdalbuildvrt -srcnodata 0 ${TMP_DIR}/DATE.vrt $(ls ${TMP_DIR}/*_date* | grep -v hdr) >> ${LOG_DIR}/log_process 2>&1
duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress

SECONDS=0
echo -ne " Cropping the auxiliary data to the extent of the AOI ..."  | tee -a ${OUT_DIR}/.kc_pro_progress
gdalwarp -multi -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline ${TMP_DIR}/LINCI.vrt -co "COMPRESS=LZW" ${OUT_DIR}/${YEAR}/Auxiliary/${YEAR}"_loc_inc_angle.tif" >> ${LOG_DIR}/log_process 2>&1
duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress

# remove local inc files
rm -rf ${TMP_DIR}/*_linci*

# convert raster data into polygon
SECONDS=0
echo -ne " Create a polygon shapefile containing the acquisition dates ..." | tee -a ${OUT_DIR}/.kc_pro_progress
gdal_polygonize.py ${TMP_DIR}/DATE.vrt -f 'ESRI Shapefile' ${TMP_DIR} >> ${LOG_DIR}/log_process 2>&1

#remove date files
rm -rf ${TMP_DIR}/*_date*

# add a column for the date
ogrinfo ${TMP_DIR}/out.shp -sql "ALTER TABLE out ADD COLUMN date date"
# fill the column for date dependent on sensor (if clause)
if [ ${YEAR} -gt 2010 ];then
	ogrinfo ${TMP_DIR}/out.shp -dialect SQLite -sql "UPDATE out SET date = date('2014-05-24','+' || DN || ' days')"
	ogr2ogr -clipsrc ${AOI} ${OUT_DIR}/${YEAR}/acquisition_dates.shp ${TMP_DIR}/out.shp
elif [ ${YEAR} -lt 2005 ];then
	ogrinfo ${TMP_DIR}/out.shp -dialect SQLite -sql "UPDATE out SET date = date('1992-02-11','+' || DN || ' days')"
	ogr2ogr -clipsrc ${AOI} ${OUT_DIR}/${YEAR}/acquisition_dates.shp ${TMP_DIR}/out.shp
else
	ogrinfo ${TMP_DIR}/out.shp -dialect SQLite -sql "UPDATE out SET date = date('2006-01-24','+' || DN || ' days')"
	ogr2ogr -clipsrc ${AOI} ${OUT_DIR}/${YEAR}/acquisition_dates.shp ${TMP_DIR}/out.shp
fi

# delete tmp shapes
rm -rf ${TMP_DIR}/out.*
duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress
#------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------
echo "---------------------------" | tee -a ${OUT_DIR}/.kc_pro_progress
echo " Processing the Data Tiles " | tee -a ${OUT_DIR}/.kc_pro_progress
echo "---------------------------" | tee -a ${OUT_DIR}/.kc_pro_progress

cd ${TMP_DIR}

if [ ${YEAR} -gt 2006 ];then

	for TILE in `ls -1 *${YEAR_SHORT}"_sl_HH"* | grep -v hdr`; do
		echo "source ${OPENSARKIT}/lib/kc_libs; kc_process ${TILE} ${AOI} $4 ${YEAR} ${TMP_DIR} ${LOG_DIR}" >> ${TMP_DIR}/proc_list
	done

	SECONDS=0
	echo -ne " Processing of 1 x 1 degree tiles using GNU parallel ..." | tee -a ${OUT_DIR}/.kc_pro_progress
	cat ${TMP_DIR}/proc_list | parallel --no-notice -j "`nproc`" bash -c {}


	#--------------------------------------------------------------
	# 3 build the final mosaic

	SECONDS=0
	echo -ne " Merging the data tiles ..." | tee -a ${OUT_DIR}/.kc_pro_progress
	gdalbuildvrt ${TMP_DIR}/TILES/mosaic_hh.vrt ${TMP_DIR}/TILES/1_*sl_HH*tif >> ${LOG_DIR}/log_process 2>&1
	gdalbuildvrt ${TMP_DIR}/TILES/mosaic_hv.vrt ${TMP_DIR}/TILES/2_*sl_HV*tif >> ${LOG_DIR}/log_process 2>&1
	gdalbuildvrt ${TMP_DIR}/TILES/mosaic_hhhv.vrt ${TMP_DIR}/TILES/3_*ratio.tif >> ${LOG_DIR}/log_process 2>&1
	gdalbuildvrt ${TMP_DIR}/TILES/mosaic_rfdi.vrt ${TMP_DIR}/TILES/4_*rfdi.tif >> ${LOG_DIR}/log_process 2>&1
	duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress

	SECONDS=0
	echo -ne " Creating RGB mosaic (R:HH, G:HV, B:HH/HV) ..." | tee -a ${OUT_DIR}/.kc_pro_progress
	gdalwarp -multi -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline -co "BIGTIFF=YES" -co "COMPRESS=LZW" ${TMP_DIR}/TILES/mosaic_hh.vrt ${OUT_DIR}/${YEAR}/MOS/01_Gamma0_HH_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1
	rm -rf ${TMP_DIR}/TILES/1_*sl_HH*tif
	gdalwarp -multi -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline -co "BIGTIFF=YES" -co "COMPRESS=LZW" ${TMP_DIR}/TILES/mosaic_hv.vrt ${OUT_DIR}/${YEAR}/MOS/02_Gamma0_HV_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1
	gdalbuildvrt ${TMP_DIR}/TILES/mosaic_hv.vrt ${TMP_DIR}/TILES/2_*sl_HV*tif
	gdalwarp -multi -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline -co "BIGTIFF=YES" -co "COMPRESS=LZW" ${TMP_DIR}/TILES/mosaic_hhhv.vrt ${OUT_DIR}/${YEAR}/MOS/03_HHHV_ratio_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1
	gdalbuildvrt ${TMP_DIR}/TILES/mosaic_hhhv.vrt ${TMP_DIR}/TILES/3_*ratio.tif
	gdalwarp -multi -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline -co "BIGTIFF=YES" -co "COMPRESS=LZW" ${TMP_DIR}/TILES/mosaic_rfdi.vrt ${OUT_DIR}/${YEAR}/MOS/04_RFDI_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1
	gdalbuildvrt ${TMP_DIR}/TILES/mosaic_rfdi.vrt ${TMP_DIR}/TILES/4_*rfdi.tif
	gdalbuildvrt -separate -vrtnodata 0 ${OUT_DIR}/${YEAR}/MOS/RGB_${YEAR}.vrt \
				    	 ${OUT_DIR}/${YEAR}/MOS/01_Gamma0_HH_${YEAR}.tif \
						   ${OUT_DIR}/${YEAR}/MOS/02_Gamma0_HV_${YEAR}.tif \
						   ${OUT_DIR}/${YEAR}/MOS/03_HHHV_ratio_${YEAR}.tif \
				       >> ${LOG_DIR}/log_process 2>&1
	duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress

else # JERS

	for TILE in `ls -1 *${YEAR_SHORT}"_sl_HH"* | grep -v hdr`; do
		echo "source ${OPENSARKIT}/lib/kc_libs; kc_process_jers ${TILE} ${AOI} $4 ${YEAR} ${TMP_DIR} ${LOG_DIR}" >> ${TMP_DIR}/proc_list
	done

	SECONDS=0
	echo -ne " Processing of 1 x 1 degree tiles using GNU parallel ..." | tee -a ${OUT_DIR}/.kc_pro_progress
	cat ${TMP_DIR}/proc_list | parallel -j "`nproc`" bash -c {} | tee -a ${OUT_DIR}/.kc_pro_progress

	SECONDS=0
	echo -ne " Merging the data tiles ..."  | tee -a ${OUT_DIR}/.kc_pro_progress
	gdalbuildvrt ${TMP_DIR}/TILES/mosaic_hh.vrt ${TMP_DIR}/TILES/1_*sl_HH*tif >> ${LOG_DIR}/log_process 2>&1
	duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress

	SECONDS=0
	echo -ne " Creating the final HH mosaic (R:HH, G:HV, B:HH/HV) ..." | tee -a ${OUT_DIR}/.kc_pro_progress
	gdalwarp -dstnodata 0 -overwrite -cutline ${AOI} -crop_to_cutline -co "BIGTIFF=YES" -co "COMPRESS=LZW"  ${TMP_DIR}/TILES/mosaic_hh.vrt ${OUT_DIR}/${YEAR}/MOS/01_Gamma0_HH_${YEAR}.tif >> ${LOG_DIR}/log_process 2>&1
	duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${OUT_DIR}/.kc_pro_progress

fi
#--------------------------------------------------------------

# remove Temp Folder
rm -rf ${TMP_DIR}

if [ -e ${OUT_DIR}/${YEAR}/MOS/01_Gamma0_HH_${YEAR}.tif ] && [ -e ${OUT_DIR}/${YEAR}/MOS/04_RFDI_${YEAR}.tif ];then

	echo " ---------------------------------------------------------------------------------------------" | tee -a ${OUT_DIR}/.kc_pro_progress
	echo " Succesfully processed the K&C tiles " | tee -a ${OUT_DIR}/.kc_pro_progress
	echo " You can find the RGB backscatter data in: ${OUT_DIR}/${YEAR}/MOS/RGB_${YEAR}.vrt" | tee -a ${OUT_DIR}/.kc_pro_progress
	#echo " You can find the K&C Forest/Non-forest data in: ${OUT_DIR}/${YEAR}/FNF/${YEAR}_KC_FNF_map.tif"
	echo " You can find the corresponding acquisiton dates: ${OUT_DIR}/${YEAR}/Auxiliary/${YEAR}_acquisition_date.tif" | tee -a ${OUT_DIR}/.kc_pro_progress
	echo " You can find the corresponding local incidence angles in: ${OUT_DIR}/${YEAR}/AUX/${YEAR}_loc_inc_angle.tif" | tee -a ${OUT_DIR}/.kc_pro_progress
	echo " ---------------------------------------------------------------------------------------------" | tee -a ${OUT_DIR}/.kc_pro_progress

else

		echo " Something went terribly wrong, and your final output files have not been created." | tee -a ${OUT_DIR}/.kc_pro_progress
		echo " Most likely you ran into storage issues (i.e. no space left on device)." | tee -a ${OUT_DIR}/.kc_pro_progress
		exit 111
fi
