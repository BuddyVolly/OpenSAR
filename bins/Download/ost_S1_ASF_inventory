#! /bin/bash

# The MIT License (MIT)
# written by Andreas Vollrath (2017)

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#----------------------------------------------------------------------
#	0 Set up Script variables
#----------------------------------------------------------------------
# source libs
source ${OPENSARKIT}/lib/helpers_source

#-------------------------------------------------------------------------------------------
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" == "8" ]; then

	AOI=$(readlink -f $2)

	PROC_DIR=$(readlink -f $1)
	TMP_DIR=${PROC_DIR}/.TMP
	rm -rf ${TMP_DIR} > /dev/null
	mkdir -p ${TMP_DIR}

	START=$3
	END=$4
	MODE=$5
	LEVEL_2=$6


	if [ $LEVEL_2 = "GRD" ];then
		if [ $7 == "1" ];then
			LEVEL="GRD_HS,GRD_HD"
			POL=VV%2bVH,VV
			POL_2=VV_VV-VH
		elif [ $7 == "2" ];then
			LEVEL="GRD_HD"
			POL=VV%2bVH
			POL_2=VV-VH
		elif [ $7 == "3" ];then
			LEVEL="GRD_HS"
			POL="VV"
			POL_2="VV"
		elif [ $7 == "4" ];then
			LEVEL="GRD_HS,GRD_HD"
			POL=HH%2bVH,HH
			POL_2=HH_HH-HV
		elif [ $7 == "5" ];then
			LEVEL="GRD_HD"
			POL=HH%2bHV
			POL_2=HH-HV
		elif [ $7 == "6" ];then
			LEVEL="GRD_HS"
			POL=HH
			POL_2=HH
		fi

	else
		LEVEL=${LEVEL_2}

		if [ $7 == "1" ];then
			POL=VV%2bVH,VV
			POL_2=VV_VV-VH
		elif [ $7 == "2" ];then
			POL=VV%2bVH
			POL_2=VV-VH
		elif [ $7 == "3" ];then
			POL="VV"
			POL_2="VV"
		elif [ $7 == "4" ];then
			POL=HH%2bVH,HH
			POL_2=HH_HH-HV
		elif [ $7 == "5" ];then
			POL=HH%2bHV
			POL_2=HH-HV
		elif [ $7 == "6" ];then
			POL=HH
			POL_2=HH
		fi
	fi

	PROCESSING="processingLevel=${LEVEL}"
	POLAR="polarization=${POL}"

	echo -e "------------------------------------------" | tee ${PROC_DIR}/.s1_inv_progress
	echo -e " Open SAR Toolkit, version ${OST_VERSION}" | tee -a ${PROC_DIR}/.s1_inv_progress
	echo -e " Search for Sentinel-1 data on ASF server" | tee -a ${PROC_DIR}/.s1_inv_progress
	echo -e "------------------------------------------" | tee -a ${PROC_DIR}/.s1_inv_progress

else

	echo -e "------------------------------------------"
	echo -e " Open SAR Toolkit, version ${OST_VERSION}"
	echo -e " Search for Sentinel-1 data on ASF server"
	echo -e "------------------------------------------"
	echo -e ""
	echo -e " syntax: oft-sar-S1-ASF-inventory <output_folder> <area_of_interest> <start_date> <end_date> <mode> <product level> <polarization mode> <script_Mode>"
	echo -e ""
	echo -e " description of input parameters:"
	echo -e " output_folder		(output) folder where the downloaded data will be saved"
 	echo -e " ISO3/AOI		ISO3 country code or shapefile of your area of interest"
	echo -e " start_date		start date of search in format YYYY-MM-DD"
	echo -e " end_date		end date of search in format YYYY-MM-DD"
	echo -e " mode			acquisition Mode of PALSAR instrument"
	echo -e "			 Available choices:"
	echo -e "			  IW (Interferometric Wide Swath - recommended)"
	echo -e "			  EW (Extra Wide Swath)"
	echo -e "			  WV (Polarimetric Mode)"
	echo -e " product_level		choose the product level"
	echo -e "			 Available choices:"
	echo -e "			  GRD (recommended)"
	echo -e "			  SLC (Level 1.1)"
	echo -e "			  RAW (Level 1.0)"
	echo -e " polarization mode		choose the product level"
	echo -e "			 Available choices:"
	echo -e "			  1: Dual + Single-pol imagery (VV,VV/VH)"
	echo -e "			  2: Dual-pol imagery (VV/VH)"
	echo -e "			  3: Single-pol imagery (VV)"
	echo -e "			  4: Dual + Single-pol imagery (HH,HH/HV)"
	echo -e "			  5: Dual-pol imagery (HH/HV)"
	echo -e "			  6: Single-pol imagery (HH)"
	echo -e " script_Mode		do an automatic image selection for homogeneous large-scale time-series/timescan mosaics"
	echo -e "			 Available choices"
	echo -e "			  0 (create an OST inventory file with all available scenes)"
	echo -e "			  1 (file for all available scenes + files with automatically selcted images)"
	echo -e ""
	exit 1
fi

SECONDS=0
echo -e " Generating search query ..."  | tee -a ${PROC_DIR}/.s1_inv_progress

# create Project aoi file directory
AOI_PATH=${PROC_DIR}/.AOI
rm -rf ${AOI_PATH}
mkdir -p ${AOI_PATH}

if [ `echo $2 | grep shp` ]; then # AOI case

	#AOI=`readlink -f $2`
	#echo $AOI
	AOI_DIR=`dirname ${AOI}`

	# check number of layers/polygons
	aoi_valid_poly ${AOI} ${TMP_DIR}/aoi_convex.shp ${TMP_DIR}

	#check EPSG
	if [ -e ${TMP_DIR}/aoi_convex.shp ];then
		aoi_valid_epsg ${TMP_DIR}/aoi_convex.shp ${TMP_DIR}/aoi_wgs84.shp ${TMP_DIR}
	else
		aoi_valid_epsg ${AOI} ${TMP_DIR}/aoi_wgs84.shp ${TMP_DIR}
	fi

	if [ -e ${TMP_DIR}/aoi_wgs84.shp ];then
		mv ${TMP_DIR}/aoi_wgs84* ${AOI_PATH}
		AOI=${AOI_PATH}/aoi_wgs84.shp
	elif [ -e ${TMP_DIR}/aoi_convex.shp ];then
		mv ${TMP_DIR}/aoi_convex* ${AOI_PATH}
		AOI=${AOI_PATH}/aoi_convex.shp
	else
		echo " AOI file used: $AOI"
		BASE=`basename ${AOI} | rev | cut -c 5- | rev`
		cp ${AOI_DIR}/${BASE}.shp ${AOI_PATH}/aoi.shp
		cp ${AOI_DIR}/${BASE}.shx ${AOI_PATH}/aoi.shx
		cp ${AOI_DIR}/${BASE}.dbf ${AOI_PATH}/aoi.dbf
		cp ${AOI_DIR}/${BASE}.prj ${AOI_PATH}/aoi.prj
		AOI=${AOI_PATH}/aoi.shp
	fi

else # country case

	aoi_from_iso3 $2 ${AOI_PATH}
	AOI=${PROC_DIR}/.AOI/aoi_$2_buffer.shp

fi


oft_convex_hull.py -i ${AOI} -o ${TMP_DIR}/aoi_convex.shp
AOI_PROJ_FILE=`echo ${AOI} | rev | cut -c 5- | rev`
cp ${AOI_PROJ_FILE}.prj ${TMP_DIR}/aoi_convex.prj

ogr2ogr -f CSV ${TMP_DIR}/AOI_WKT.csv ${TMP_DIR}/aoi_convex.shp -lco GEOMETRY=AS_WKT
AOI=`grep POLYGON ${TMP_DIR}/AOI_WKT.csv | sed 's|\"POLYGON ((||g' | awk -F "\)\)" $'{print $1}' 2>/dev/null | sed 's/\ /,/g'`
# Search Parameters
PERIOD="start="${START}"T11:59:59UTC&end="${END}"T00:00:00UTC"
PLATFORM="platform=Sentinel-1A,Sentinel-1B"
BEAM="beamMode=${MODE}"

#----------------------------------------------------------------------------------
# download the csv inventory file
# search part of the URL

OUTPUT_FORMAT="output=csv"
OUTPUT="${MODE}-data_inventory"
OUT_FILE=${TMP_DIR}/$OUTPUT.csv
ASK="\&polygon=${AOI}&${PLATFORM}&${BEAM}&${PERIOD}&${POLAR}&${PROCESSING}&${OUTPUT_FORMAT}"

echo -ne " Data inventory from ASF server ..." | tee -a ${PROC_DIR}/.s1_inv_progress
curl -s https://api.daac.asf.alaska.edu/services/search/param?keyword=value$ASK | tail -n +2  > ${OUT_FILE}
duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${PROC_DIR}/.s1_inv_progress

if [[ $(cat ${OUT_FILE} 2>&1 | head -c 3) != \"S1 ]];then
	echo -e " No products have been found for the given search parameters." | tee -a ${PROC_DIR}/.s1_inv_progress && exit 1
else
	echo "" >>  ${OUT_FILE} # we need this line for line break in order to get also the last scene
fi

NR_OF_PRODUCTS=`wc -l ${OUT_FILE} | awk '{print $1}'`
#echo "curl -s https://api.daac.asf.alaska.edu/services/search/param?keyword=value$ASK"
echo "-------------------------------------------------" | tee -a ${PROC_DIR}/.s1_inv_progress
echo " Info: There are ${NR_OF_PRODUCTS} Products available" | tee -a ${PROC_DIR}/.s1_inv_progress
echo "-------------------------------------------------" | tee -a ${PROC_DIR}/.s1_inv_progress
#----------------------------------------------------------------------------------

#----------------------------------------------------------------------------------
SECONDS=0
echo -ne " Creating an OST inventory shapefile ... " | tee -a ${PROC_DIR}/.s1_inv_progress
# sort the data
cat ${OUT_FILE} | awk -F ',' $'{print $1}' | sed 's/"//g' > ${TMP_DIR}/granule
cat ${OUT_FILE} | awk -F ',' $'{print $2}' | sed 's/"//g' > ${TMP_DIR}/satellite
cat ${OUT_FILE} | awk -F ',' $'{print $4}' | sed 's/"//g' > ${TMP_DIR}/mode
cat ${OUT_FILE} | awk -F ',' $'{print $7}' | sed 's/"//g' > ${TMP_DIR}/orbit
cat ${OUT_FILE} | awk -F ',' $'{print $8}' | sed 's/"//g' > ${TMP_DIR}/track
cat ${OUT_FILE} | awk -F ',' $'{print $9}'| sed 's/"//g' > ${TMP_DIR}/frame
cat ${OUT_FILE} | awk -F ',' $'{print $26}'| sed 's/"//g' > ${TMP_DIR}/orbit_dir
cat ${OUT_FILE} | awk -F ',' $'{print $27}'| sed 's/"//g' > ${TMP_DIR}/download


#acqdata
for LINE in $(cat ${OUT_FILE} | awk -F ',' $'{print $10}'| sed 's/"//g' | tr "\ " "\n" | awk NR%2==1);do
	YEAR=`echo ${LINE} | awk -F "-" '{print $1}'`
	MONTH=`echo ${LINE} | awk -F "-" '{print $2}'`
	DAY=`echo ${LINE} | awk -F "-" '{print $3}'`
	ACQ_DATE=${YEAR}${MONTH}${DAY}
	echo ${ACQ_DATE} >> ${TMP_DIR}/acq_date
done

#polarization mode
for LINE in $(cat $TMP_DIR/granule);do

	echo ${LINE:26:6} >> ${TMP_DIR}/start
	echo ${LINE:42:6} >> ${TMP_DIR}/stop

	POL_MODE=`echo ${LINE:13:3}`
	if [ ${POL_MODE} == "SDV" ];then
		echo "VV VH" >> ${TMP_DIR}/pol_mode
	elif [ ${POL_MODE} == "SSV" ];then
		echo "VV" >> ${TMP_DIR}/pol_mode
	elif [ ${POL_MODE} == "SDH" ];then
		echo "HH HV" >> ${TMP_DIR}/pol_mode
	elif [ ${POL_MODE} == "SSH" ];then
		echo "HH" >> ${TMP_DIR}/pol_mode
	fi

done

# wkt polygon
#for LINE in `cat $OUT_FILE | awk -F "," $'{print $16 "," $17 "," $18 "," $19 "," $20 "," $21 "," $22 "," $23}' | sed 's/"//g'`; do
for LINE in `cat $OUT_FILE | awk -F "," $'{print $17 "," $18 "," $19 "," $20 "," $21 "," $22 "," $23 "," $24}' | sed 's/"//g'`; do

	N_START=`echo $LINE | awk -F "," '{print $2; print $1}'`
	F_START=`echo $LINE | awk -F "," '{print $4; print $3}'`
	N_END=`echo $LINE | awk -F "," '{print $6; print $5}'`
	F_END=`echo $LINE | awk -F "," '{print $8; print $7}'`

	N_START_LAT=`echo $N_START | awk $'{print $2}'`
	N_END_LAT=`echo $N_END | awk $'{print $2}'`


	if [[ $(echo " ${N_START_LAT} < ${N_END_LAT}" | bc) -eq "1" ]];then

		echo "\"POLYGON (("${N_START},${F_START},${F_END},${N_END},${N_START}"))\"" >> ${TMP_DIR}/polys

	else

		#echo "\"POLYGON (("${N_START},${N_END},${F_END},${F_START},${N_START}"))\"" >> ${TMP_DIR}/polys
		echo "\"POLYGON (("${N_START},${F_START},${F_END},${N_END},${N_START}"))\"" >> ${TMP_DIR}/polys
	fi
done
#----------------------------------------------------------------------------------


# write header
echo "Scene_ID,Product_ID,Date,Track,Pol_Mode,Orbit_Dir,Orbit_Nr,Swath,Start_Time,Stop_Time,WKTGeom" > ${TMP_DIR}/wkt.csv
echo '"String(68)","String(37)","Integer(8)","Integer(3)","String(5)","String(11)","Integer(6)","String(5)","Integer(6)","Integer(6)",String' > ${TMP_DIR}/wkt.csvt


# write data
paste -d "," ${TMP_DIR}/granule ${TMP_DIR}/download ${TMP_DIR}/acq_date ${TMP_DIR}/track ${TMP_DIR}/pol_mode ${TMP_DIR}/orbit_dir ${TMP_DIR}/orbit ${TMP_DIR}/mode ${TMP_DIR}/start ${TMP_DIR}/stop ${TMP_DIR}/polys >> ${TMP_DIR}/wkt.csv

mkdir -p ${PROC_DIR}/
mkdir -p ${PROC_DIR}/Inventory
INV=${PROC_DIR}/Inventory

# write a shapefile of coverage
echo "<OGRVRTDataSource>" > ${TMP_DIR}/wkt.vrt
echo "	<OGRVRTLayer name=\"wkt\">" >> ${TMP_DIR}/wkt.vrt
echo "   	<SrcDataSource>${TMP_DIR}/wkt.csv</SrcDataSource>" >> ${TMP_DIR}/wkt.vrt
echo "   	<GeometryType>wkbPolygon</GeometryType>" >> ${TMP_DIR}/wkt.vrt
echo "		<LayerSRS>WGS84</LayerSRS>"  >> ${TMP_DIR}/wkt.vrt
echo "		<GeometryField encoding=\"WKT\" field=\"WKTGeom\"> </GeometryField >" >> ${TMP_DIR}/wkt.vrt
echo "	</OGRVRTLayer>" >> ${TMP_DIR}/wkt.vrt
echo "</OGRVRTDataSource>" >> ${TMP_DIR}/wkt.vrt

# convert to final shapefile
rm -rf "${INV}/S1_ASF_${MODE}_${LEVEL_2}_${POL_2}.shp"
ogr2ogr -wrapdateline -datelineoffset 0.05 -f "Esri Shapefile" "${INV}/S1_ASF_${MODE}_${LEVEL_2}_${POL_2}.shp" "${TMP_DIR}/wkt.vrt" > /dev/null 2>&1
duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)" | tee -a ${PROC_DIR}/.s1_inv_progress

#rm -rf ${TMP_DIR}

# download if needed
if [[ $8 == 1 ]];then
	ost_S1_ASF_sort4ts ${INV}/S1_ASF_${MODE}_${LEVEL_2}_${POL_2}.shp ${AOI_PATH}/aoi*.shp ${INV} | tee -a ${PROC_DIR}/.s1_inv_progress
fi
