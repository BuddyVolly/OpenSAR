#! /bin/bash

# The MIT License (MIT)
# Copyright (c) 2016 Andreas Vollrath

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#-------------------------------------------------------------------------------------------
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "3" ]; then

	echo -e "------------------------------------------------------------------"
	echo -e " Open SAR Toolkit, version ${OST_VERSION}"
	echo -e " Refine the image selection from an OST inventory shapefile"
	echo -e "------------------------------------------------------------------"
	echo -e ""
	echo -e " Usage: ost_S1_ASF_sort4ts <input file> <AOI/ISO3> <output folder> "
	echo -e ""
	echo -e " input parameters:"
	echo -e " input file 	 OST inventory shapefile created by ost_S1_ASF_inventory"
	echo -e " AOI/ISO3 	 Area of interest or ISO3 country code"
	echo -e " output folder		 Folder where inventory files will be stored"
	echo -e ""
	exit 1

else

	echo -e "------------------------------------------------------------------"
	echo -e " Open SAR Toolkit, version ${OST_VERSION}"
	echo -e " Refine the image selection from an OST inventory shapefile"
	echo -e "------------------------------------------------------------------"

	# set up initial script variables
	OST_INV_IN=$(readlink -f $1)
	BASE=$(basename ${OST_INV_IN} | rev | cut -c 5- |rev)

	AOI=$(readlink -f $2)
	AOI_BASE=$(basename ${AOI} | rev | cut -c 5- |rev)
	OST_INV_OUT=$(readlink -f $2)

	PROC_DIR=`dirname $OST_INV_IN`
  TMP_DIR=${SAR_TMP:-$PROC_DIR/TMP}
	mkdir -p ${TMP_DIR}

	OUT_DIR=$(readlink -f $3)
	# source libs
	source ${OPENSARKIT}/lib/helpers_source

fi

#-----------------------------------------------------
# 1) split ascending and descending, VV and VV and VH
#-----------------------------------------------------

SECONDS=0
echo -ne " Split inventory data in Ascending and Descending track and sort for polarization mode..."

# ascending
ogr2ogr -f "ESRI Shapefile" ${TMP_DIR}/asc.ssv.shp ${OST_INV_IN} -dialect sqlite -sql "SELECT * FROM \"${BASE}\" WHERE \"Orbit_Dir\" = 'ASCENDING' " # AND \"Pol_Mode\" = 'VV'"
ogr2ogr -f "ESRI Shapefile" ${TMP_DIR}/asc.sdv.shp ${OST_INV_IN} -dialect sqlite -sql "SELECT * FROM \"${BASE}\" WHERE \"Orbit_Dir\" = 'ASCENDING' AND \"Pol_Mode\" = 'VV VH'"

# descending
ogr2ogr -f "ESRI Shapefile" ${TMP_DIR}/dsc.ssv.shp ${OST_INV_IN} -dialect sqlite -sql "SELECT * FROM \"${BASE}\" WHERE \"Orbit_Dir\" = 'DESCENDING' " # AND \"Pol_Mode\" = 'VV'"
ogr2ogr -f "ESRI Shapefile" ${TMP_DIR}/dsc.sdv.shp ${OST_INV_IN} -dialect sqlite -sql "SELECT * FROM \"${BASE}\" WHERE \"Orbit_Dir\" = 'DESCENDING' AND \"Pol_Mode\" = 'VV VH'"

duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

#-----------------------------------------------------
# 2) Scenes that actually intersect with AOI (not GEE)
#-----------------------------------------------------

SECONDS=0
echo -ne " Sorting out scenes that do not overlap the AOI..."
# ascending
st_intersects_shp ${TMP_DIR}/asc.ssv.shp ${AOI} ${TMP_DIR}/2.asc.ssv.shp
st_intersects_shp ${TMP_DIR}/asc.sdv.shp ${AOI} ${TMP_DIR}/2.asc.sdv.shp

# descending
st_intersects_shp ${TMP_DIR}/dsc.ssv.shp ${AOI} ${TMP_DIR}/2.dsc.ssv.shp
st_intersects_shp ${TMP_DIR}/dsc.sdv.shp ${AOI} ${TMP_DIR}/2.dsc.sdv.shp

# remove temp files
rm ${TMP_DIR}/asc.ssv.* ${TMP_DIR}/asc.sdv.* ${TMP_DIR}/dsc.ssv.* ${TMP_DIR}/dsc.sdv.*

duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

#-----------------------------------------------------
# 3a) removing double entries
#-----------------------------------------------------

SECONDS=0
echo -ne " Removing double entries..."

# ascending
ogr2ogr -f "ESRI Shapefile" ${TMP_DIR}/3.asc.ssv.shp ${TMP_DIR}/2.asc.ssv.shp -dialect sqlite \
				-sql "SELECT *
							FROM \"2.asc.ssv\"
							GROUP BY substr(Scene_Id, 1, 63)"
ogr2ogr -f "ESRI Shapefile" ${TMP_DIR}/3.asc.sdv.shp ${TMP_DIR}/2.asc.sdv.shp -dialect sqlite \
				-sql "SELECT *
							FROM \"2.asc.sdv\"
							GROUP BY substr(Scene_Id, 1, 63)"

# descending
ogr2ogr -f "ESRI Shapefile" ${TMP_DIR}/3.dsc.ssv.shp ${TMP_DIR}/2.dsc.ssv.shp -dialect sqlite \
 			  -sql "SELECT *
							FROM \"2.dsc.ssv\"
							GROUP BY substr(Scene_Id, 1, 63)"
ogr2ogr -f "ESRI Shapefile" ${TMP_DIR}/3.dsc.sdv.shp ${TMP_DIR}/2.dsc.sdv.shp -dialect sqlite \
				-sql "SELECT *
							FROM \"2.dsc.sdv\"
							GROUP BY substr(Scene_Id, 1, 63)"

							#GROUP BY \"Start_Time\" + \"Stop_Time\" + \"Date\" + \"Orbit_Nr\""

duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

#-----------------------------------------------------
# ascending
ogrinfo -q ${TMP_DIR}/3.asc.ssv.shp -dialect sqlite -sql "CREATE SPATIAL INDEX ON \"3.asc.ssv\""
ogrinfo -q ${TMP_DIR}/3.asc.sdv.shp -dialect sqlite -sql "CREATE SPATIAL INDEX ON \"3.asc.sdv\""

# descending
ogrinfo -q ${TMP_DIR}/3.dsc.ssv.shp -dialect sqlite -sql "CREATE SPATIAL INDEX ON \"3.dsc.ssv\""
ogrinfo -q ${TMP_DIR}/3.dsc.sdv.shp -dialect sqlite -sql "CREATE SPATIAL INDEX ON \"3.dsc.sdv\""

#-----------------------------------------------------
# 4) take care of equator (change in track number)) (maybe not GEE)
#-----------------------------------------------------

# do the correction of relative orbit numbers for ease of use with OST if equator zone (0.5 - 4 degree north) is crossed

# create temporary wkt Equator file
echo "WKT,id" > ${TMP_DIR}/equ.csv
echo "\"POLYGON ((-180.0 0.5, 180.0 0.5, 180 4, -180 4, -180.0 0.5))\",1" >> ${TMP_DIR}/equ.csv

# create vrt for ogr reading
echo "<OGRVRTDataSource>" > ${TMP_DIR}/.intersect.vrt
echo "<OGRVRTLayer name=\"equ\">" >> ${TMP_DIR}/.intersect.vrt
echo "<SrcDataSource>${TMP_DIR}/equ.csv</SrcDataSource>" >> ${TMP_DIR}/.intersect.vrt
echo "<GeometryType>wkbPolygon</GeometryType>" >> ${TMP_DIR}/.intersect.vrt
echo "<LayerSRS>WGS84</LayerSRS>" >> ${TMP_DIR}/.intersect.vrt
echo "<GeometryField encoding=\"WKT\" field=\"WKT\"> </GeometryField>" >> ${TMP_DIR}/.intersect.vrt
echo "</OGRVRTLayer>" >> ${TMP_DIR}/.intersect.vrt
echo "</OGRVRTDataSource>" >> ${TMP_DIR}/.intersect.vrt

# convert to shapefile
ogr2ogr -f "ESRI Shapefile" ${TMP_DIR}/equ_intersect.shp ${TMP_DIR}/.intersect.vrt

# check for intersection area
EQU_OVERLAP=`st_intersection_area ${AOI} ${TMP_DIR}/equ_intersect.shp`

if [ ${EQU_OVERLAP} != '(null)' ];then

	SECONDS=0
	echo -ne " Checking for consistent orbit numeration crossing the Equator ..."

	# only valid for ascendent tracks
	s1_adjust_equator_tracks ${TMP_DIR}/3.asc.ssv.shp ${TMP_DIR}
	s1_adjust_equator_tracks ${TMP_DIR}/3.asc.sdv.shp ${TMP_DIR}
	duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

fi

#-----------------------------------------------------
# 5) take care of dateline (not GEE)
#-----------------------------------------------------

# TBD
# SECONDS=0
# echo -ne " Correct for dateline crossing ..."
# h2 solution


#-----------------------------------------------------
# 6) check if acquisitions for full track overlap
#-----------------------------------------------------

SECONDS=0
echo -ne " Checking if acquisitions cross the entire AOI..."

# ascending
s1_check_overlap_aoi ${AOI} ${TMP_DIR}/3.asc.ssv.shp ${TMP_DIR}
s1_check_overlap_aoi ${AOI} ${TMP_DIR}/3.asc.sdv.shp ${TMP_DIR}

# descending
s1_check_overlap_aoi ${AOI} ${TMP_DIR}/3.dsc.ssv.shp ${TMP_DIR}
s1_check_overlap_aoi ${AOI} ${TMP_DIR}/3.dsc.sdv.shp ${TMP_DIR}

duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"


#-----------------------------------------------------
# 7) check if there are 2 equal track number at same date for different parts of the AOI ()
#-----------------------------------------------------

SECONDS=0
echo -ne " Rename track numbers for tracks appearing twice (start and end of orbit) ..."
s1_rename_splitted_tracks ${TMP_DIR}/3.asc.ssv.shp ${TMP_DIR}
s1_rename_splitted_tracks ${TMP_DIR}/3.asc.sdv.shp ${TMP_DIR}

s1_rename_splitted_tracks ${TMP_DIR}/3.dsc.ssv.shp ${TMP_DIR}
s1_rename_splitted_tracks ${TMP_DIR}/3.dsc.sdv.shp ${TMP_DIR}
duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"


#-----------------------------------------------------
# 8) sort homogeneous timescan/timeseries
#-----------------------------------------------------

SECONDS=0
echo -ne " Sort for homogeneuos time-series over the AOI ..."

# ascending
s1_check_homogeneous_coverage ${TMP_DIR}/3.asc.ssv.shp ${TMP_DIR} ${OUT_DIR}/asc.single-pol.shp
s1_check_homogeneous_coverage ${TMP_DIR}/3.asc.sdv.shp ${TMP_DIR} ${OUT_DIR}/asc.dual-pol.shp

# descending
s1_check_homogeneous_coverage ${TMP_DIR}/3.dsc.ssv.shp ${TMP_DIR} ${OUT_DIR}/dsc.single-pol.shp
s1_check_homogeneous_coverage ${TMP_DIR}/3.dsc.sdv.shp ${TMP_DIR} ${OUT_DIR}/dsc.dual-pol.shp

duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

NR_ASC_SINGLE=`basename $(ls ${OUT_DIR}/*.asc.single-pol.shp | awk -F '\.' '{print $1}')`
NR_ASC_DUAL=`basename $(ls ${OUT_DIR}/*.asc.dual-pol.shp | awk -F '\.' '{print $1}')`

NR_DSC_SINGLE=`basename $(ls ${OUT_DIR}/*.dsc.single-pol.shp | awk -F '\.' '{print $1}')`
NR_DSC_DUAL=`basename $(ls ${OUT_DIR}/*.dsc.dual-pol.shp | awk -F '\.' '{print $1}')`

echo "---------------------------------------------------------------------------------------------------------"
echo " Finished the refined selection of available imagery."
if [[ ${NR_ASC_DUAL} -eq ${NR_ASC_SINGLE} ]];then
	echo " INFO: Found ${NR_ASC_DUAL} dual-polarized homogeneous mosaics over the given AOI in ascending direction."
	echo " INFO: All acquisitions in ascending direction are dual-polarized."
	rm -f ${OUT_DIR}/*asc.single-pol*
else
	echo " INFO: Found ${NR_ASC_DUAL} dual-polarized homogeneous mosaics over the given AOI in ascending direction."
	echo " INFO: Found ${NR_ASC_SINGLE} single-polarized homogeneous mosaics over the given AOI in ascending direction."
fi

if [[ ${NR_DSC_DUAL} -eq ${NR_DSC_SINGLE} ]];then
	echo " INFO: Found ${NR_DSC_DUAL} dual-polarized homogeneous mosaics over the given AOI in descending direction."
	echo " INFO: All acquisitions in descending direction are dual-polarized."
	rm -f ${OUT_DIR}/*dsc.single-pol*
else
	echo " INFO: Found ${NR_DSC_DUAL} dual-polarized homogeneous mosaics over the given AOI in descending direction."
	echo " INFO: Found ${NR_DSC_SINGLE} single-polarized homogeneous mosaics over the given AOI in descending direction."
fi
echo "---------------------------------------------------------------------------------------------------------"
rm -rf ${TMP_DIR}
