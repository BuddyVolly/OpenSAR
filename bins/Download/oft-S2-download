#! /bin/bash 

# The MIT License (MIT)
# Copyright (c) 2016 Andreas Vollrath

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal 
# in the Software without restriction, including without limitation the rights 
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "2" ]; then

	echo -e "-----------------------------------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Download Sentinel-2 data with an OFST inventory shapefile"
	echo -e "-----------------------------------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- aria2"
	echo -e "	- ogrinfo"
	echo -e "	- xml-twig-tools"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " syntax: osk_S2_download <output_folder> <Inventory Shapefile>"
	echo -e ""
	echo -e " input parameters:"
	echo -e " output_folder			(output) folder where the downloaded data will be saved"
	echo -e " Inventory shapefile		(input) shapefile created and maybe edited from osk_S1_inventory script"
	exit 1
else

	echo -e "-----------------------------------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Download Sentinel-2 data with an OFST inventory shapefile"
	echo -e "-----------------------------------------------------------"


  	cd $1
   	PROC_DIR=`pwd`
	TMP_DIR=${PROC_DIR}/.TMP
	mkdir -p ${TMP_DIR}
	source ${OPENSARKIT}/lib/helpers_source
fi



#	Credentials
read -r -p " Please type your ESA Scihub Username:" USERNAME
read -s -p " Please type your ESA Scihub Password:" PW
echo ""

echo -ne " Preparing download ..."
SECONDS=0
ogrinfo $2 -al | grep Product_ID | sed 's/  Product_ID (String) = //g' | tail -n +2 > tmp_download_list \
& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

# counter for info on number of download products
NR=`cat tmp_download_list | wc -l`
COUNT=1

while read line; do 

	# get the data via the UUID
	UUID=$line		
#	DL_ADDRESS='https://scihub.esa.int/dhus/odata/v1/Products('"'${UUID}'"')/$value'
	DL_ADRESS='https://scihub.esa.int/s2/odata/v1/Products('"'${UUID}'"')/$value'

	echo ""	
	echo "----------------------------------------------------------"
	echo " Downloading Product ${COUNT} of ${NR} (UUID=${UUID})"
	echo "----------------------------------------------------------"
	echo " Getting MD5 checksum for download validation"


	# prepare a loop to avoid uncomplete data downloads and check for md5 checksum
	i=1
	echo "bla" > ${TMP_DIR}/tmp_error2
	# do the loop 

	for(( i=1; i<=2; i++ ));do
		
		i=1	
		# get MD5sum of product
		MD5_ADDRESS='https://scihub.esa.int/s2/odata/v1/Products('"'${UUID}'"')/Checksum/'	 
		aria2c --dir="${TMP_DIR}" --out="md5.txt" --check-certificate=false --continue=true --http-user="${USERNAME}" --http-passwd="${PW}" "${MD5_ADDRESS}" > ${TMP_DIR}/tmp_error2


		if grep -q "download completed" ${TMP_DIR}/tmp_error2;then

			i=3
			MD5_UP=`cat ${TMP_DIR}/md5.txt | xml_grep Value --text_only`
			rm -f ${TMP_DIR}/md5.txt
			
		elif grep -q "Authorization failed" ${TMP_DIR}/tmp_error2;then

			echo " Authorization failed"
			exit 1
		else
				
			echo " Connection problems, will try to continue download in 5 minutes"
			sleep 5m

		fi
	done

	# prepare a loop to avoid uncomplete data downloads		
	i=1
	echo "bla" > ${TMP_DIR}/tmp_error
	# do the loop 
	for(( i=1; i<=2; i++ ));do

		i=1
		SECONDS=0
		echo -ne " Downloading product ..."
		aria2c --dir=${TMP_DIR} --check-certificate=false --continue=true --http-user="${USERNAME}" --http-passwd="${PW}" "${DL_ADRESS}" > ${TMP_DIR}/tmp_error\
		& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

		if grep -q "download completed" ${TMP_DIR}/tmp_error;then

			i=3
			SCENE=`ls ${TMP_DIR}/*zip`
			MD5_DOWN=`md5sum ${SCENE} | awk '{print $1}' | tr '[:lower:]' '[:upper:]'`

			# check on md5
			if [[ ${MD5_UP} == ${MD5_DOWN} ]];then
	
				echo " MD5sum check: passed"
			else
				echo " MD5sum check: not passed, will have to redownload the scene"
				rm -f ${SCENE}
				i=1
			fi
		
		elif grep -q "No space left on device" ${TMP_DIR}/tmp_error;then

			echo " No space left on device"
			exit 1
		elif grep -q "Authorization failed" ${TMP_DIR}/tmp_error;then

			echo " Authorization failed"
			exit 1
		else
				
			echo " Connection problems, will try to continue download in 5 minutes"
			sleep 5m				
		fi		

	done

	rm -f ${TMP_DIR}/tmp_error
	SCENE_FULL=`ls ${TMP_DIR}/*zip`
	SCENE=`basename ${SCENE_FULL}`
	SCENE_ID=`echo ${SCENE} | rev | cut -c 5- | rev`
	DATE=${SCENE_ID:25:8}

	echo " Moving $SCENE to ${PROC_DIR}/DATA/${DATE}/"
	mkdir -p ${PROC_DIR}/DATA/
	mkdir -p ${PROC_DIR}/DATA/${DATE}/
	mv ${SCENE_FULL} ${PROC_DIR}/DATA/${DATE}/

	COUNT=`expr ${COUNT} + 1`

done  < tmp_download_list

rm -rf ${TMP_DIR}
rm -f tmp_download_list
