#! /bin/bash

#----------------------------------------------------------------------
#	0 Set up Script variables
#----------------------------------------------------------------------

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" == "6" ]; then

	echo -e ""
	echo -e "----------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Search ALOS data on ASF server"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software packages used"
	echo -e "	- aria2"
	echo -e "	- curl"
	echo -e "	- ogr2ogr"
	echo -e "----------------------------------"
   cd $1
   PROC_DIR=`pwd`
   TMP_DIR=${PROC_DIR}/TMP
   mkdir -p ${TMP_DIR}
	AOI=$2
	START=$3
	END=$4
	MODE=$5
	PROCESSING="processingLevel=$6"

elif [ "$#" == "8" ]; then

	echo -e ""
	echo -e "----------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Search ALOS data on ASF server"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software packages used"
	echo -e "	- aria2"
	echo -e "	- curl"
	echo -e "	- ogr2ogr"
	echo -e "----------------------------------"
	echo -e ""
	cd $1
   PROC_DIR=`pwd`
   TMP_DIR=${PROC_DIR}/TMP
   mkdir -p ${TMP_DIR}
	AOI=$2
	START=$3
	END=$4
	MODE=$5
	PROCESSING="processingLevel=$6"
	SCRIPT_MODE=NI
	UNAME=$7
	PW=$8

else

	echo -e ""
	echo -e "----------------------------------"
	echo -e " OpenSARKit, version ${OSK_VERSION}"
	echo -e " Search ALOS data on ASF server"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- aria2"
	echo -e "	- curl"
	echo -e "	- ogr2ogr"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " syntax: osk_ALOS_ASF_inventory <output_folder> <area_of_interest> <start_date> <end_date> <mode> <processing_level>"
	echo -e ""
	echo -e " description of input parameters:"
	echo -e " output_folder		(output) folder where the downloaded data will be saved"
	echo -e " area_of_interest	(input) shapefile of your area of interest"
	echo -e ""
	echo -e " NOTE: Use the convex_hull_aoi.shp prepared by osk_prepare_project script." 
	echo -e "      Otherwise the URL will be too long and the download won't start."
	echo -e ""
	echo -e " start_date		start date of search in format YYYY-MM-DD"
	echo -e " end_date		end date of search in format YYYY-MM-DD"
	echo -e " mode			acquisition Mode of PALSAR instrument"
	echo -e "			  available choices:"
	echo -e "			  FBS (Fine-Beam Single Polarization)"
	echo -e "			  FBD (Fine-Beam Double Polarization)"
	echo -e "			  PLR (Polarimetric Mode)"
	echo -e "			  WB1 (Wide-swath)"
	echo -e " processing_level	choose the product level"			
	echo -e "			  Available choices:"
	echo -e "			  L1.0 (RAW - Level 1.0)"
	echo -e "			  L1.1 (SLC - Level 1.1)"
	echo -e "			  L1.5 (GRD - Level 1.5)"
	echo -e "			  RTC_HI_RES (12.5m High-resolution Terrain Corrected)"
	echo -e "			  RTC_LOW_RES (30m Low-resolution Terrain Corrected)"
	echo -e ""
	exit 1
fi


#get the cookie
if [ "${SCRIPT_MODE}" = "NI" ];then
	echo ""
else
	echo -e "If you have not done the registration, go to:"
	echo -e "https://urs.earthdata.nasa.gov/"
	read -r -p "Please type your NASA Earthdata Username:" UNAME
	read -s -p "Please type your NASA Earthdata Password:" PW
fi
echo ""
echo "Getting the inventory data"
wget --save-cookies ${TMP_DIR}/cookies.txt --post-data 'user_name='$UNAME'&user_password='${PW}'' --no-check-certificate https://ursa.asfdaac.alaska.edu/cgi-bin/login -o /dev/null -O /dev/null
unset PW

# get the footprint from the shapefile 
ogr2ogr -f CSV ${TMP_DIR}/AOI_WKT.csv $2 -lco GEOMETRY=AS_WKT
AOI=`grep POLYGON ${TMP_DIR}/AOI_WKT.csv | sed 's|\"POLYGON ((||g' | awk -F "))" $'{print $1}' | sed 's/\ /,/g'`

# Search Parameters
PERIOD="start="${START}"T11:59:59UTC&end="${END}"T00:00:00UTC"
PLATFORM="platform=A3"
BEAM="beamMode=${MODE}"  

#----------------------------------------------------------------------------------
# download the csv inventory file
# search part of the URL
OUTPUT_FORMAT="output=csv"
OUTPUT="${MODE}-data_inventory"
OUT_FILE=${TMP_DIR}/$OUTPUT.csv
ASK="\&polygon=${AOI}&${PLATFORM}&${BEAM}&${PERIOD}&${PROCESSING}&${OUTPUT_FORMAT}"
curl -s https://api.daac.asf.alaska.edu/services/search/param?keyword=value$ASK | tail -n +2  > ${OUT_FILE} 
echo "" >>  ${OUT_FILE}
NR_OF_PRODUCTS=`wc -l ${OUT_FILE}`
echo "Found ${NR_OF_PRODUCTS} products"
#----------------------------------------------------------------------------------

#----------------------------------------------------------------------------------
# sort the data
cat ${OUT_FILE} | awk -F ',' $'{print $1}' | sed 's/"//g' > ${TMP_DIR}/granule
cat ${OUT_FILE} | awk -F ',' $'{print $4}' | sed 's/"//g' > ${TMP_DIR}/mode
cat ${OUT_FILE} | awk -F ',' $'{print $6}' | sed 's/"//g' > ${TMP_DIR}/orbit
cat ${OUT_FILE} | awk -F ',' $'{print $7}' | sed 's/"//g' > ${TMP_DIR}/track
cat ${OUT_FILE} | awk -F ',' $'{print $8}'| sed 's/"//g' > ${TMP_DIR}/frame
cat ${OUT_FILE} | awk -F ',' $'{print $25}'| sed 's/"//g' > ${TMP_DIR}/orbit_dir
cat ${OUT_FILE} | awk -F ',' $'{print $26}'| sed 's/"//g' > ${TMP_DIR}/download
cat ${OUT_FILE} | awk -F ',' $'{print $28}'| sed 's/"//g' > ${TMP_DIR}/inc_angle
cat ${OUT_FILE} | awk -F ',' $'{print $11}' | sed 's/"//g' > ${TMP_DIR}/product_type

#acqdata
for LINE in $(cat ${OUT_FILE} | awk -F ',' $'{print $9}'| sed 's/"//g' | tr "\ " "\n" | awk NR%2==1);do
	YEAR=`echo ${LINE} | awk -F "-" '{print $1}'`
	MONTH=`echo ${LINE} | awk -F "-" '{print $2}'`
	DAY=`echo ${LINE} | awk -F "-" '{print $3}'`
	ACQ_DATE=${YEAR}${MONTH}${DAY}
	echo ${ACQ_DATE} >> ${TMP_DIR}/acq_date
done

# wkt polygon
for LINE in `cat $OUT_FILE | awk -F "," $'{print $16 "," $17 "," $18 "," $19 "," $20 "," $21 "," $22 "," $23}' | sed 's/"//g'`; do 

	N_START=`echo $LINE | awk -F "," '{print $2; print $1}'`
	F_START=`echo $LINE | awk -F "," '{print $4; print $3}'`
	N_END=`echo $LINE | awk -F "," '{print $6; print $5}'`
	F_END=`echo $LINE | awk -F "," '{print $8; print $7}'`

	N_START_LAT=`echo $N_START | awk $'{print $2}'`
	N_END_LAT=`echo $N_END | awk $'{print $2}'`


	if [ $(echo " ${N_START_LAT} < ${N_END_LAT}" | bc) -eq 1  ];then

		echo "\"POLYGON (("${N_START},${F_START},${F_END},${N_END},${N_START}"))\"" >> ${TMP_DIR}/polys

	else

		echo "\"POLYGON (("${N_START},${N_END},${F_END},${F_START},${N_START}"))\"" >> ${TMP_DIR}/polys
	fi
done
#----------------------------------------------------------------------------------


# write header
echo "Scene_ID,DL_Path,Date,Mode,Track,Frame,Orbit,Orbit_Dir,Product,WKTGeom" > ${TMP_DIR}/wkt.csv
echo '"String(15)","String(90)","Integer(8)","String(5)","Integer(3)","Integer(3)","String(5)","String(11)","String(11)","String"' > ${TMP_DIR}/wkt.csvt

# write data
paste -d "," ${TMP_DIR}/granule ${TMP_DIR}/download ${TMP_DIR}/acq_date ${TMP_DIR}/mode ${TMP_DIR}/track ${TMP_DIR}/frame ${TMP_DIR}/orbit ${TMP_DIR}/orbit_dir ${TMP_DIR}/product_type ${TMP_DIR}/polys >> ${TMP_DIR}/wkt.csv

mkdir -p ${PROC_DIR}/
mkdir -p ${PROC_DIR}/Inventory
INV=${PROC_DIR}/Inventory

# write a shapefile of coverage
echo "<OGRVRTDataSource>" > ${TMP_DIR}/wkt.vrt
echo "	<OGRVRTLayer name=\"wkt\">" >> ${TMP_DIR}/wkt.vrt
echo "   	<SrcDataSource>${TMP_DIR}/wkt.csv</SrcDataSource>" >> ${TMP_DIR}/wkt.vrt
echo "   	<GeometryType>wkbPolygon</GeometryType>" >> ${TMP_DIR}/wkt.vrt
echo "		<LayerSRS>WGS84</LayerSRS>"  >> ${TMP_DIR}/wkt.vrt
echo "		<GeometryField encoding=\"WKT\" field=\"WKTGeom\"> </GeometryField >" >> ${TMP_DIR}/wkt.vrt
echo "	</OGRVRTLayer>" >> ${TMP_DIR}/wkt.vrt
echo "</OGRVRTDataSource>" >> ${TMP_DIR}/wkt.vrt

# convert to final shapefile
ogr2ogr -f "Esri Shapefile" "${INV}/ALOS_ASF_${MODE}.shp" "${TMP_DIR}/wkt.vrt"


# download if needed
if [[ $7 == 1 ]];then
	osk_ALOS_ASF_download ${PROC_DIR} ${INV}/ALOS_ASF_${MODE}.shp
fi
















