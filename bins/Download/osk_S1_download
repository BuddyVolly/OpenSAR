#! /bin/bash 

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "2" ]; then

	echo -e ""
	echo -e "---------------------------------------------------------------------------"
	echo -e " Welcome to Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Download Sentinel-1 data with with the use of an OSK inventory shapefile"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "---------------------------------------------------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- aria2"
	echo -e "	- ogrinfo"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " syntax: osk_S1_download <output folder> <inventory shapefile>"
	echo -e ""
	echo -e " input parameters:"
	echo -e " output_folder			(output) folder where the downloaded data will be saved"
	echo -e " Inventory shapefile		(input) shapefile created and maybe edited from osk_S1_inventory script"
	exit 1
else
	echo -e ""
	echo -e "---------------------------------------------------------------------------"
	echo -e " Welcome to Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Download Sentinel-1 data with with the use of an OSK inventory shapefile"
	echo -e "---------------------------------------------------------------------------"
	echo -e ""

	AOI=`readlink -f $2`

  	cd $1
   	PROC_DIR=`pwd`
	TMP_DIR=${PROC_DIR}/TMP
	mkdir -p ${TMP_DIR}
fi

source ${OPENSARKIT}/lib/bash_helpers


#	Credentials
read -r -p " Please type your ESA Scihub Username:" USERNAME
read -s -p " Please type your ESA Scihub Password:" PW
echo ""
echo ""
echo -ne " Preparing download ..."
SECONDS=0
ogrinfo $AOI -al | grep Product_ID | sed 's/  Product_ID (String) = //g' | tail -n +2 > ${TMP_DIR}/tmp_download_list &&
ogrinfo $AOI -al | grep Track | sed 's/  Track (Integer) = //g' | tail -n +2 > ${TMP_DIR}/tmp_track_list &&
ogrinfo $AOI -al | grep Orbit_Dir | sed 's/  Orbit_Dir (String) = //g' | tail -n +2 | cut -c -1 > ${TMP_DIR}/tmp_orb_dir_list \
& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
echo ""


# counter for info on number of download products
NR=`cat ${TMP_DIR}/tmp_download_list | wc -l`
COUNT=1
paste -d ';' ${TMP_DIR}/tmp_download_list ${TMP_DIR}/tmp_track_list ${TMP_DIR}/tmp_orb_dir_list >> ${TMP_DIR}/tmp_list

while read line; do 

	
	# get the data via the UUID
	UUID=`echo $line | awk -F ";" '{print $1}'`		
	TRACK=`echo $line | awk -F ";" '{print $2}'`
	if [ `echo $TRACK | wc -c` -eq 2 ];then
		TRACK=`echo "00${TRACK}"`
	elif [ `echo $TRACK | wc -c` -eq 3 ];then
		TRACK=`echo "0${TRACK}"`
	fi

	ORB_DIR=`echo $line | awk -F ";" '{print $3}'`
	DL_ADDRESS='https://scihub.esa.int/dhus/odata/v1/Products('"'${UUID}'"')/$value' # scihub
#	DL_ADDRESS='https://scihub.esa.int/apihub/odata/v1/Products('"'${UUID}'"')/$value' # apihub
	echo ""	
	echo "----------------------------------------------------------"
	echo " Downloading Product ${COUNT} of ${NR} (UUID=${UUID})"
	echo "----------------------------------------------------------"
	echo " Getting MD5 checksum for download validation"


	# prepare a loop to avoid uncomplete data downloads and check for md5 checksum
	i=1
	echo "bla" > ${TMP_DIR}/tmp_error2
	# do the loop 

	for(( i=1; i<=2; i++ ));do
		
		i=1	
		# get MD5sum of product
		MD5_ADDRESS='https://scihub.esa.int/dhus/odata/v1/Products('"'${UUID}'"')/Checksum/Value/$value'	
		aria2c --dir=${TMP_DIR} --check-certificate=false --continue=true --http-user="${USERNAME}" --http-passwd="${PW}" "${MD5_ADDRESS}" > ${TMP_DIR}/tmp_error2
		if grep -q "download completed" ${TMP_DIR}/tmp_error2;then

			i=3
			MD5_UP=`cat $TMP_DIR/'$value'`
			rm -f $TMP_DIR/'$value'
	
		elif grep -q "Authorization failed" ${TMP_DIR}/tmp_error2;then

			echo " Authorization failed"
			exit 1
		else
				
			echo " Connection problems, will try to continue download in 5 minutes"
			sleep 5m

		fi
	done



	# prepare a loop to avoid uncomplete data downloads and check for md5 checksum
	i=1
	echo "bla" > ${TMP_DIR}/tmp_error
	# do the loop 
	for(( i=1; i<=2; i++ ));do

		i=1
		SECONDS=0
		echo -ne " Downloading product ..."
		aria2c --dir=${TMP_DIR} --check-certificate=false --continue=true --http-user="${USERNAME}" --http-passwd="${PW}" "${DL_ADDRESS}" > ${TMP_DIR}/tmp_error \
		& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

		if grep -q "download completed" ${TMP_DIR}/tmp_error;then

			#echo " Download of ${UUID} completed"
			i=3
			SCENE=`ls ${TMP_DIR}/*zip`
			MD5_DOWN=`md5sum ${SCENE} | awk '{print $1}' | tr '[:lower:]' '[:upper:]'`

			# check on md5
			if [[ ${MD5_UP} == ${MD5_DOWN} ]];then
	
				echo " Check MD5 sum: passed"
			else
				echo " Check MD5 sum: not passed, will have to redownload the scene"
				rm -f ${SCENE}
				i=1
			fi

		elif grep -q "Authorization failed" ${TMP_DIR}/tmp_error;then

			echo " Authorization failed"
			exit 1
		else
			
			echo " Connection problems, will try to continue download in 5 minutes"
			sleep 5m				
		fi		

		
	done

	rm -f ${TMP_DIR}/tmp_error*
	SCENE_PATH=`ls ${TMP_DIR}/*zip`
	SCENE=`basename $SCENE_PATH`
	SCENE_ID=`echo ${SCENE} | rev | cut -c 5- | rev`
	DATE=${SCENE_ID:17:8}

	echo " Moving $SCENE to ${PROC_DIR}/DATA/${DATE}-${TRACK}${ORB_DIR}/"
	mkdir -p ${PROC_DIR}/DATA/
	mkdir -p ${PROC_DIR}/DATA/${TRACK}${ORB_DIR}/${DATE}"-"${TRACK}${ORB_DIR}/
	mv ${TMP_DIR}/${SCENE} ${PROC_DIR}/DATA/${TRACK}${ORB_DIR}/${DATE}"-"${TRACK}${ORB_DIR}/

	COUNT=`expr ${COUNT} + 1`

done  < ${TMP_DIR}/tmp_list

rm -rf ${TMP_DIR}
#rm -f tmp_download_list tmp_track_list tmp_list
