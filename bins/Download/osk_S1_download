#! /bin/bash 

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "2" ]; then

	echo -e ""
	echo -e "----------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Download Sentinel-1 data with an inventory shapefile"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- aria2"
	echo -e "	- ogrinfo"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " syntax: osk_S1_download <output_folder> <Inventory Shapefile>"
	echo -e ""
	echo -e " input parameters:"
	echo -e " output_folder			(output) folder where the downloaded data will be saved"
	echo -e " Inventory shapefile		(input) shapefile created and maybe edited from osk_S1_inventory script"
	exit 1
else
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Download Sentinel-1 data with an inventory shapefile"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- aria2"
	echo -e "	- ogrinfo"
	echo -e "----------------------------------"
	echo -e ""

  	cd $1
   	PROC_DIR=`pwd`
	TMP_DIR=${PROC_DIR}/TMP
	mkdir -p ${TMP_DIR}
fi

source ${OPENSARKIT}/lib/bash_helpers


#	Credentials
read -r -p "Please type your ESA Scihub Username:" USERNAME
read -s -p "Please type your ESA Scihub Password:" PW
echo ""

echo "Preparing download"
ogrinfo $2 -al | grep Product_ID | sed 's/  Product_ID (String) = //g' | tail -n +2 > tmp_download_list

# counter for info on number of download products
NR=`cat tmp_download_list | wc -l`
COUNT=1

while read line; do 

	# get the data via the UUID
	UUID=$line		
	DL_ADDRESS='https://scihub.esa.int/dhus/odata/v1/Products('"'${UUID}'"')/$value' # scihub
#	DL_ADDRESS='https://scihub.esa.int/apihub/odata/v1/Products('"'${UUID}'"')/$value' # apihub
	
	echo "Downloading Product ${COUNT} of ${NR} (UUID=${UUID})"
	echo "Getting MD5 checksum for download validation"

	# get MD5sum of product
	MD5_ADDRESS='https://scihub.esa.int/dhus/odata/v1/Products('"'${UUID}'"')/Checksum/Value/$value'	
	aria2c --dir=${TMP_DIR} --check-certificate=false --continue=true --http-user="${USERNAME}" --http-passwd="${PW}" "${MD5_ADDRESS}" > ${TMP_DIR}/tmp_error2
	MD5_UP=`cat $TMP_DIR/'$value'`
	rm -f $TMP_DIR/'$value'

	# prepare a loop to avoid uncomplete data downloads and check for md5 checksum
	i=1
	echo "bla" > ${TMP_DIR}/tmp_error
	# do the loop 
	for(( i=1; i<=2; i++ ));do

		i=1
		echo "Downloading... (this will take a while)"
		aria2c --dir=${TMP_DIR} --check-certificate=false --continue=true --http-user="${USERNAME}" --http-passwd="${PW}" "${DL_ADDRESS}" > ${TMP_DIR}/tmp_error &
		spinner $!
		if grep -q "download completed" ${TMP_DIR}/tmp_error;then

			echo "Download of ${UUID} completed"
			i=3
			SCENE=`ls ${TMP_DIR}/*zip`
			MD5_DOWN=`md5sum ${SCENE} | awk '{print $1}' | tr '[:lower:]' '[:upper:]'`
			
		elif grep -q "Authorization failed" ${TMP_DIR}/tmp_error;then

			echo " Authorization failed"
			exit 1
		else
			
			echo " Connection problems, will try to continue download in 5 minutes"
			sleep 5m				
		fi		

		# check on md5
		if [[ ${MD5_UP} == ${MD5_DOWN} ]];then

			echo "passed MD5 checksum test"
		else
			echo "MD5 checksums are not equal, will have to redownload the scene"
			rm -f ${SCENE}
			i=1
		fi
	done

	rm -f ${TMP_DIR}/tmp_error*
	SCENE=`ls ${TMP_DIR}`
	SCENE_ID=`echo ${SCENE} | rev | cut -c 5- | rev`
	DATE=${SCENE_ID:17:8}

	echo "Moving $SCENE to ${PROC_DIR}/DATA/${DATE}/"
	mkdir -p ${PROC_DIR}/DATA/
	mkdir -p ${PROC_DIR}/DATA/${DATE}/
	mv ${TMP_DIR}/${SCENE} ${PROC_DIR}/DATA/${DATE}/

	COUNT=`expr ${COUNT} + 1`

done  < tmp_download_list

rm -rf ${TMP_DIR}
rm -f tmp_download_list
