#! /bin/bash 

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "6" ]; then

	echo -e ""
	echo -e "----------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Search Sentinel-2 data on ESA Scihub"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- xml-twig-tools"
	echo -e "	- gdal-bin"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " syntax: osk_download_Sentinel <output_folder> <Area_of_Interest> <start_date> <end_date> <max cloud-cover> <Script_Mode>"
	echo -e ""
	echo -e " input parameters:"
	echo -e " output_folder		(output) folder where the downloaded data will be saved"
	echo -e " Area_of_Interest	(input) Shapefile of your Area of interest"
	echo -e " start_date		Start date of search in format YYYY-MM-DD"
	echo -e " end_date		End date of search in format YYYY-MM-DD"
	echo -e " max cloud-cover			Acquisition Mode of Sentinel-1 SAR instrument"

	echo -e ""
	echo -e " Script_Mode"			
	echo -e "			Available choices"
	echo -e "			  0 (only do the data inventory)"
	echo -e "			  1 (data inventory + direct data download)"
	exit 1
else
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Open Foris SARKit, version ${OSK_VERSION}"
	echo -e " Search Sentinel-2 data on ESA Scihub"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: ${AUTHOR_1}"
	echo -e " Contact: ${CONTACT_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e "Software dependencies:"
	echo -e "	- xml-twig-tools"
	echo -e "	- gdal-bin"
	echo -e "----------------------------------"
	echo -e ""

	# set up initial script variables
   	if [ -d $1 ];then
	
		cd $1
	else

		mkdir -p $1
		cd $1
	fi
   	PROC_DIR=`pwd`
   	TMP_DIR=${PROC_DIR}/TMP
   	mkdir -p ${TMP_DIR}
	PERIOD="( beginPosition:["$3"T00:00:00.000Z TO "$4"T23:59:59.999Z] AND endPosition:["$3"T00:00:00.000Z TO "$4"T23:59:59.999Z] )"
	CLOUD="[0 TO $5]"

	# source necessary OSK libs
	source ${OPENSARKIT}/lib/s2_helpers
fi

#	Credentials
echo -e "-------------------------------------------------"
echo -e "If you have not done the registration yet, go to:"
echo -e "https://scihub.esa.int/"
echo -e "-------------------------------------------------"
echo -e ""
read -r -p "Please type your ESA Scihub Username:" USERNAME
read -s -p "Please type your ESA Scihub Password:" PW
echo ""
echo "Getting the inventory data"
# get the corner coordinates from the AOI shapefile and build rectangle for data search  
LAYER=`ogrinfo $2 | grep 1: | awk $'{print $2}'`
X_MIN=`ogrinfo $2 $LAYER | grep Extent | awk -F '(' $'{print $2}' | awk -F ','  $'{print $1}'`
X_MAX=`ogrinfo $2 $LAYER | grep Extent | awk -F '(' $'{print $3}' | awk -F ','  $'{print $1}'`
Y_MIN=`ogrinfo $2 $LAYER | grep Extent | awk -F ',' $'{print $2}' | awk -F ')' $'{print $1}'`
Y_MAX=`ogrinfo $2 $LAYER | grep Extent | awk -F ',' $'{print $3}' | awk -F ')' $'{print $1}'`
AOI="POLYGON(($X_MIN$Y_MIN, $X_MIN$Y_MAX, $X_MAX$Y_MAX, $X_MAX$Y_MIN, $X_MIN$Y_MIN ))"

# get the OpenSearch result
echo "data inventory from scihub server"
wget --no-check-certificate --user=${USERNAME} --password=${PW} -O ${TMP_DIR}/datalist "https://scihub.esa.int/s2//search?q=( footprint:\"Intersects($AOI)\")+AND+${PERIOD}+AND+(platformname:Sentinel-2 AND cloudcoverpercentage:${CLOUD})&rows=10000&start=0"

# get nr. of products
NR_OF_PRODUCTS=`s2_ident ${TMP_DIR}/datalist | wc -l `
echo "-------------------------------------------------"
echo " There are ${NR_OF_PRODUCTS} Products in the Hub"
echo "-------------------------------------------------"
echo ""

# get the important info out of the xml JSON file
s2_ident ${TMP_DIR}/datalist > ${TMP_DIR}/scenes
s2_date ${TMP_DIR}/datalist > ${TMP_DIR}/dates
s2_uuid ${TMP_DIR}/datalist > ${TMP_DIR}/uuid
s2_footprint ${TMP_DIR}/datalist > ${TMP_DIR}/polys
s2_orbit_dir ${TMP_DIR}/datalist > ${TMP_DIR}/orbit
s2_track ${TMP_DIR}/datalist > ${TMP_DIR}/track
s2_cloud ${TMP_DIR}/datalist > ${TMP_DIR}/cloud
# write header
echo "Scene_ID,Product_ID,Date,Cloud,Track,Orbit_Dir,WKTGeom" > ${TMP_DIR}/wkt.csv
echo '"String(79)","String(37)","Integer(8)","Real(3.2)","Integer(3)","String(11)","String"' > ${TMP_DIR}/wkt.csvt

# write data
paste -d "," ${TMP_DIR}/scenes ${TMP_DIR}/uuid ${TMP_DIR}/dates ${TMP_DIR}/cloud ${TMP_DIR}/track ${TMP_DIR}/orbit ${TMP_DIR}/polys >> ${TMP_DIR}/wkt.csv

mkdir -p ${PROC_DIR}/
mkdir -p ${PROC_DIR}/Inventory
INV=${PROC_DIR}/Inventory

# write a shapefile of coverage
echo "<OGRVRTDataSource>" > ${TMP_DIR}/wkt.vrt
echo "	<OGRVRTLayer name=\"wkt\">" >> ${TMP_DIR}/wkt.vrt
echo "   	<SrcDataSource>${TMP_DIR}/wkt.csv</SrcDataSource>" >> ${TMP_DIR}/wkt.vrt
echo "   	<GeometryType>wkbPolygon</GeometryType>" >> ${TMP_DIR}/wkt.vrt
echo "		<LayerSRS>WGS84</LayerSRS>"  >> ${TMP_DIR}/wkt.vrt
echo "		<GeometryField encoding=\"WKT\" field=\"WKTGeom\"> </GeometryField >" >> ${TMP_DIR}/wkt.vrt
echo "	</OGRVRTLayer>" >> ${TMP_DIR}/wkt.vrt
echo "</OGRVRTDataSource>" >> ${TMP_DIR}/wkt.vrt

# convert to final shapefile
ogr2ogr -f "Esri Shapefile" "${INV}/S2.shp" "${TMP_DIR}/wkt.vrt" 2>&1 | tee ${TMP_DIR}/warnings

# download if needed
if [[ $6 == 1 ]];then
	osk_S1_download ${PROC_DIR} ${INV}/S2.shp
fi

# remove TMP folder
rm -rf ${TMP_DIR}
