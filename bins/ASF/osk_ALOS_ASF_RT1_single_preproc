#!/bin/bash

#-------------------------------------------------------------------------------------------
#	0 Set up Script variables
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "2" ]; then

	echo -e ""
	echo -e "----------------------------------"
	echo -e " OpenSARKit, v.01"
	echo -e " Preprocessing ALOS RTC data from ASF server"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
#	echo -e " Author: ${AUTHOR_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- SAGA GIS"
	echo -e "	- gdal"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " syntax: osk_single_ALOS_L1.5_preprocess_asf <filename> <output_folder>"
	echo -e ""
	echo -e " description of input parameters:"
	echo -e " filename		(input) filename of the downloaded zip file"
	echo -e " output_folder		(output) pathname of the output folder"
	echo -e ""
  exit 1
else
	echo -e ""
	echo -e "----------------------------------"
	echo -e " OpenSARKit, v.01"
	echo -e " Preprocessing ALOS Level 1.5 scene from ASF server"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
#	echo -e " Author: ${AUTHOR_1}"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- SAGA GIS"
	echo -e "	- gdal"
	echo -e "----------------------------------"
	echo -e ""

# set up input data
  FILE=`readlink -f $1`
  BASE=`basename ${FILE}`
  PROC_DIR=`dirname ${FILE}`
  TMP1=${PROC_DIR}/TMP/
  rm -rf ${TMP1}	
  mkdir -p ${TMP1}
  TMP_DIR=${PROC_DIR}/TMP/${BASE}
  mkdir -p ${TMP_DIR}
  mkdir -p $2
  cd $2
  OUT_DIR=`pwd`
fi
#-------------------------------------------------------------------------------------------


#-------------------------------------------------------------------------------------------
# 1 Unzip Archive
#-------------------------------------------------------------------------------------------
echo "Extracting ${FILE}"
unzip -o -q ${FILE} -d ${TMP_DIR}

#-------------------------------------------------------------------------------------------
# 2 Get some scene infos and print them to Std.Out
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
# extract filenames
SCENE_ID=`ls ${TMP_DIR}`
cd ${TMP_DIR}/${SCENE_ID}
GAMMA_HH=`ls *HH*`
echo $GAMMA_HH
#GAMMA_HV=`ls *HV*`
LS_MAP=`ls *ls*`
XML_FILE=`ls *iso.xml*`

ORBIT=${SCENE_ID:3:5}
FRAME=${SCENE_ID:14:4}

FINAL_DIR=$OUT_DIR/${FRAME}-${ORBIT}
mkdir -p ${FINAL_DIR}
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
# check for mode
if grep -q PLR ${XML_FILE};then

	MODE="PLR"

elif grep -q FBD ${XML_FILE};then

	MODE="FBD"
	
else

	MODE="FBS"
fi
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
# extract Date and Footprint etc
DATE=`cat ${XML_FILE} | grep "beginPosition" | awk -F ">" $'{print $2}' | awk -F "T" $'{print $1}'`
SAT_PATH=`curl -s https://api.daac.asf.alaska.edu/services/search/param?keyword=value\&granule_list=${SCENE_ID:0:15}\&output=csv | tail -n 1 | awk -F "," $'{print $7}' | sed 's/\"//g'` # !!!!!needs change for final version!!!!!	
	
echo "----------------------------------------------------------------"
echo "Processing Scene: 		${SCENE_ID}"
echo "Satellite/Sensor: 		ALOS/Palsar"
echo "Acquisiton Mode:		${MODE}"
echo "Acquisition Date (YYYYMMDD):	${DATE}"
echo "Relative Satellite Track: 	${SAT_PATH}"
echo "Image Frame: 			$FRAME"
echo "----------------------------------------------------------------"

OUTPUT_SPK_HH=${TMP_DIR}/Gamma0_HH.tif
OUTPUT_SPK_HV=${TMP_DIR}/Gamma0_HV.tif
OUTPUT_SPK_VH=${TMP_DIR}/Gamma0_VH.tif
OUTPUT_SPK_VV=${TMP_DIR}/Gamma0_VV.tif
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
# Launch SNAP for HH channel speckle filtering
echo "Apply Lee Speckle Filter to ${SCENE_ID}"
bash ${SNAP_EXE} ${SNAP_GRAPHS}/Refined_Lee.xml -Pinput=${GAMMA_HH} -Poutput=${OUTPUT_SPK_HH} 2>&1 | tee  ${TMP_DIR}/tmplog
#-------------------------------------------------------------------------------------------


#-------------------------------------------------------------------------------------------
# in case it fails because of Java error, try it a second time
if grep -q Error ${TMP_DIR}/tmplog; then 	
	echo "2nd try"
	rm -rf ${OUTPUT_SPK_HH} 
	sh ${SNAP_EXE} ${TMP_DIR}/Refined_Lee.xml -Pinput=${GAMMA_HH} -Poutput=$${OUTPUT_SPK_HH} 2>&1 | tee  ${TMP_DIR}/tmplog
fi
rm -f ${TMP_DIR}/Refined_Lee.xml 
#-------------------------------------------------------------------------------------------

if [[ "${MODE}" == "FBD" || "${MODE}" == "PLR" ]];then

	#-------------------------------------------------------------------------------------------
	# Launch SNAP for HV channel speckle filtering
	echo "Apply Lee Speckle Filter to ${SCENE_ID}"
	bash ${SNAP_EXE} ${SNAP_GRAPHS}/Refined_Lee.xml -Pinput=${GAMMA_HV} -Poutput=${OUTPUT_SPK_HV} 2>&1 | tee  ${TMP_DIR}/tmplog
	#-------------------------------------------------------------------------------------------

	#-------------------------------------------------------------------------------------------
	# in case it fails because of Java error, try it a second time
	if grep -q Error ${TMP_DIR}/tmplog; then 	
		echo "2nd try"
		rm -rf ${OUTPUT_SPK_HH} 
		sh ${SNAP_EXE} ${TMP_DIR}/Refined_Lee.xml -Pinput=${GAMMA_HH} -Poutput=$${OUTPUT_SPK_HH} 2>&1 | tee  ${TMP_DIR}/tmplog
	fi
	rm -f ${TMP_DIR}/Refined_Lee.xml 
	#-------------------------------------------------------------------------------------------

elif [[ "${MODE}" == "PLR" ]];then

	#-------------------------------------------------------------------------------------------
	# Launch SNAP for VH channel speckle filtering
	echo "Apply Lee Speckle Filter to ${SCENE_ID}"
	bash ${SNAP_EXE} ${SNAP_GRAPHS}/Refined_Lee.xml -Pinput=${GAMMA_VH} -Poutput=${OUTPUT_SPK_VH} 2>&1 | tee  ${TMP_DIR}/tmplog
	#-------------------------------------------------------------------------------------------


	#-------------------------------------------------------------------------------------------
	# in case it fails because of Java error, try it a second time
	if grep -q Error ${TMP_DIR}/tmplog; then 	
		echo "2nd try"
		rm -rf ${OUTPUT_SPK_HH} 
		sh ${SNAP_EXE} ${TMP_DIR}/Refined_Lee.xml -Pinput=${GAMMA_VH} -Poutput=$${OUTPUT_SPK_VH} 2>&1 | tee  ${TMP_DIR}/tmplog
	fi
	rm -f ${TMP_DIR}/Refined_Lee.xml 
	#-------------------------------------------------------------------------------------------

	#-------------------------------------------------------------------------------------------
	# Launch SNAP for VV channel speckle filtering
	echo "Apply Lee Speckle Filter to ${SCENE_ID}"
	bash ${SNAP_EXE} ${SNAP_GRAPHS}/Refined_Lee.xml -Pinput=${GAMMA_VV} -Poutput=${OUTPUT_SPK_VV} 2>&1 | tee  ${TMP_DIR}/tmplog
	#-------------------------------------------------------------------------------------------


	#-------------------------------------------------------------------------------------------
	# in case it fails because of Java error, try it a second time
	if grep -q Error ${TMP_DIR}/tmplog; then 	
		echo "2nd try"
		rm -rf ${OUTPUT_SPK_HH} 
		sh ${SNAP_EXE} ${TMP_DIR}/Refined_Lee.xml -Pinput=${GAMMA_VV} -Poutput=$${OUTPUT_SPK_VV} 2>&1 | tee  ${TMP_DIR}/tmplog
	fi
	rm -f ${TMP_DIR}/Refined_Lee.xml 
	#-------------------------------------------------------------------------------------------
fi


#-------------------------------------------------------------------------------------------
# 5 Preprocess imagery III - Mask Layover/Shadow and interpolate small data holes 
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
echo "Inverting Layover/Shadow Mask"	
gdal_calc.py -A ${LS_MAP} --outfile=${TMP_DIR}/mask.tif --calc="1*(A==1)" --NoDataValue=0
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
# translate to SAGA format
gdalwarp -srcnodata 0 -dstnodata -99999 -of SAGA ${TMP_DIR}/mask.tif ${TMP_DIR}/tmp_mask.sdat
gdalwarp -srcnodata 0 -dstnodata -99999 -of SAGA ${OUTPUT_SPK_HH} ${TMP_DIR}/tmp_hh_saga.sdat

if [[ "${MODE}" == "FBD" || "${MODE}" == "PLR" ]];then
	gdalwarp -srcnodata 0 -dstnodata -99999 -of SAGA ${OUTPUT_SPK_HV} ${TMP_DIR}/tmp_hv_saga.sdat
elif [[ "${MODE}" == "PLR" ]];then
	gdalwarp -srcnodata 0 -dstnodata -99999 -of SAGA ${OUTPUT_SPK_VH} ${TMP_DIR}/tmp_vh_saga.sdat
	gdalwarp -srcnodata 0 -dstnodata -99999 -of SAGA ${OUTPUT_SPK_VV} ${TMP_DIR}/tmp_vv_saga.sdat
fi
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
echo "Masking out Layover/Shadow regions"
saga_cmd -f=r grid_calculus 1 -GRIDS:${TMP_DIR}/tmp_hh_saga.sgrd -XGRIDS:${TMP_DIR}/tmp_mask.sgrd -RESULT ${TMP_DIR}/tmp_mask_hh_saga.sgrd -FORMULA:"a * b"

if [[ "${MODE}" == "FBD" || "${MODE}" == "PLR" ]];then
	saga_cmd -f=r grid_calculus 1 -GRIDS:${TMP_DIR}/tmp_hv_saga.sgrd -XGRIDS:${TMP_DIR}/tmp_mask.sgrd -RESULT ${TMP_DIR}/tmp_mask_hv_saga.sgrd -FORMULA:"a * b"
elif [[ "${MODE}" == "PLR" ]];then
	saga_cmd -f=r grid_calculus 1 -GRIDS:${TMP_DIR}/tmp_vh_saga.sgrd -XGRIDS:${TMP_DIR}/tmp_mask.sgrd -RESULT ${TMP_DIR}/tmp_mask_vh_saga.sgrd -FORMULA:"a * b"
	saga_cmd -f=r grid_calculus 1 -GRIDS:${TMP_DIR}/tmp_vv_saga.sgrd -XGRIDS:${TMP_DIR}/tmp_mask.sgrd -RESULT ${TMP_DIR}/tmp_mask_vv_saga.sgrd -FORMULA:"a * b"
fi
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
echo "Filling small data holes by IDW interpolation"
saga_cmd -f=r grid_tools 25 -GRID:${TMP_DIR}/tmp_mask_hh_saga.sgrd -MAXGAPCELLS:250 -MAXPOINTS:500 -LOCALPOINTS:25 -CLOSED:${TMP_DIR}/tmp_mask_hh_filled.sgrd

if [[ "${MODE}" == "FBD" || "${MODE}" == "PLR" ]];then
	saga_cmd -f=r grid_tools 25 -GRID:${TMP_DIR}/tmp_mask_hv_saga.sgrd -MAXGAPCELLS:250 -MAXPOINTS:500 -LOCALPOINTS:25 -CLOSED:${TMP_DIR}/tmp_mask_hv_filled.sgrd
elif [[ "${MODE}" == "PLR" ]];then
	saga_cmd -f=r grid_tools 25 -GRID:${TMP_DIR}/tmp_mask_vh_saga.sgrd -MAXGAPCELLS:250 -MAXPOINTS:500 -LOCALPOINTS:25 -CLOSED:${TMP_DIR}/tmp_mask_vh_filled.sgrd
	saga_cmd -f=r grid_tools 25 -GRID:${TMP_DIR}/tmp_mask_vv_saga.sgrd -MAXGAPCELLS:250 -MAXPOINTS:500 -LOCALPOINTS:25 -CLOSED:${TMP_DIR}/tmp_mask_vv_filled.sgrd
fi
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
echo "Applying multi-directional Lee-Filter for further smoothing"
saga_cmd -f=r grid_filter 3 -INPUT:${TMP_DIR}/tmp_mask_hh_filled.sgrd -RESULT:${TMP_DIR}/tmp_mask_hh_filtered.sgrd -NOISE_ABS:1000 -NOISE_REL:250 -METHOD:1

if [[ "${MODE}" == "FBD" || "${MODE}" == "PLR" ]];then
	saga_cmd -f=r grid_filter 3 -INPUT:${TMP_DIR}/tmp_mask_hv_filled.sgrd -RESULT:${TMP_DIR}/tmp_mask_hv_filtered.sgrd -NOISE_ABS:1000 -NOISE_REL:250 -METHOD:1
elif [[ "${MODE}" == "PLR" ]];then
	saga_cmd -f=r grid_filter 3 -INPUT:${TMP_DIR}/tmp_mask_vh_filled.sgrd -RESULT:${TMP_DIR}/tmp_mask_vh_filtered.sgrd -NOISE_ABS:1000 -NOISE_REL:250 -METHOD:1
	saga_cmd -f=r grid_filter 3 -INPUT:${TMP_DIR}/tmp_mask_vv_filled.sgrd -RESULT:${TMP_DIR}/tmp_mask_vv_filtered.sgrd -NOISE_ABS:1000 -NOISE_REL:250 -METHOD:1
fi
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
echo "Create Final Output files"
gdalwarp -srcnodata -99999 -dstnodata 0 ${TMP_DIR}/tmp_mask_hh_filtered.sdat ${FINAL_DIR}/Gamma0_HH.tif

if [[ "${MODE}" == "FBD" || "${MODE}" == "PLR" ]];then
	gdalwarp -srcnodata -99999 -dstnodata 0 ${TMP_DIR}/tmp_mask_hv_filtered.sdat ${FINAL_DIR}/Gamma0_HV.tif
elif [[ "${MODE}" == "PLR" ]];then
	gdalwarp -srcnodata -99999 -dstnodata 0 ${TMP_DIR}/tmp_mask_vh_filtered.sdat ${FINAL_DIR}/Gamma0_VH.tif
	gdalwarp -srcnodata -99999 -dstnodata 0 ${TMP_DIR}/tmp_mask_vv_filtered.sdat ${FINAL_DIR}/Gamma0_VV.tif
fi
#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
# remove Temp Folder
rm -rf ${TMP_DIR}
#-------------------------------------------------------------------------------------------
echo "------------------------------------------------------------"
echo "Successfully preprocessed ${SCENE_ID} (OpenSARKit Statement)"
echo "------------------------------------------------------------"
#EOF
