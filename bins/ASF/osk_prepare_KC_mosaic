#! /bin/bash

# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "5" ]; then

	echo -e ""
	echo -e "----------------------------------"
	echo -e " OpenSARKit, v.01"
	echo -e " Preparing K&C mosaics"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
#	echo -e " Author: Andreas Vollrath"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- gdal-bin"
	echo -e "	- SAGA GIS"
	echo -e "----------------------------------"
	echo -e ""
	echo -e " syntax: osk_prepare_KC_mosaics <output_folder> <ISO3/AOI> <year> <filtering> <texture>"
	echo -e ""
	echo -e " description of input parameters:"
	echo -e " output_folder		(output) pathname of the output folder"
 	echo -e " ISO3/AOI		ISO3 country code or shapefile of your area of interest"
	echo -e " Year			Acquisition Year (2007,2008,2009 or 2010)"
	echo -e " filtering		Apply Multi-directional Lee Filter (Lee et al. 1998)"
	echo -e "			  Available choices:"
	echo -e "			  0: no filtering applied"
	echo -e "			  1: filter applied"
	echo -e " texture		Calculate Texture measures"
	echo -e "			  Available choices:"
	echo -e "			  0: no calculation applied"
	echo -e "			  1: texture measures will be applied"
	echo -e ""		
	echo -e ""

  	exit 1
else
	echo -e ""
	echo -e "----------------------------------"
	echo -e " OpenSARKit, v.01"
	echo -e " Preparing K&C mosaics"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
#	echo -e " Author: Andreas Vollrath"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e " Software dependencies:"
	echo -e "	- SAGA GIS"
	echo -e "	- gdal"
	echo -e "----------------------------------"
	echo -e ""

	# set up initial script variables
	mkdir -p $1
	cd $1
	OUT_DIR=`pwd` 
	ZIP_DIR=${OUT_DIR}/ZIP
	mkdir -p ${ZIP_DIR}
	export TMP_DIR=${OUT_DIR}/TMP/
	mkdir -p ${TMP_DIR}
	YEAR=$3
	YEAR_SHORT=${YEAR:2:2}
	mkdir -p ${OUT_DIR}/${YEAR}/
fi

# ask for user access
echo -e "If you have not done the registration, go to:"
echo -e "http://www.eorc.jaxa.jp/ALOS/en/palsar_fnf/registration.htm"
#read -r -p "Please type your K&C mosaic username:" UNAME
#read -s -p "Please type your K&C mosaic password:" PW

# source bash helpers lib
source ${OPENSARKIT}/lib/bash_helpers.sh

#----------------------------------------------------------------------
# check if AOI comes from country code or is already a shape
mkdir -p ${OUT_DIR}/AOI/

if [ `echo $2 | grep shp` ]; then # AOI case

		AOI=$2
		cp ${AOI} ${OUT_DIR}/AOI/
	
else # country case
	
      		COUNTRY=`echo "SELECT name FROM countries WHERE \"iso3\" = '$2';" | spatialite $DB_GLOBAL | head -50`
		echo "Extracting country boundaries for ${COUNTRY}"
		
		# extract srtm grid as shape from the OpenSARKit DB
		echo "Exporting shapefile from country database"	
	   	ogr2ogr -f "Esri Shapefile" ${OUT_DIR}/AOI/AOI.shp ${DB_GLOBAL} -dsco SPATIALITE=yes -where "\"iso3\" = \"${2}\"" -nln AOI countries
		AOI=${OUT_DIR}/AOI/AOI.shp
		echo "Exporting shapefile from country database with a 0.1 buffer around the borders"	
	   	ogr2ogr -f "Esri Shapefile" ${OUT_DIR}/AOI/AOI_buffer.shp ${DB_GLOBAL} -dsco SPATIALITE=yes -sql "select ST_union(ST_buffer(geom,0.1)) from countries where \"iso3\" = \"${2}\""
		AOI_BUF=${OUT_DIR}/AOI/AOI_buffer.shp
fi
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# Get K&C 5x5 Tiles list
LAYER=`ogrinfo ${AOI} | tail -1 | awk $'{print $2}'`

# create a vrt layer for consequent interect operation with ogr2ogr
echo "<OGRVRTDataSource>" > ${TMP_DIR}/intersect.vrt
echo "   <OGRVRTLayer name=\"${LAYER}\">" >> ${TMP_DIR}/intersect.vrt
echo "      <SrcDataSource>${AOI}</SrcDataSource>" >> ${TMP_DIR}/intersect.vrt
echo "   </OGRVRTLayer>" >> ${TMP_DIR}/intersect.vrt
echo "   <OGRVRTLayer name=\"kc_grid\">" >> ${TMP_DIR}/intersect.vrt
echo "      <SrcDataSource>${DB_GLOBAL}</SrcDataSource>" >> ${TMP_DIR}/intersect.vrt
echo "   </OGRVRTLayer>" >> ${TMP_DIR}/intersect.vrt
echo "</OGRVRTDataSource>" >> ${TMP_DIR}/intersect.vrt

# intersect with ogr2ogr
ogr2ogr -f "csv" ${TMP_DIR}/tiles.csv ${TMP_DIR}/intersect.vrt -dialect sqlite -sql "SELECT b.x_min,b.y_max FROM ${LAYER} a, kc_grid b WHERE ST_Intersects(a.geometry, b.geometry)" 
# get tile list
cat ${TMP_DIR}/tiles.csv | tail -n +2 | tr ',' '\ ' > ${TMP_DIR}/kc_list
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# 1 Download, and unpack the data
mkdir -p ${OUT_DIR}/${YEAR}/TILES/

while read LINE; do

	cd ${OUT_DIR}
	#echo $LINE
	COL=`echo ${LINE} | awk $'{print $1}'`
	ROW=`echo ${LINE} | awk $'{print $2}'`

	# Create the actual Grid code for exact download address
	if [ `echo $ROW | grep -` ];then 

		# eliminate - sign 
		ROW=`echo ${ROW} | sed 's|-||g'`

		# create ROW in Form SXX
		if [ ${#ROW} == 1 ];then 

			ROW=S0$ROW
		else
			ROW=S$ROW

		fi

	else
		
		# create ROW in Form NXX
		if [ ${#ROW} == 1 ];then 

			ROW=N0$ROW
		else
			ROW=N$ROW
		fi

	fi

	if [ `echo $COL | grep -` ];then 

		# eliminate - sign 
		COL=`echo ${COL} | sed 's|-||g'`

		# create COL in Form WXXX
		if [ ${#COL}  == 3 ];then 

			COL=W${COL}

		elif [ ${#COL} == 2 ];then

			COL=W0${COL}
		else 
			COL=W00${COL}
		fi

	else
		# COL in Form EXXX
		if [ ${#COL} == 3 ];then 

			COL=E${COL}

		elif [ ${#COL} == 2 ];then

			COL=E0${COL}
		else 
			COL=E00${COL}
		fi
	fi

	echo "Downloading Tile ${ROW}${COL}"_"${YEAR_SHORT}"_"MOS.tar.gz"
	wget -q ftp://ftp.eorc.jaxa.jp/pub/ALOS/ext1/PALSAR_MSC/25m_MSC/${YEAR}/${ROW}${COL}"_"${YEAR_SHORT}"_"MOS.tar.gz -O ${ZIP_DIR}/${ROW}${COL}"_"${YEAR_SHORT}"_"MOS.tar.gz

	echo "Extracting Tile ${ROW}${COL}"_"${YEAR_SHORT}"_"MOS.tar.gz"
	tar -xzf ${ZIP_DIR}/${ROW}${COL}"_"${YEAR_SHORT}"_"MOS.tar.gz -C ${TMP_DIR}

done < ${TMP_DIR}/kc_list
#----------------------------------------------------------------------



#----------------------------------------------------------------------
# 2 Mosaic the relevant data, apply the layover/shadow mask and filter, in case it is set to yes
if [ $4 -eq 1 ];then #filter case

cd ${TMP_DIR}/

	for DATA in `ls *sl_HH`;do #filter HH1x1 tiles that fall in the AOI
		
		#-------------------------------------------------------------------------------------
		# check if 1x1 tile intersects with AOI
		# create a shapefile
		gdal_trace_outline ${DATA} -out-cs ll -ogr-out ${DATA}.shp
		LAYER_TILE=`ogrinfo ${DATA}.shp | tail -1 | awk $'{print $2}'`
		DATA_PATH=`readlink -f ${DATA}`		
		AOI_PATH=`readlink -f $AOI`

		# create a vrt for intersect analysis
		echo "<OGRVRTDataSource>" > ${TMP_DIR}/intersect_tile.vrt
		echo "   <OGRVRTLayer name=\"${LAYER_TILE}\">" >> ${TMP_DIR}/intersect_tile.vrt
		echo "      <SrcDataSource>${DATA_PATH}.shp</SrcDataSource>" >> ${TMP_DIR}/intersect_tile.vrt
		echo "   </OGRVRTLayer>" >> ${TMP_DIR}/intersect_tile.vrt
		echo "   <OGRVRTLayer name=\"${LAYER}\">" >> ${TMP_DIR}/intersect_tile.vrt
		echo "      <SrcDataSource>${AOI_PATH}</SrcDataSource>" >> ${TMP_DIR}/intersect_tile.vrt
		echo "   </OGRVRTLayer>" >> ${TMP_DIR}/intersect_tile.vrt
		echo "</OGRVRTDataSource>" >> ${TMP_DIR}/intersect_tile.vrt	


		# create intersect table	
		ogr2ogr -f "csv" ${TMP_DIR}/grids.csv ${TMP_DIR}/intersect_tile.vrt -dialect sqlite -sql "SELECT * FROM ${LAYER} a, ${LAYER_TILE} b WHERE ST_Intersects(a.geometry, b.geometry)" 
		#-------------------------------------------------------------------------------------

		# do the actual check
		if [ `cat ${TMP_DIR}/grids.csv | wc -l` -gt 1 ];then
	
			#---------------------------------------------------------------------------
			# Mask, Gap-Closure & Multi-directional Filtering
			echo "Translate HH band to Saga GIS Format for subsequent filtering"
			gdal_translate -of SAGA ${DATA} ${DATA}.saga.sdat
			echo ""
			echo "Apply the mask" 
			gdal_calc.py -A ${DATA:0:10}"_mask" --outfile=${DATA}"_mask.tif" --calc="1*(A==255)" --NoDataValue=0
			gdal_translate -of SAGA -a_nodata 0 ${DATA}"_mask.tif" ${DATA}"_mask.saga.sdat"
			saga_cmd -f=r grid_calculus 1 -GRIDS:${DATA}.saga.sgrd -XGRIDS:${DATA}"_mask.saga.sgrd" -RESULT ${DATA}"_masked.sgrd" -FORMULA:"a * b"
			echo ""
			echo "Close small gaps by interpolation"
			saga_cmd -f=r grid_tools 25 -GRID:${DATA}"_masked.sgrd" -MAXGAPCELLS:250 -MAXPOINTS:500 -LOCALPOINTS:25 -CLOSED:${DATA}"_filled.sgrd"		
			echo ""
			echo "Applying multi-directional Lee filter (Lee et al. 1998)"
			saga_cmd -f=r grid_filter 3 -INPUT:${DATA}"_filled.sgrd" -RESULT:${DATA}.saga.filtered.sgrd -NOISE_ABS:5000 -NOISE_REL:3000 -METHOD:1
			echo "Exporting "
			gdal_translate -of GTiff -ot UInt16 -a_nodata 0 ${DATA}.saga.filtered.sdat ${OUT_DIR}/${YEAR}/TILES/${DATA}.tif
			#---------------------------------------------------------------------------

			#---------------------------------------------------------------------------
			# Texture Calculation
			if [ $5 -eq 1 ];then # texture case
				
				echo "Translate HH band to Geotiff Format for subsequent filtering"
				gdal_translate -of GTiff ${DATA} ${DATA}.geotiff.tif
				echo "Creating Texture Channels"
				bash ${S1TBX_EXE} ${S1TBX_GRAPHS}/Texture_Measures.xml -Pinput=${TMP_DIR}/${DATA}.geotiff.tif -Poutput=${TMP_DIR}/${DATA}.texture.tif
				# extract the single channels
				gdal_translate -b 3 -of SAGA ${TMP_DIR}/${DATA}.texture.tif ${TMP_DIR}/${DATA}.dissimilarity.sdat
				gdal_translate -b 2 -of SAGA ${TMP_DIR}/${DATA}.texture.tif ${TMP_DIR}/${DATA}.variance.sdat
				gdal_translate -b 4 -of SAGA ${TMP_DIR}/${DATA}.texture.tif ${TMP_DIR}/${DATA}.homogeneity.sdat

				# mask the single channels
				echo "Mask the Dissimilarity Band"
				saga_cmd -f=r grid_calculus 1 -GRIDS:${TMP_DIR}/${DATA}.dissimilarity.sgrd -XGRIDS:${DATA}"_mask.saga.sgrd" -RESULT ${TMP_DIR}/${DATA}.dissimilarity.mask.sgrd -FORMULA:"a * b"
				echo "Mask the GLCM Variance Band"
				saga_cmd -f=r grid_calculus 1 -GRIDS:${TMP_DIR}/${DATA}.variance.sgrd -XGRIDS:${DATA}"_mask.saga.sgrd" -RESULT ${TMP_DIR}/${DATA}.variance.mask.sgrd -FORMULA:"a * b"
				echo "Mask the Homogeneity Band"
				saga_cmd -f=r grid_calculus 1 -GRIDS:${TMP_DIR}/${DATA}.homogeneity.sgrd -XGRIDS:${DATA}"_mask.saga.sgrd" -RESULT ${TMP_DIR}/${DATA}.homogeneity.mask.sgrd -FORMULA:"a * b"
				
				echo "Scale the final Dissimilarity Band"
				MIN=`gdal_min ${TMP_DIR}/${DATA}.dissimilarity.mask.sdat`
				MAX=`gdal_max ${TMP_DIR}/${DATA}.dissimilarity.mask.sdat`
				gdal_translate -a_nodata 0 -of GTiff -ot UInt16 -scale ${MIN} ${MAX} 0 65535  ${TMP_DIR}/${DATA}.dissimilarity.mask.sdat ${OUT_DIR}/${YEAR}/TILES/${DATA}.dissimilarity.tif

				echo "Scale the final GLCM Variance Band"
				MIN=`gdal_min ${TMP_DIR}/${DATA}.variance.mask.sdat`
				MAX=`gdal_max ${TMP_DIR}/${DATA}.variance.mask.sdat`
				gdal_translate -a_nodata 0 -of GTiff -ot UInt16 -scale ${MIN} ${MAX} 0 65535  ${TMP_DIR}/${DATA}.variance.mask.sdat ${OUT_DIR}/${YEAR}/TILES/${DATA}.variance.tif

				echo "Scale the final Dissimilarity Band"
				MIN=`gdal_min ${TMP_DIR}/${DATA}.homogeneity.mask.sdat`
				MAX=`gdal_max ${TMP_DIR}/${DATA}.homogeneity.mask.sdat`
				gdal_translate -a_nodata 0 -of GTiff -ot UInt16 -scale ${MIN} ${MAX} 0 65535  ${TMP_DIR}/${DATA}.homogeneity.mask.sdat ${OUT_DIR}/${YEAR}/TILES/${DATA}.homogeneity.tif

			fi
			#---------------------------------------------------------------------------

			
		else 

			echo "------------------------------------------"
			echo "No Overlap with AOI, going on with the next tile"
			echo "------------------------------------------"
		fi

		rm -f ${DATA}*	
		rm -f ${TMP_DIR}/grids.csv
			
	done
		
		
	for DATA in `ls *sl_HV`;do #filter HV 1x1 tiles that fall in the AOI
		
		#-------------------------------------------------------------------------------------
		# check if 1x1 tile intersects with AOI
		# create a shapefile
		gdal_trace_outline ${DATA} -out-cs ll -ogr-out ${DATA}.shp
		LAYER_TILE=`ogrinfo ${DATA}.shp | tail -1 | awk $'{print $2}'`
		DATA_PATH=`readlink -f ${DATA}`		
		AOI_PATH=`readlink -f $AOI`

		# create a vrt for intersect analysis
		echo "<OGRVRTDataSource>" > ${TMP_DIR}/intersect_tile.vrt
		echo "   <OGRVRTLayer name=\"${LAYER_TILE}\">" >> ${TMP_DIR}/intersect_tile.vrt
		echo "      <SrcDataSource>${DATA_PATH}.shp</SrcDataSource>" >> ${TMP_DIR}/intersect_tile.vrt
		echo "   </OGRVRTLayer>" >> ${TMP_DIR}/intersect_tile.vrt
		echo "   <OGRVRTLayer name=\"${LAYER}\">" >> ${TMP_DIR}/intersect_tile.vrt
		echo "      <SrcDataSource>${AOI_PATH}</SrcDataSource>" >> ${TMP_DIR}/intersect_tile.vrt
		echo "   </OGRVRTLayer>" >> ${TMP_DIR}/intersect_tile.vrt
		echo "</OGRVRTDataSource>" >> ${TMP_DIR}/intersect_tile.vrt	


		# create intersect table	
		ogr2ogr -f "csv" ${TMP_DIR}/grids.csv ${TMP_DIR}/intersect_tile.vrt -dialect sqlite -sql "SELECT * FROM ${LAYER} a, ${LAYER_TILE} b WHERE ST_Intersects(a.geometry, b.geometry)" 
		#-------------------------------------------------------------------------------------

		# do the actual check
		if [ `cat ${TMP_DIR}/grids.csv | wc -l` -gt 1 ];then
		
			echo "Translate HV band to Saga GIS Format for subsequent filtering"
			gdal_translate -of SAGA ${DATA} ${DATA}.saga.sdat
			echo ""
			echo "Apply the mask" 
			gdal_calc.py -A ${DATA:0:10}"_mask" --outfile=${DATA}"_mask.tif" --calc="1*(A==255)" --NoDataValue=0
			gdal_translate -of SAGA -a_nodata 0 ${DATA}"_mask.tif" ${DATA}"_mask.saga.sdat"
			saga_cmd -f=r grid_calculus 1 -GRIDS:${DATA}.saga.sgrd -XGRIDS:${DATA}"_mask.saga.sgrd" -RESULT ${DATA}"_masked.sgrd" -FORMULA:"a * b"
			echo ""
			echo "Close small gaps by interpolation"
			saga_cmd -f=r grid_tools 25 -GRID:${DATA}"_masked.sgrd" -MAXGAPCELLS:250 -MAXPOINTS:500 -LOCALPOINTS:25 -CLOSED:${DATA}"_filled.sgrd"		
			echo ""
			echo "Applying multi-directional Lee filter (Lee et al. 1998)"
			saga_cmd -f=r grid_filter 3 -INPUT:${DATA}"_filled.sgrd" -RESULT:${DATA}.saga.filtered.sgrd -NOISE_ABS:5000 -NOISE_REL:3000 -METHOD:1
			echo ""			
			echo "Exporting "
			gdal_translate -of GTiff -ot UInt16 -a_nodata 0 ${DATA}.saga.filtered.sdat ${OUT_DIR}/${YEAR}/TILES/${DATA}.tif

			#---------------------------------------------------------------------------
			# HH/HV ratio calculation
			echo ""			
			echo "Creating HH/HV Ratio channel"
			saga_cmd grid_calculus 1 -GRIDS:${DATA:0:10}_sl_HH.saga.filtered.sgrd -XGRIDS:${DATA}.saga.filtered.sgrd -RESULT:${DATA:0:10}_HHHV.saga.filtered.sgrd -TYPE:7 -FORMULA:"a / b"

			MIN=`gdal_min ${DATA:0:10}_HHHV.saga.filtered.sdat`
			MAX=`gdal_max ${DATA:0:10}_HHHV.saga.filtered.sdat`
			gdal_translate -of GTiff -ot UInt16 -scale ${MIN} ${MAX} 0 65535 -a_nodata 0 ${DATA:0:10}_HHHV.saga.filtered.sdat ${OUT_DIR}/${YEAR}/TILES/${DATA:0:10}_HHHV.tif
			#---------------------------------------------------------------------------		

			#---------------------------------------------------------------------------
			# Texture Calculation
			if [ $5 -eq 1 ];then # texture case
				
				echo "Translate HV band to Geotiff Format for subsequent filtering"
				gdal_translate -of GTiff ${DATA} ${DATA}.geotiff.tif
				echo "Creating Texture Channels"
				bash ${S1TBX_EXE} ${S1TBX_GRAPHS}/Texture_Measures.xml -Pinput=${TMP_DIR}/${DATA}.geotiff.tif -Poutput=${TMP_DIR}/${DATA}.texture.tif
				# extract the single channels
				gdal_translate -b 3 -of SAGA ${TMP_DIR}/${DATA}.texture.tif ${TMP_DIR}/${DATA}.dissimilarity.sdat
				gdal_translate -b 2 -of SAGA ${TMP_DIR}/${DATA}.texture.tif ${TMP_DIR}/${DATA}.variance.sdat
				gdal_translate -b 4 -of SAGA ${TMP_DIR}/${DATA}.texture.tif ${TMP_DIR}/${DATA}.homogeneity.sdat

				# mask the single channels
				echo "Mask the Dissimilarity Band"
				saga_cmd -f=r grid_calculus 1 -GRIDS:${TMP_DIR}/${DATA}.dissimilarity.sgrd -XGRIDS:${DATA}"_mask.saga.sgrd" -RESULT ${TMP_DIR}/${DATA}.dissimilarity.mask.sgrd -FORMULA:"a * b"
				echo "Mask the GLCM Variance Band"
				saga_cmd -f=r grid_calculus 1 -GRIDS:${TMP_DIR}/${DATA}.variance.sgrd -XGRIDS:${DATA}"_mask.saga.sgrd" -RESULT ${TMP_DIR}/${DATA}.variance.mask.sgrd -FORMULA:"a * b"
				echo "Mask the Homogeneity Band"
				saga_cmd -f=r grid_calculus 1 -GRIDS:${TMP_DIR}/${DATA}.homogeneity.sgrd -XGRIDS:${DATA}"_mask.saga.sgrd" -RESULT ${TMP_DIR}/${DATA}.homogeneity.mask.sgrd -FORMULA:"a * b"
				
				echo "Scale the final Dissimilarity Band"
				MIN=`gdal_min ${TMP_DIR}/${DATA}.dissimilarity.mask.sdat`
				MAX=`gdal_max ${TMP_DIR}/${DATA}.dissimilarity.mask.sdat`
				gdal_translate -a_nodata 0 -of GTiff -ot UInt16 -scale ${MIN} ${MAX} 0 65535  ${TMP_DIR}/${DATA}.dissimilarity.mask.sdat ${OUT_DIR}/${YEAR}/TILES/${DATA}.dissimilarity.tif

				echo "Scale the final GLCM Variance Band"
				MIN=`gdal_min ${TMP_DIR}/${DATA}.variance.mask.sdat`
				MAX=`gdal_max ${TMP_DIR}/${DATA}.variance.mask.sdat`
				gdal_translate -a_nodata 0 -of GTiff -ot UInt16 -scale ${MIN} ${MAX} 0 65535  ${TMP_DIR}/${DATA}.variance.mask.sdat ${OUT_DIR}/${YEAR}/TILES/${DATA}.variance.tif

				echo "Scale the final Dissimilarity Band"
				MIN=`gdal_min ${TMP_DIR}/${DATA}.homogeneity.mask.sdat`
				MAX=`gdal_max ${TMP_DIR}/${DATA}.homogeneity.mask.sdat`
				gdal_translate -a_nodata 0 -of GTiff -ot UInt16 -scale ${MIN} ${MAX} 0 65535  ${TMP_DIR}/${DATA}.homogeneity.mask.sdat ${OUT_DIR}/${YEAR}/TILES/${DATA}.homogeneity.tif


			fi
			#---------------------------------------------------------------------------
		fi			

		rm -f ${DATA}*
		rm -f ${TMP_DIR}/grids.csv

	done

else # no filter case
	
	for DATA in `ls *sl_HH`;do
		gdal_translate -of GTiff -ot UInt16 ${DATA} ${OUT_DIR}/${YEAR}/TILES/${DATA}.tif
	done
	
	for DATA in `ls *sl_HV`;do
		gdal_translate -of GTiff -ot UInt16 ${DATA} ${OUT_DIR}/${YEAR}/TILES/${DATA}.tif
	done

fi # close filter/no-filter case
#----------------------------------------------------------------------

#--------------------------------------------------------------


#--------------------------------------------------------------
# 3 build the final mosaic
gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_hh.vrt ${OUT_DIR}/${YEAR}/TILES/*sl_HH.tif
gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_hv.vrt ${OUT_DIR}/${YEAR}/TILES/*sl_HV.tif
gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_hhhv.vrt ${OUT_DIR}/${YEAR}/TILES/*HHHV.tif

if [ `echo $2 | grep shp` ]; then # AOI case
	gdal_translate -projwin $(ogr_extent ${AOI}) ${OUT_DIR}/${YEAR}/mosaic_hh.vrt ${OUT_DIR}/${YEAR}/Gamma0_HH_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI}) ${OUT_DIR}/${YEAR}/mosaic_hv.vrt ${OUT_DIR}/${YEAR}/Gamma0_HV_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI}) ${OUT_DIR}/${YEAR}/mosaic_hhhv.vrt ${OUT_DIR}/${YEAR}/HHHV_ratio_${YEAR}.tif

	if [ $5 = 1 ];then
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HHdis.vrt ${OUT_DIR}/${YEAR}/TILES/*HH.dissimilarity.tif
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HHvar.vrt ${OUT_DIR}/${YEAR}/TILES/*HH.variance.tif
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HHhom.vrt ${OUT_DIR}/${YEAR}/TILES/*HH.homogeneity.tif
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HVdis.vrt ${OUT_DIR}/${YEAR}/TILES/*HV.dissimilarity.tif
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HVvar.vrt ${OUT_DIR}/${YEAR}/TILES/*HV.variance.tif
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HVhom.vrt ${OUT_DIR}/${YEAR}/TILES/*HV.homogeneity.tif

	gdal_translate -projwin $(ogr_extent ${AOI}) ${OUT_DIR}/${YEAR}/mosaic_HHhom.vrt ${OUT_DIR}/${YEAR}/04_Homogeneity_HH_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI}) ${OUT_DIR}/${YEAR}/mosaic_HHvar.vrt ${OUT_DIR}/${YEAR}/04_Variance_HH_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI}) ${OUT_DIR}/${YEAR}/mosaic_HHdis.vrt ${OUT_DIR}/${YEAR}/04_Dissimilarity_HH_${YEAR}.tif

	gdal_translate -projwin $(ogr_extent ${AOI}) ${OUT_DIR}/${YEAR}/mosaic_HVhom.vrt ${OUT_DIR}/${YEAR}/04_Homogeneity_HV_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI}) ${OUT_DIR}/${YEAR}/mosaic_HVvar.vrt ${OUT_DIR}/${YEAR}/04_Variance_HV_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI}) ${OUT_DIR}/${YEAR}/mosaic_HVdis.vrt ${OUT_DIR}/${YEAR}/04_Dissimilarity_HV_${YEAR}.tif
	fi

else
	gdal_translate -projwin $(ogr_extent ${AOI_BUF}) ${OUT_DIR}/${YEAR}/mosaic_hh.vrt ${OUT_DIR}/${YEAR}/Gamma0_HH_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI_BUF}) ${OUT_DIR}/${YEAR}/mosaic_hv.vrt ${OUT_DIR}/${YEAR}/Gamma0_HV_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI_BUF}) ${OUT_DIR}/${YEAR}/mosaic_hhhv.vrt ${OUT_DIR}/${YEAR}/HHHV_ratio_${YEAR}.tif

	if [ $5 = 1 ];then
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HHdis.vrt ${OUT_DIR}/${YEAR}/TILES/*HH.dissimilarity.tif
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HHvar.vrt ${OUT_DIR}/${YEAR}/TILES/*HH.variance.tif
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HHhom.vrt ${OUT_DIR}/${YEAR}/TILES/*HH.homogeneity.tif
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HVdis.vrt ${OUT_DIR}/${YEAR}/TILES/*HV.dissimilarity.tif
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HVvar.vrt ${OUT_DIR}/${YEAR}/TILES/*HV.variance.tif
	gdalbuildvrt ${OUT_DIR}/${YEAR}/mosaic_HVhom.vrt ${OUT_DIR}/${YEAR}/TILES/*HV.homogeneity.tif

	gdal_translate -projwin $(ogr_extent ${AOI_BUF}) ${OUT_DIR}/${YEAR}/mosaic_HHhom.vrt ${OUT_DIR}/${YEAR}/04_Homogeneity_HH_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI_BUF}) ${OUT_DIR}/${YEAR}/mosaic_HHvar.vrt ${OUT_DIR}/${YEAR}/04_Variance_HH_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI_BUF}) ${OUT_DIR}/${YEAR}/mosaic_HHdis.vrt ${OUT_DIR}/${YEAR}/04_Dissimilarity_HH_${YEAR}.tif

	gdal_translate -projwin $(ogr_extent ${AOI_BUF}) ${OUT_DIR}/${YEAR}/mosaic_HVhom.vrt ${OUT_DIR}/${YEAR}/04_Homogeneity_HV_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI_BUF}) ${OUT_DIR}/${YEAR}/mosaic_HVvar.vrt ${OUT_DIR}/${YEAR}/04_Variance_HV_${YEAR}.tif
	gdal_translate -projwin $(ogr_extent ${AOI_BUF}) ${OUT_DIR}/${YEAR}/mosaic_HVdis.vrt ${OUT_DIR}/${YEAR}/04_Dissimilarity_HV_${YEAR}.tif
	fi
fi


rm -rf ${TMP_DIR}
