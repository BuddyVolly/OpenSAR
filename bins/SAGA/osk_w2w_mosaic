#! /bin/bash

if [ "$#" != "3" ]; then  
	echo -e "*** Mosaicking script ***"
	echo -e "*** OpenSARKit, v.01  ***"
	echo -e ""
	echo -e "usage: osk_w2w_mosaic <paths> <AOI_shapefile> <Match method>"
	echo -e ""
	echo -e "input parameters:"
	echo -e "paths			(input) folder where path mosaics are stored"
	echo -e "AOI_shapefile		(input) Area of interest (e.g. country borders)"
   echo -e "Match method		radiometric matching of the paths"
   echo -e "			0: no matching"
   echo -e "			1: Histogram matching"
	exit 1
else
	echo -e "*** Mosaicking script ***"
	echo -e "*** OpenSARKit, v.01  ***"
	echo -e ""

	cd $1
	export PROC_DIR=`pwd`
	AOI=$2	
	MATCH=$3
fi

cd ${PROC_DIR}
TMP_DIR=${PROC_DIR}/TMP
rm -rf ${TMP_DIR}
mkdir -p ${TMP_DIR}
FINAL_DIR=${PROC_DIR}/Final_Mosaic
mkdir -p ${FINAL_DIR}
CPU=`lscpu | grep "CPU(s):" | awk $'{print $2}' | head -1`

for FILE in `ls -1 *HH*sdat`;do

	LONG=`gdalinfo $FILE | grep Origin | awk -F "(" $'{print $2}' | awk -F "," $'{print $1}'`

	echo $LONG $FILE >> ${TMP_DIR}/list
	sort -n ${TMP_DIR}/list > ${TMP_DIR}/list_sort

done	

i=1	
sed -i 's|.sdat|.sgrd|g' ${TMP_DIR}/list_sort
MAX_LINE=`cat ${TMP_DIR}/list_sort | wc -l`


while read LINE; do

	DATA=`echo ${LINE} | awk $'{print $2}'`
	
	GRID2=${DATA}
		
	#echo "Do resampling to 0.0005"
	#saga_cmd -c=${CPU} grid_tools 0 -INPUT ${GRID2} -KEEP_TYPE:1 -TARGET_USER_SIZE:0.00027778 -SCALE_UP_METHOD:1 -SCALE_DOWN_METHOD:1 -TARGET_OUT_GRID:${TMP_DIR}/$DATA-res.sgrd
	echo "Cut to Boundaries of the AOI"
	saga_cmd -c=${CPU} shapes_grid 7 -OUTPUT ${TMP_DIR}/$DATA-res-cli.sgrd -INPUT ${GRID2} -POLYGONS $AOI -NODATA 1
	#rm -rf ${TMP_DIR}/*-res.*
	echo "Cut unreliable values"
	saga_cmd -c=${CPU} grid_tools 15 -INPUT ${TMP_DIR}/$DATA-res-cli.sgrd -RESULT ${TMP_DIR}/$DATA-res-cli-rec.sgrd -METHOD 1 -MIN -1000 -MAX 0.001 -RNEW 0.001 
	rm -rf ${TMP_DIR}/*-res-cli.*
	echo "Cut unreliable values"
	saga_cmd -c=${CPU} grid_tools 15 -INPUT ${TMP_DIR}/$DATA-res-cli-rec.sgrd -RESULT ${TMP_DIR}/$DATA-res-cli-rec2.sgrd -METHOD 1 -MIN 1 -MAX 1000 -RNEW 1
	rm -rf ${TMP_DIR}/*-res-cli-rec.*
	echo "Create dB layer"
	saga_cmd grid_calculus 1 -GRIDS:"${TMP_DIR}/$DATA-res-cli-rec2.sgrd" -RESULT:"${TMP_DIR}/$DATA-dB.sgrd" -FORMULA:"10*log(a)"	


done < ${TMP_DIR}/list_sort

cd ${TMP_DIR}

echo "Mosaicing the HH-polarized Paths"
LIST_HH=`ls -1 *-rec2.sgrd | tr '\n' ';'| rev|cut -c 2-|rev`
saga_cmd -c=${CPU} grid_tools 3 -GRIDS:${LIST_HH} -TYPE:7 -OVERLAP:4 -BLEND_DIST:10 -MATCH:${MATCH} -TARGET_OUT_GRID:${TMP_DIR}/GAMMA0_HH_mosaic.sgrd
gdalwarp -multi -wo NUM_THREADS=ALL_CPUS -of GTiff -t_srs EPSG:4326 -srcnodata -99999 -dstnodata 0 ${TMP_DIR}/GAMMA0_HH_mosaic.sdat ${FINAL_DIR}/Gamma0_HH.tif

echo "Mosaicing the HH-polarized Paths in dB"
LIST_HH=`ls -1 *-dB.sgrd | tr '\n' ';'| rev|cut -c 2-|rev`
saga_cmd -c=${CPU} grid_tools 3 -GRIDS:${LIST_HH} -TYPE:7 -OVERLAP:4 -BLEND_DIST:10 -MATCH:${MATCH} -TARGET_OUT_GRID:${TMP_DIR}/GAMMA0_HH_db_mosaic.sgrd
gdalwarp -multi -wo NUM_THREADS=ALL_CPUS -of GTiff -t_srs EPSG:4326 -srcnodata -99999 -dstnodata 0 ${TMP_DIR}/GAMMA0_HH_db_mosaic.sdat ${FINAL_DIR}/Gamma0_HH_db.tif

rm -rf ${TMP_DIR}/*
cd ${PROC_DIR}
for FILE in `ls -1 *HV*sdat`;do

	LONG=`gdalinfo $FILE | grep Origin | awk -F "(" $'{print $2}' | awk -F "," $'{print $1}'`

	echo $LONG $FILE >> ${TMP_DIR}/list
	sort -n ${TMP_DIR}/list > ${TMP_DIR}/list_sort

done	

i=1	
sed -i 's|.sdat|.sgrd|g' ${TMP_DIR}/list_sort
MAX_LINE=`cat ${TMP_DIR}/list_sort | wc -l`


while read LINE; do

	DATA=`echo ${LINE} | awk $'{print $2}'`
	
	GRID2=${DATA}
		
#echo "Do resampling to 0.0005"
#	saga_cmd -c=${CPU} grid_tools 0 -INPUT ${GRID2} -KEEP_TYPE:1 -TARGET_USER_SIZE:0.00027778 -SCALE_UP_METHOD:1 -SCALE_DOWN_METHOD:1 -TARGET_OUT_GRID:${TMP_DIR}/$DATA-res.sgrd
	echo "Cut to Boundaries"
	saga_cmd -c=${CPU} shapes_grid 7 -OUTPUT ${TMP_DIR}/$DATA-res-cli.sgrd -INPUT ${GRID2} -POLYGONS $AOI -NODATA 1
#	rm -rf ${TMP_DIR}/*-res.*
	echo "Reclassify"
	saga_cmd -c=${CPU} grid_tools 15 -INPUT ${TMP_DIR}/$DATA-res-cli.sgrd -RESULT ${TMP_DIR}/$DATA-res-cli-rec.sgrd -METHOD 1 -MIN -1000 -MAX 0.001 -RNEW 0.001 
	rm -rf ${TMP_DIR}/*-res-cli.*
	echo "Reclassify"
	saga_cmd -c=${CPU} grid_tools 15 -INPUT ${TMP_DIR}/$DATA-res-cli-rec.sgrd -RESULT ${TMP_DIR}/$DATA-res-cli-rec2.sgrd -METHOD 1 -MIN 1 -MAX 1000 -RNEW 1
	rm -rf ${TMP_DIR}/*-res-cli-rec.*
	saga_cmd grid_calculus 1 -GRIDS:"${TMP_DIR}/$DATA-res-cli-rec2.sgrd" -RESULT:"${TMP_DIR}/$DATA-dB.sgrd" -FORMULA:"10*log(a)"	

done < ${TMP_DIR}/list_sort

cd ${TMP_DIR}

echo "Mosaicing the HV-polarized Paths"
LIST_HV=`ls -1 *-rec2.sgrd | tr '\n' ';'| rev|cut -c 2-|rev`
saga_cmd -c=${CPU} grid_tools 3 -GRIDS:${LIST_HV} -TYPE:7 -OVERLAP:4 -BLEND_DIST:10 -MATCH:${MATCH} -TARGET_OUT_GRID:${TMP_DIR}/GAMMA0_HV_mosaic.sgrd
gdalwarp -multi -wo NUM_THREADS=ALL_CPUS -of GTiff -t_srs EPSG:4326 -srcnodata -99999 -dstnodata 0 ${TMP_DIR}/GAMMA0_HV_mosaic.sdat ${FINAL_DIR}/Gamma0_HV.tif

echo "Mosaicing the HV-polarized Paths in dB"
LIST_HH=`ls -1 *-dB.sgrd | tr '\n' ';'| rev|cut -c 2-|rev`
saga_cmd -c=${CPU} grid_tools 3 -GRIDS:${LIST_HH} -TYPE:7 -OVERLAP:4 -BLEND_DIST:10 -MATCH:${MATCH} -TARGET_OUT_GRID:${TMP_DIR}/GAMMA0_HV_db_mosaic.sgrd
gdalwarp -multi -wo NUM_THREADS=ALL_CPUS -of GTiff -t_srs EPSG:4326 -srcnodata -99999 -dstnodata 0 ${TMP_DIR}/GAMMA0_HV_db_mosaic.sdat ${FINAL_DIR}/Gamma0_HV_db.tif

echo "Calculate Ratio"
#saga_cmd -f=r -c=${CPU} grid_calculus 1 -GRIDS:${FINAL_DIR}/GAMMA0_HH_mosaic.sgrd -XGRIDS:${FINAL_DIR}/GAMMA0_HV_mosaic.sgrd -RESULT:${FINAL_DIR}/HH_HV_mosaic.sgrd -FORMULA:"a / b"
#saga_cmd -f=r -c=${CPU} grid_calculus 1 -GRIDS:${FINAL_DIR}/GAMMA0_HH_db_mosaic.sgrd -XGRIDS:${FINAL_DIR}/GAMMA0_HV_db_mosaic.sgrd -RESULT:${FINAL_DIR}/HH_HV_dB_mosaic.sgrd -FORMULA:"a / b"
#gdalwarp -multi -wo NUM_THREADS=ALL_CPUS -of GTiff -t_srs EPSG:4326 -srcnodata -99999 -dstnodata 0 ${TMP_DIR}/HH_HV_mosaic.sdat ${FINAL_DIR}/Gamma0_HV_db.tif
#gdalwarp -multi -wo NUM_THREADS=ALL_CPUS -of GTiff -t_srs EPSG:4326 -srcnodata -99999 -dstnodata 0 ${TMP_DIR}/GAMMA0_HV_db_mosaic.sdat ${FINAL_DIR}/Gamma0_HV_db.tif

gdal_calc.py -A ${FINAL_DIR}/Gamma0_HH.tif -B ${FINAL_DIR}/Gamma0_HV.tif --outfile=${FINAL_DIR}/HH_HV_ratio.tif --calc="A/B" --NoDataValue=0
gdal_calc.py -A ${FINAL_DIR}/Gamma0_HH_db.tif -B ${FINAL_DIR}/Gamma0_HV_db.tif --outfile=${FINAL_DIR}/HH_HV_db_ratio.tif --calc="A/B" --NoDataValue=0


#gdalbuildvrt
#gdalbuildvrt -vrtnodata -99999 -separate ${FINAL_DIR}/stack.vrt ${FINAL_DIR}/GAMMA0_HH_mosaic.sdat ${FINAL_DIR}/GAMMA0_HV_mosaic.sdat ${FINAL_DIR}/HH_HV_mosaic.sdat 
gdalbuildvrt -vrtnodata 0 -separate ${FINAL_DIR}/stack_db.vrt ${FINAL_DIR}/Gamma0_HH_db.tif ${FINAL_DIR}/Gamma0_HV_db.tif ${FINAL_DIR}/HH_HV_db_ratio.tif 
gdalbuildvrt -vrtnodata 0 -separate ${FINAL_DIR}/stack.vrt ${FINAL_DIR}/Gamma0_HH.tif ${FINAL_DIR}/Gamma0_HV.tif ${FINAL_DIR}/HH_HV_ratio.tif 

echo "creating an RGB KMZ file for GoogleEarth Visualisation"
gdal_translate -of KMLSUPEROVERLAY -a_nodata 0 -outsize 25% 25% -scale_1 0.001 0.35 0 255 -scale_2 0.001 0.1 0 255 -scale_3 2 10 0 255 ${FINAL_DIR}/stack.vrt ${FINAL_DIR}/RGB_stack.kmz -co FORMAT=PNG
gdal_translate -of KMLSUPEROVERLAY -a_nodata 0 -outsize 25% 25% -scale_1 -30 0 0 255 -scale_2 -30 -1 0 255 -scale_3 2 10 0 255 ${FINAL_DIR}/stack_db.vrt ${FINAL_DIR}/RGB_stack_db.kmz -co FORMAT=PNG

# clean up temp folder
rm -rf ${TMP_DIR}

