#! /bin/bash
# If not stated otherwise (i.e. taken from https://github.com/dwtkns/gdal-cheat-sheet)
# the MIT License applies

# The MIT License (MIT)
# Copyright (c) 2016 Andreas Vollrath

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

function gdal_size() {
# taken from https://github.com/dwtkns/gdal-cheat-sheet
#Size Functions
#This size function echos the pixel dimensions of a given file in the format expected by gdalwarp.
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  gdal_size <input_raster>"
        return
    fi
    SIZE=$(gdalinfo $1 |\
        grep 'Size is ' |\
        cut -d\   -f3-4 |\
        sed 's/,//g')
    echo -n "$SIZE"
}



function gdal_extent() {
# taken from https://github.com/dwtkns/gdal-cheat-sheet
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  gdal_extent <input_raster>"
        return
    fi
    EXTENT=$(gdalinfo $1 |\
        grep "Lower Left\|Upper Right" |\
        sed "s/Lower Left  //g;s/Upper Right //g;s/).*//g" |\
        tr "\n" " " |\
        sed 's/ *$//g' |\
        tr -d "[(,]")
    echo -n "$EXTENT"
}

function gdal_ul() {
# taken from https://github.com/dwtkns/gdal-cheat-sheet
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  gdal_extent <input_raster>"
        return
    fi
    EXTENT=$(gdalinfo $1 |\
        grep "Upper Left\|Lower Right" |\
        sed "s/Upper Left  //g;s/Lower Right //g;s/).*//g" |\
        tr "\n" " " |\
        sed 's/ *$//g' |\
        tr -d "[(,]")
    echo -n "$EXTENT"
}

function ogr_extent() {
# taken from https://github.com/dwtkns/gdal-cheat-sheet

#This can be used to easily resample one raster to the dimensions of another:
#gdalwarp -ts $(gdal_size bigraster.tif) -r cubicspline smallraster.tif resampled_smallraster.tif


# Extent Functions
# These extent functions echo the extent of the given file in the order/format expected by gdal_translate -projwin. (Originally from Linfiniti).
# Extents can be passed directly into a gdal_translate command like so:

# gdal_translate -projwin $(ogr_extent boundingbox.shp) input.tif clipped_output.tif
# or
# gdal_translate -projwin $(gdal_extent target_crop.tif) input.tif clipped_output.tif
# This can be a useful way to quickly crop one raster to the same extent as another.
# Add these to your ~/.bash_profile file for easy terminal access.
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  ogr_extent <input_vector>"
        return
    fi
    EXTENT=$(ogrinfo -al -so $1 |\
        grep Extent |\
        sed 's/Extent: //g' |\
        sed 's/(//g' |\
        sed 's/)//g' |\
        sed 's/ - /, /g')
    EXTENT=`echo $EXTENT | awk -F ',' '{print $1 " " $4 " " $3 " " $2}'`
    echo -n "$EXTENT"
}

function ogr_layer_extent() {
# taken from https://github.com/dwtkns/gdal-cheat-sheet
    if [ -z "$2" ]; then
        echo "Missing arguments. Syntax:"
        echo "  ogr_extent <input_vector> <layer_name>"
        return
    fi
    EXTENT=$(ogrinfo -so $1 $2 |\
        grep Extent |\
        sed 's/Extent: //g' |\
        sed 's/(//g' |\
        sed 's/)//g' |\
        sed 's/ - /, /g')
    EXTENT=`echo $EXTENT | awk -F ',' '{print $1 " " $4 " " $3 " " $2}'`
    echo -n "$EXTENT"
}

function gdal_max() {
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  gdal_max <input_raster>"
        return
    fi
    MAX=$(gdalinfo -stats $1 |\
	grep STATISTICS_MAXIMUM |\
        awk -F "=" $'{print $2}')
    echo -n "$MAX"
}

function gdal_min() {
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  gdal_min <input_raster>"
        return
    fi
    MIN=$(gdalinfo -stats $1 |\
	grep STATISTICS_MINIMUM |\
        awk -F "=" $'{print $2}')
    echo -n "$MIN"
}

function gdal_mean() {
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  gdal_mean <input_raster>"
        return
    fi
    MEAN=$(gdalinfo -stats $1 |\
	grep STATISTICS_MEAN |\
        awk -F "=" $'{print $2}')
    echo -n "$MEAN"
}

function gdal_stddev() {
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  gdal_stddev <input_raster>"
        return
    fi
    STDDEV=$(gdalinfo -stats $1 |\
	grep STATISTICS_STDDEV |\
        awk -F "=" $'{print $2}')
    echo -n "$STDDEV"
}

function gdal_format() {
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  gdal_format <input_raster>"
        return
    fi
    FORMAT=$(gdalinfo $1 |\
	     grep Driver |\
	     sed 's/Driver: //g' |\
             awk -F"/" $'{print $1}')
	echo -n "$FORMAT"
}

function gdal_nodata() {
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  gdal_nodata <input_raster>"
        return
    fi
    NODATA=$(gdalinfo $1 |\
             grep NoData |\
	     awk -F "=" '{print $2}')
	echo -n "$NODATA"
}

function gdal_EPSG() {
    if [ -z "$1" ]; then
        echo "Missing arguments. Syntax:"
        echo "  gdal_EPSG <input_raster>"
        return
    fi
    EPSG=$(gdalinfo $1 |\
           grep AUTHORITY |\
	   tail -1 |\
	   sed 's/    AUTHORITY\[\"EPSG\"\,\"//g' |\
	   sed 's/\"\]\]//')
	echo -n "$EPSG"
}


function gdal_datatype() {
  if [ -z "$1" ]; then
      echo "Missing arguments. Syntax:"
      echo "  gdal_datatype <input_raster>"
      return
  fi
  DTYPE=$(gdalinfo $1 |\
          grep Type |\
          awk '{print $4}' |\
          awk -F"=" '{print $2}' |\
          rev | cut -c 2- | rev)
          echo -n "$DTYPE"
}

function gdal_resolution() {
  if [ -z "$1" ]; then
      echo "Missing arguments. Syntax:"
      echo "  gdal_resolution <input_raster>"
      return
  fi
  RES=$(gdalinfo $1 |\
       grep "Pixel Size" |\
       sed -e 's/Pixel Size = (//g' |\
       sed 's/,/ /g' |\
       sed 's/)//g')
       echo -n "$RES"
}

function gdal_offset() {
  # intended for use with gdal_edit.py
  if [ -z "$3" ]; then
      echo "Missing arguments. Syntax:"
      echo " gdal_offset <input_raster> <x-offset> <y-offset>"
      return
  fi

  source ${OPENSARKIT}/lib/helpers_source
  RES=$(gdal_resolution $1 | awk '{print $1}')
  XMIN=$(gdal_extent $1 | awk '{print $1}')
  YMIN=$(gdal_extent $1 | awk '{print $2}')
  XMAX=$(gdal_extent $1 | awk '{print $3}')
  YMAX=$(gdal_extent $1 | awk '{print $4}')
  NEW_XMIN=$(echo ${RES}*$2 + ${XMIN} | bc -l)
  NEW_XMAX=$(echo ${RES}*$2 + ${XMAX} | bc -l)
  NEW_YMIN=$(echo ${RES}*$3 + ${YMIN} | bc -l)
  NEW_YMAX=$(echo ${RES}*$3 + ${YMAX} | bc -l)
  echo -n "${NEW_XMIN} ${NEW_YMAX} ${NEW_XMAX} ${NEW_YMIN} "
}

function intersect_shp() {

    if [ -z "$3" ]; then
        echo " Missing arguments. Syntax:"
        echo " intersect_shp <input_shape 1> <input_shape 2> <output_shape>"
        return
    fi

    ISHAPE1=$(readlink -f $1)
    ISHAPE2=$(readlink -f $2)
    OSHAPE=$(readlink -f $3)

    ILAYER1=$(ogrinfo ${ISHAPE1} | awk 'NR==3' | awk '{print $2}')
    ILAYER2=$(ogrinfo ${ISHAPE2} | awk 'NR==3' | awk '{print $2}')
    VRTDIR=$(dirname ${ISHAPE1})

    echo "<OGRVRTDataSource>" > ${VRTDIR}/.intersect.vrt
    echo "<OGRVRTLayer name=\"layer1\">" >> ${VRTDIR}/.intersect.vrt
    echo "<SrcDataSource>${ISHAPE1}</SrcDataSource>" >> ${VRTDIR}/.intersect.vrt
    echo "<SrcLayer>${ILAYER1}</SrcLayer>" >> ${VRTDIR}/.intersect.vrt
    echo "</OGRVRTLayer>" >> ${VRTDIR}/.intersect.vrt
    echo "<OGRVRTLayer name=\"layer2\">" >> ${VRTDIR}/.intersect.vrt
    echo "<SrcDataSource>${ISHAPE2}</SrcDataSource>" >> ${VRTDIR}/.intersect.vrt
    echo "<SrcLayer>${ILAYER2}</SrcLayer>" >> ${VRTDIR}/.intersect.vrt
    echo "</OGRVRTLayer>" >> ${VRTDIR}/.intersect.vrt
    echo "</OGRVRTDataSource>" >> ${VRTDIR}/.intersect.vrt

    ogr2ogr -f "ESRI Shapefile" ${OSHAPE} ${VRTDIR}/.intersect.vrt -dialect sqlite -sql "SELECT ST_Intersection(st_unaryunion(st_collect(a.geometry)), st_unaryunion(st_collect(b.geometry))) AS geometry FROM layer1 a, layer2 b" #>> ${VRTDIR}/.tmp_intersect 2>&1
    [ $? -ne 0 ] && echo " Intersection was not possible" && return 1
    rm -f ${VRTDIR}/.intersect.vrt
}

function st_intersects_shp() {

    if [ -z "$3" ]; then
        echo " Missing arguments. Syntax:"
        echo " intersect_shp <input_shape 1> <input_shape 2> <output_shape>"
        return
    fi

    ISHAPE1=$(readlink -f $1)
    ISHAPE2=$(readlink -f $2)
    OSHAPE=$(readlink -f $3)

    ILAYER1=$(ogrinfo ${ISHAPE1} | awk 'NR==3' | awk '{print $2}')
    ILAYER2=$(ogrinfo ${ISHAPE2} | awk 'NR==3' | awk '{print $2}')
    VRTDIR=$(dirname ${ISHAPE1})

    echo "<OGRVRTDataSource>" > ${VRTDIR}/.intersect.vrt
    echo "<OGRVRTLayer name=\"layer1\">" >> ${VRTDIR}/.intersect.vrt
    echo "<SrcDataSource>${ISHAPE1}</SrcDataSource>" >> ${VRTDIR}/.intersect.vrt
    echo "<SrcLayer>${ILAYER1}</SrcLayer>" >> ${VRTDIR}/.intersect.vrt
    echo "</OGRVRTLayer>" >> ${VRTDIR}/.intersect.vrt
    echo "<OGRVRTLayer name=\"layer2\">" >> ${VRTDIR}/.intersect.vrt
    echo "<SrcDataSource>${ISHAPE2}</SrcDataSource>" >> ${VRTDIR}/.intersect.vrt
    echo "<SrcLayer>${ILAYER2}</SrcLayer>" >> ${VRTDIR}/.intersect.vrt
    echo "</OGRVRTLayer>" >> ${VRTDIR}/.intersect.vrt
    echo "</OGRVRTDataSource>" >> ${VRTDIR}/.intersect.vrt


    ogr2ogr -f "ESRI Shapefile" ${OSHAPE} ${VRTDIR}/.intersect.vrt -dialect sqlite \
            -sql "SELECT *
                  FROM layer1 a, layer2 b
                  WHERE ST_Intersects(a.geometry, b.geometry)" >> ${VRTDIR}/.tmp_intersect 2>&1
    [ $? -ne 0 ] && echo " Intersection was not possible" && return 1
    rm -f ${VRTDIR}/.intersect.vrt
  }

function st_intersection_area() {

      if [ -z "$2" ]; then
          echo " Missing arguments. Syntax:"
          echo " st_intersects_area <input_shape 1> <input_shape 2>"
          return
      fi

      ISHAPE1=$(readlink -f $1)
      ISHAPE2=$(readlink -f $2)

      ILAYER1=$(ogrinfo ${ISHAPE1} | awk 'NR==3' | awk '{print $2}')
      ILAYER2=$(ogrinfo ${ISHAPE2} | awk 'NR==3' | awk '{print $2}')
      VRTDIR=$(dirname ${ISHAPE1})

      echo "<OGRVRTDataSource>" > ${VRTDIR}/.intersect.vrt
      echo "<OGRVRTLayer name=\"layer1\">" >> ${VRTDIR}/.intersect.vrt
      echo "<SrcDataSource>${ISHAPE1}</SrcDataSource>" >> ${VRTDIR}/.intersect.vrt
      echo "<SrcLayer>${ILAYER1}</SrcLayer>" >> ${VRTDIR}/.intersect.vrt
      echo "</OGRVRTLayer>" >> ${VRTDIR}/.intersect.vrt
      echo "<OGRVRTLayer name=\"layer2\">" >> ${VRTDIR}/.intersect.vrt
      echo "<SrcDataSource>${ISHAPE2}</SrcDataSource>" >> ${VRTDIR}/.intersect.vrt
      echo "<SrcLayer>${ILAYER2}</SrcLayer>" >> ${VRTDIR}/.intersect.vrt
      echo "</OGRVRTLayer>" >> ${VRTDIR}/.intersect.vrt
      echo "</OGRVRTDataSource>" >> ${VRTDIR}/.intersect.vrt

      ogrinfo -q ${VRTDIR}/.intersect.vrt -dialect sqlite -sql "SELECT Area(ST_Intersection(st_unaryunion(st_collect(a.geometry)), st_unaryunion(st_collect(b.geometry)))) FROM layer1 a, layer2 b" | awk -F '\=' '{print $2}'
      [ $? -ne 0 ] && echo " Intersection was not possible" && return 1
      rm -f ${VRTDIR}/.intersect.vrt
  }
