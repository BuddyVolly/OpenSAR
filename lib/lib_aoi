#! /bin/bash

# The MIT License (MIT)
# Copyright (c) 2016 Andreas Vollrath

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


function aoi_valid_poly() {
    if [ -z "$3" ]; then
    echo " Missing arguments. Syntax:"
    echo " aoi_valid_poly <input_shapefile> <output_file> <tmp-dir> "
    return
    fi

	 source ${OPENSARKIT}/lib/helpers_source

	 # get full path
	 AOI=`readlink -f $1`
	 AOI_PROJ_FILE=`echo $AOI | rev | cut -c 5- | rev`

	 OUT=`readlink -f $2`
	 OUT_PROJ_FILE=`echo $OUT | rev | cut -c 5- | rev`

	 # check number of layers/features
 	 AOI_NR_LAYERS=`ogrinfo -so $1 | wc -l`
	 AOI_LAYER_NAME=`ogrinfo -so $1 |  awk 'NR==3' | awk $'{print $2}'`
	 AOI_NR_OF_FEATURES=`ogrinfo -so $1 ${AOI_LAYER_NAME} | grep "Feature Count" | awk $'{print $3}'`

	 if [ ${AOI_NR_LAYERS} -gt 3 ];then
		SECONDS=0
		echo -e " Warning: Too many layers in your AOI File."
		echo -ne " Will create a convex hull of your AOI ..." &&
		oft_convex_hull.py -i $1 -o $2
		cp ${AOI_PROJ_FILE}.prj ${OUT_PROJ_FILE}.prj
		duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
 	 elif [ ${AOI_NR_OF_FEATURES} -gt 1 ];then
		SECONDS=0
		echo -e " Warning: Too many polygons in your AOI file."
		echo -ne " Will create a convex hull of your AOI file ..." &&
		oft_convex_hull.py -i $1 -o $2
		cp ${AOI_PROJ_FILE}.prj ${OUT_PROJ_FILE}.prj
		duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
	 fi
}

function aoi_valid_epsg() {
    if [ -z "$3" ]; then
    echo " Missing arguments. Syntax:"
    echo " aoi_valid_epsg <input_shapefile> <output_file> <tmp-dir>"
    return
    fi

	source ${OPENSARKIT}/lib/helpers_source
	# check EPSG code
	AOI_PROJ_FILE=`echo $1 | rev | cut -c 5- | rev`
	AOI_EPSG=`oft_check_EPSG.py ${AOI_PROJ_FILE}.prj | grep EPSG | awk $'{print $3}'`
	if [[ "${AOI_EPSG}" != "4326" ]];then
		SECONDS=0
		echo " Warning: Shapefile is not in Lat/Long Projection"
		echo -ne " Transforming AOI shapefile to Lat/Long Projection ..." &&
		ogr2ogr -f "ESRI Shapefile" -t_srs EPSG:4326 $2 $1 > /dev/null 2>&1
		duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
	fi
}

function aoi_from_iso3() {

    if [ -z "$2" ]; then
    echo " Missing arguments. Syntax:"
    echo " aoi_from_iso3 <iso3 code> <output_dir>"
    return
    fi

# create out folder in case it soes not exist
mkdir -p $2

COUNTRY=`echo "SELECT name FROM countries WHERE \"iso3\" = '$1';" | spatialite ${OST_DB} | head -50`

SECONDS=0
echo -ne " Extracting country boundaries for ${COUNTRY} ..." &&
ogr2ogr -f "Esri Shapefile" $2/$1.shp ${OST_DB} -dsco SPATIALITE=yes -where "\"iso3\" = \"${1}\"" -nln AOI countries > /dev/null 2>&1
duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

#AOI=${OUT_DIR}/AOI/aoi_$2.shp

SECONDS=0
echo -ne " Creating a 0.1 degree buffered shapefile ..."	&&
ogr2ogr -f "Esri Shapefile" $2/aoi_$1_"buffer.shp" ${OST_DB} -dsco SPATIALITE=yes -sql "select ST_union(ST_buffer(geom,0.1)) from countries where \"iso3\" = \"${1}\"" > /dev/null 2>&1
duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

#AOI_BUF=${OUT_DIR}/AOI/aoi_$2_buffer.shp
}
