#! /bin/bash

# The MIT License (MIT)
# Copyright (c) 2016 Andreas Vollrath

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE

function s1_frame_import() {
  if [ -z "$3" ]; then
    echo " Missing arguments. Syntax:"
    echo " s1_frame_import <input_file> <output_file> <log_dir>"
    return
  fi

  # source other helpers
  source ${OPENSARKIT}/lib/helpers_source

  # error codes
  ERR_IMPORT="Error during clean import of product"

  BASE=`basename $1`
  echo ""
  SECONDS=0
  echo -ne " Importing S1 GRD data file, applying the precise orbit file and removing thermal noise ..." &&
  #bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_AO_TNR_BRD_SPK.xml -x -Pinput=$1 -Poutput=$2 > $3/log_import 2>&1
  bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_AO_TNR_BRD.xml -x -Pinput=$1 -Poutput=$2 > $3/log_import 2>&1
  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
  [ $? -ne 0 ] && return ${ERR_IMPORT}

}

function s1_swath_import() {
  if [ -z "$4" ]; then
    echo " Missing arguments. Syntax:"
    echo " s1_swath_preprocess <filelist> <output_file> <tmp_dir> <log_dir>"
    return
  fi

  # source other helpers
  source ${OPENSARKIT}/lib/helpers_source

  # error codes
  ERR_IMPORT="Error during clean import of product"
  ERR_BRD_NOISE="Error during border noise removal"
  ERR_TF="Error during Terrain Flattening"
  ERR_TC="Error during geometric terrain correction"

  NR_OF_FRAMES=`cat $1 | wc -l`
  j=1

  for LINE in `cat $1`;do
    s1_info ${LINE}
    BASE=`basename ${LINE}`
    echo ""
    SECONDS=0
    echo -ne " Importing S1 GRD data file, applying the precise orbit file and removing thermal noise ..." &&
    #bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_AO_TNR_BRD_SPK.xml -x -Pinput=${LINE} -Poutput=$3/${BASE}-import > $4/log_import 2>&1
    bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_AO_TNR_BRD.xml -x -Pinput=${LINE} -Poutput=$3/${BASE}-import > $4/log_import 2>&1
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_IMPORT}
    echo " Finished import of Frame: $j/${NR_OF_FRAMES}"
    j=`expr $j + 1`
  done

  if [ -e $3/${BASE}-import.data/Intensity_VH.img ];then

    SECONDS=0
    echo -ne " Assembling the products of the same swath ..." &&
    bash $SNAP_EXE SliceAssembly -PselectedPolarisations=VV,VH $(ls -1 $3/*-import.dim | tr '\n' ' ' | rev | cut -c 2- | rev) -t $2 > $4/log_swath_assembly 2>&1
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_ASSEMBLE}
    rm -rf $3/*-import.dim.d*

  else

    SECONDS=0
    echo -ne " Assembling the products of the same swath ..." &&
    bash $SNAP_EXE SliceAssembly -PselectedPolarisations=VV $(ls -1 $3/*-import.dim | tr '\n' ' ' | rev | cut -c 2- | rev) -t $2 > $4/log_swath_assembly 2>&1
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_ASSEMBLE}
    rm -rf $3/*-import.dim.d*
  fi
}

function s1_rtc_processing() {
  if [ -z "$7" ]; then
    echo " Missing arguments. Syntax:"
    echo " s1_rtc_processing <input file> <output_file> <resolution> <ratio calculation> <db-scaling> <tmp_dir> <log_dir>"
    return
  fi

  BASE=`echo $1 | rev | cut -c 5- | rev`

  COLUMNS=`gdalinfo ${BASE}.data/Intensity_VV.img | grep "Size is" | awk '{print $3}' | sed s/,//g`
  LINES=`gdalinfo ${BASE}.data/Intensity_VV.img | grep "Size is" | awk '{print $4}'`
  NEW_WIDTH=`expr $COLUMNS - 1200`
  NEW_HEIGHT=`expr $LINES - 1200`

  if [ $3 == "MED_RES" ];then

    SECONDS=0
    echo " Removing GRD border noise by deleting the outer 600 rows, calibrating to beta0, "
    echo -ne " applying the terrain flattening and multi-look by a factor of 3  ..." &&
    bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_RB_CAL_TF_ML3.xml -x -Pinput=$1 -Pwidth=${NEW_WIDTH} -Pheight=${NEW_HEIGHT} -Poutput=$6/TF  > $7/log_cal_tf_ml 2>&1
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_BRD_NOISE}

    if [ -e $6/TF.data/Gamma0_VH.img ];then

      if [[ $4 == 1 && $5 == 1 ]];then # db scale + ratio

        SECONDS=0
        echo -ne " Applying the geometric terrain correction, calculate the VV/VH Band Ratio and transform backscatter to decibel scale  ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TC_DB_Ratio.xml -x -Pinput=$6/TF.dim -Poutput=$6/TC_DB -PoutputRatio=$6/Ratio > $7/log_tc_ratio 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

        SECONDS=0
        echo -ne " Merging backscatter bands with ratio"
        bash ${SNAP_EXE} BandMerge -x $6/TC_DB.dim $6/Ratio.dim -t $2 > $7/log_output 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_BM}
        rm -rf $6/TC_DB.d* $6/Ratio.d*

        elif [[ $4 == 1 && $5 == 0 ]];then # ratio but no db scale

        SECONDS=0
        echo -ne " Applying the geometric terrain correction, and calculate the VV/VH Band Ratio  ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TC_Ratio.xml -x -Pinput=$6/TF.dim -Poutput=$6/TC -PoutputRatio=$6/Ratio > $7/log_ratio 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

        SECONDS=0
        echo -ne " Merging backscatter bands with ratio"
        bash ${SNAP_EXE} BandMerge -x $6/TC.dim $6/Ratio.dim -t $2 > $7/log_output 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        rm -rf $6/TC.d* $6/Ratio.d*

        elif [[ $4 == 0 && $5 == 0 ]];then # neither db nor ratio calculation

        SECONDS=0
        echo -ne " Applying the geometric terrain correction ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TC.xml -x -Pinput=$6/TF.dim -Poutput=$2 > $7/log_tc 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

        elif [[ $4 == 0 && $5 == 1 ]];then # db scaling but no ratio calculation

        SECONDS=0
        echo -ne " Applying the geometric terrain correction and transform backscatter to decibel scale ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TC_DB.xml -x -Pinput=$6/TF.dim -Poutput=$2 > $7/log_tc_db 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

        SECONDS=0
        echo -ne " Creating a georeferenced RGB thumbnail image ..." &&
        RTC_FILE_VV=$(ls "$2".data/*VV*img)
        RTC_BASE_VV=$(echo ${RTC_FILE} | rev | cut -c 5- | rev)
        gdal_translate -a_nodata 0 -outsize 20% 20% ${RTC_FILE_VV} $6/TN.VV.tif

        RTC_FILE_VH=$(ls "$2".data/*VH*img)
        gdal_translate -a_nodata 0 -outsize 20% 20% ${RTC_FILE_VH} $6/TN.VH.tif

        gdal_calc -A $6/TN.VV.tif -B $6/TN.VH.tif --NoDataValue=0 --calc="(A/B)" --outfile=$6/TN.ratio.tif
        gdal_merge.py -separate -a_nodata 0 -srcnodata 0 -o ${RTC_BASE_VV}.TN.tif $6/TN.VV.tif $6/TN.VH.tif $6/TN.ratio.tif
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
      fi

    else # SSV 30m

      if [[ $5 == 1 ]];then # db scaling

        SECONDS=0
        echo -ne " Applying the geometric terrain correction and transform backscatter to decibel scale  ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SSV_30_TC_DB.xml -x -Pinput=$6/TF.dim -Poutput=$2 > $7/log_tc_db 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

      else

        SECONDS=0 # no db-scaling
        echo -ne " Applying the geometric terrain correction ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SSV_30_TC.xml -x -Pinput=$6/TF.dim -Poutput=$2 > $7/log_tc 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

      fi

      SECONDS=0
      echo -ne " Creating a georeferenced thumbnail image ..." &&
      RTC_FILE_VV=$(ls "$2".data/*VV*img)
      RTC_BASE_VV=$(echo ${RTC_FILE} | rev | cut -c 5- | rev)
      gdal_translate -a_nodata 0 -outsize 20% 20% ${RTC_FILE_VV} ${RTC_BASE_VV}.TN.VV.tif
      duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

    fi

    elif [ $3 == "HI_RES" ];then

    SECONDS=0
    echo " Removing GRD border noise by deleting the outer 600 rows, calibrating to beta0, "
    echo -ne " applying the terrain flattening ..." &&
    bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_RB_CAL_TF_noML.xml -x -Pinput=$1 -Pwidth=${NEW_WIDTH} -Pheight=${NEW_HEIGHT} -Poutput=$6/TF > $7/log_cal_tf 2>&1
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_BRD_NOISE}
    rm -rf $6/${BASE}-import.dim

    if [ -e $6/TF.data/Gamma0_VH.img ];then


      if [[ $4 == 1 && $5 == 1 ]];then # db scale + ratio

        SECONDS=0
        echo -ne " applying the geometric terrain correction, calculate the VV/VH Band Ratio and transform backscatter to decibel scale  ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_TC_DB_Ratio.xml -x -Pinput=$6/TF.dim -Poutput=$6/TC_DB -PoutputRatio=$6/Ratio > $7/log_tc_db_ratio 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

        SECONDS=0
        echo -ne " Merging backscatter bands with ratio"
        bash ${SNAP_EXE} BandMerge -x $6/TC_DB.dim $6/Ratio.dim -t $2  > $7/log_output 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        rm -rf $4/TC_DB.d* $6/Ratio.d*

        elif [[ $4 == 1 && $5 == 0 ]];then # ratio but no db scale

        SECONDS=0
        echo -ne " Applying the geometric terrain correction, and calculate the VV/VH Band Ratio  ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_TC_Ratio.xml -x -Pinput=$6/TF.dim -Poutput=$6/TC -PoutputRatio=$6/Ratio > $7/log_tc_ratio 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

        SECONDS=0
        echo -ne " Merging backscatter bands with ratio ..."
        bash ${SNAP_EXE} BandMerge -x $6/TC.dim $6/Ratio.dim -t $2 > $7/log_output 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        rm -rf $6/TC.d* $4/Ratio.d*

        elif [[ $4 == 0 && $5 == 0 ]];then #neither db nor ratio calculation

        SECONDS=0
        echo -ne " Applying the geometric terrain correction ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_TC.xml -x -Pinput=$6/TF.dim -Poutput=$2 > $7/log_tc 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

        elif [[ $4 == 0 && $5 == 1 ]];then #do db scaling but no ratio calculation

        SECONDS=0
        echo -ne " Applying the geometric terrain correction and transform backscatter to decibel scale ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_TC_DB.xml -x -Pinput=$6/TF.dim -Poutput=$2 > $7/log_tc_db 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

      fi

    else # SSV 10m case

      if [[ $5 == 1 ]];then

        SECONDS=0
        echo -ne " Applying the geometric terrain correction and transform backscatter to decibel scale ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SSV_10_TC_DB.xml -x -Pinput=$6/TF.dim -Poutput=$2 > $7/log_tc_db 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

      else

        SECONDS=0
        echo -ne " Applying the geometric terrain correction ..." &&
        bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SSV_10_TC.xml -x -Pinput=$6/TF.dim -Poutput=$2 > $7/log_tc 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_TC}
        rm -rf $6/TF.d*

      fi

    fi
  fi

  echo "------------------------------------------------------------------------------------------------------"
  echo " Info: Succesfully processed file: `basename $1` to a radiometrically terrain corrected product. "
  echo "------------------------------------------------------------------------------------------------------"
  echo ""

}

function s1_mt_metrics() {
  if [ -z "$7" ]; then
    echo " Missing arguments. Syntax:"
    echo " s1_mt_metrics <file_list> <AOI> <output directory> <datatype> <pol mode> <tmpdir> <logfile>"
    return
  fi

  # source other helpers
  source ${OPENSARKIT}/lib/helpers_source
  AOI_MT=$2
  OUT_STACK_MT=$3
  ODATATYPE=$4
  POL_MODE_MT=$5
  TMP_MT=$6
  LOG_MT=$7

  # error codes
  ERR_STACKING=" Error during stacking of multi-temporal images"
  ERR_SPECKLE=" Error during stacking of multi-temporal images"

  SECONDS=0
  echo -ne " Creating the multitemporal stack ..." &&
  bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_Stacking.xml -x -Pfilelist=$1 -Poutput=${TMP_MT}/mt_stack.coreg.dim  >> ${LOG_MT}/log_mt_stacking 2>&1
  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
  [ $? -ne 0 ] && return ${ERR_STACKING}

  SECONDS=0
  echo -ne " Exeuting multi-temporal Speckle-filtering to the VV polarized channels of the multi-temporal stack ... " &&
  bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_MT_Speckle.xml -x -Pinput=${TMP_MT}/mt_stack.coreg.dim -Ppol=VV -Pthreshold=5 -Poutput=${TMP_MT}/mt_stack.vv.speckle.dim >> ${LOG_MT}/log_mt_stacking 2>&1
  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
  [ $? -ne 0 ] && return ${ERR_SPECKLE}

  if [ ${POL_MODE_MT} == VV ];then
    rm -rf ${TMP_MT}/mt_stack.coreg.d*
  fi

  for MTs in `ls -1 ${TMP_MT}/mt_stack.vv.speckle.data/*img`;do
    basename ${MTs} | rev | cut -c 5- | rev >> ${TMP_MT}/tmp_list
  done
  BANDLIST=$(cat ${TMP_MT}/tmp_list | tr '\n' ',' | rev | cut -c 2- | rev)
  rm -f ${TMP_MT}/tmp_list

  SECONDS=0
  echo -ne " Converting linear to db-scale ... " &&
  bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_lin_to_db.xml -x -Pinput=${TMP_MT}/mt_stack.vv.speckle.dim -Pbandlist=${BANDLIST} -Poutput=${TMP_MT}/mt_stack.vv.db.speckle.dim >> ${LOG_MT}/log_mt_stacking 2>&1
  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
  [ $? -ne 0 ] && return ${ERR_SPECKLE}
  rm -rf ${TMP_MT}/mt_stack.vv.speckle.d*

  # change nodata value use (i.e. applies the nanmean etc. calculation in the next steps)
  sed -i 's|<NO_DATA_VALUE_USED>true</NO_DATA_VALUE_USED>|<NO_DATA_VALUE_USED>false</NO_DATA_VALUE_USED>|g' ${TMP_MT}/mt_stack.vv.db.speckle.dim

  SECONDS=0
  echo -ne " Calculating the maximum values from the VV polarized channels of the multi-temporal stack ... " &&
  bash ${SNAP_EXE} Stack-Averaging -x -SsourceProduct=${TMP_MT}/mt_stack.vv.db.speckle.dim -Pstatistic='Maximum' -t ${TMP_MT}/max.VV.dim >> ${LOG_MT}/log_mt_stacking 2>&1
  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
  [ $? -ne 0 ] && return ${ERR_SPECKLE}

  SECONDS=0
  echo -ne " Calculating the minimum values from the VV polarized channels of the multi-temporal stack ... " &&
  bash ${SNAP_EXE} Stack-Averaging -x -SsourceProduct=${TMP_MT}/mt_stack.vv.db.speckle.dim -Pstatistic='Minimum' -t ${TMP_MT}/min.VV.dim >> ${LOG_MT}/log_mt_stacking 2>&1
  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
  [ $? -ne 0 ] && return ${ERR_SPECKLE}

  SECONDS=0
  echo -ne " Calculating the coefficient of variation from the VV polarized channels of the multi-temporal stack ... " &&
  bash ${SNAP_EXE} Stack-Averaging -x -SsourceProduct=${TMP_MT}/mt_stack.vv.db.speckle.dim -Pstatistic='Coefficient of Variation' -t ${TMP_MT}/cof_var.VV.dim >> ${LOG_MT}/log_mt_stacking 2>&1
  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
  [ $? -ne 0 ] && return ${ERR_SPECKLE}

  SECONDS=0
  echo -ne " Create the minimum extent mask  ..." &&
  bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_MT_create_mask.xml -x -Pfilelist=${TMP_MT}/max.VV.dim,${TMP_MT}/min.VV.dim -Poutput=${TMP_MT}/mask >> ${LOG_MT}/log_mt_stacking 2>&1
  gdal_trace_outline ${TMP_MT}/mask.data/mask.img -ndv 0 -no-donuts -out-cs ll -ogr-out ${TMP_MT}/extent.shp >> ${LOG_MT}/log_mt_stacking 2>&1
  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
  rm -rf ${TMP_MT}/mask.d* ${TMP_MT}/min.VV.d* ${TMP_MT}/max.VV.d*

  # create output folders.
  mkdir -p ${OUT_STACK_MT}/MT_metrics
  mkdir -p ${OUT_STACK_MT}/Timeseries
  mkdir -p ${OUT_STACK_MT}/Timeseries/Thumbnails

  # create intersect of image extent and AOI
  EXTENT="${TMP_MT}/extent.shp"
  CROPLINE=${OUT_STACK_MT}/cropline.shp
  intersect_shp ${EXTENT} ${AOI_MT} ${CROPLINE} >> ${LOG_MT}/log_mt_stacking 2>&1

  #-------------COV-------------------------------
  if [ ${ODATATYPE} = "UInt16" ]; then

    SECONDS=0
    echo -ne " Scaling the Gamma0 VV coefficient of variation layer to 16 bit (0.000001 to 0.07) ..."
    gdal_translate -ot "UInt16" -projwin $(ogr_extent ${CROPLINE}) -scale 0.000001 0.07 1 65536 ${TMP_MT}/cof_var.VV.data/Gamma0_VV.img ${TMP_MT}/Gamma0_VV_coef_of_var.16bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1
    rm -rf ${TMP_MT}/cof_var.VV.d*

    # replace all zeros to one to avoid outlier removal from rescaling
    ost_replace_values.py -i ${TMP_MT}/Gamma0_VV_coef_of_var.16bit.tif -o ${TMP_MT}/Gamma0_VV_coef_of_var.16bit.ones.tif -r 0 -n 1 >> ${LOG_MT}/log_mt_stacking 2>&1
    rm -f ${TMP_MT}/Gamma0_VV_coef_of_var.16bit.tif

    # cut to the actual extent of interest coming from the intersect above
    gdalwarp -overwrite -co "COMPRESS=LZW" -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${TMP_MT}/Gamma0_VV_coef_of_var.16bit.ones.tif ${OUT_STACK_MT}/MT_metrics/05_Gamma0.VV.cov.tif >> ${LOG_MT}/log_mt_stacking 2>&1
    rm -f ${TMP_MT}/Gamma0_VV_coef_of_var.16bit.ones.tif
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

  elif [ ${ODATATYPE} = "UInt8" ]; then

    SECONDS=0
    echo -ne " Scaling the Gamma0 VV coefficient of variation layer to 8 bit (0.000001 to 0.07) ..."
    gdal_translate -ot "Byte" -projwin $(ogr_extent ${CROPLINE}) -scale 0.000001 0.07 1 255 ${TMP_MT}/cof_var.VV.data/Gamma0_VV.img ${TMP_MT}/Gamma0_VV_coef_of_var.8bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1
    rm -rf ${TMP_MT}/cof_var.VV.d*

    # replace all zeros to one to avoid outlier removal from rescaling
    ost_replace_values.py -i ${TMP_MT}/Gamma0_VV_coef_of_var.8bit.tif -o ${TMP_MT}/Gamma0_VV_coef_of_var.8bit.ones.tif -r 0 -n 1 >> ${LOG_MT}/log_mt_stacking 2>&1
    rm -f ${TMP_MT}/Gamma0_VV_coef_of_var.8bit.tif

    # cut to the actual extent of interest coming from the intersect above
    gdalwarp -overwrite -co "COMPRESS=LZW" -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${TMP_MT}/Gamma0_VV_coef_of_var.8bit.ones.tif ${OUT_STACK_MT}/MT_metrics/05_Gamma0.VV.cov.tif >> ${LOG_MT}/log_mt_stacking 2>&1
    rm -f ${TMP_MT}/Gamma0_VV_coef_of_var.8bit.ones.tif
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

  elif [ ${ODATATYPE} = "Float32" ]; then

    echo -ne " Cropping the Gamma0 VV coefficient of variation layer to the minimum extent ..."
    SECONDS=0
    gdalwarp -overwrite -co "COMPRESS=LZW" -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${TMP_MT}/cof_var.VV.data/Gamma0_VV.img \
             ${OUT_STACK_MT}/MT_metrics/05_Gamma0.VV.cov.tif >> ${LOG_MT}/log_mt_stacking 2>&1
    rm -rf ${TMP_MT}/cof_var.VV.d*
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

  fi
    #-------------COV-------------------------------

  for file in $(ls -1 ${TMP_MT}/mt_stack.vv.db.speckle.data/*img); do

      DATE=`basename $(echo $file) | awk -F "_" '{print $4}'`
      date -d ${DATE} +%Y%m%d >> ${TMP_MT}/tmp.date
      echo $file >> ${TMP_MT}/tmp.filename

  done

  paste ${TMP_MT}/tmp.date ${TMP_MT}/tmp.filename >> ${TMP_MT}/tmp.date.filename
  sort -g ${TMP_MT}/tmp.date.filename >> ${TMP_MT}/tmp.date.filename.sorted

  i=1
  while read line; do
      #DATE=`basename $(echo $file) | awk -F "_" '{print $4}'`
      DATE=$(echo $line | awk '{print $1}')
      file=$(echo $line | awk '{print $2}')

    if [ ${ODATATYPE} = "UInt16" ]; then

      SECONDS=0
      echo -ne " Scaling ${DATE} layer to 16 bit (-25 dB to 5dB) ..."
      gdal_translate -ot "UInt16" -projwin $(ogr_extent ${CROPLINE}) -scale -25 5 1 65536 ${file} ${TMP_MT}/${DATE}.16bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1

      # replace all zeros to one to avoid outlier removal from rescaling
      ost_replace_values.py -i ${TMP_MT}/${DATE}.16bit.tif -o ${TMP_MT}/${DATE}.16bit.ones.tif -r 0 -n 1 >> ${LOG_MT}/log_mt_stacking 2>&1
      rm -f ${TMP_MT}/${DATE}.16bit.tif

      # cut to the actual extent of interest coming from the intersect above
      gdalwarp -overwrite -co "COMPRESS=LZW" -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${TMP_MT}/${DATE}.16bit.ones.tif ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.16bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1
      echo ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.16bit.tif >> ${TMP_MT}/ts_vrt_list.txt
      duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
      rm -f ${TMP_MT}/${DATE}.16bit.ones.tif

      if [ ${POL_MODE_MT} == VV ];then
        SECONDS=0
        echo -ne " Creating a thumbnail file for the acquisition of ${DATE} ..."
        gdal_contrast_stretch -ndv 0 -percentile-range 0.01 0.99 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.16bit.tif ${TMP_MT}/${i}_${DATE}.VV.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        # create jpg
        gdal_translate -of JPEG -outsize 20% 20% -a_nodata 0 ${TMP_MT}/${i}_${DATE}.VV.TN.tif ${TMP_MT}/${i}_${DATE}.VV.TN.jpg >> ${LOG_MT}/log_mt_stacking 2>&1
        # get width of jpeg
        WIDTH_TN=$(identify -format %w ${TMP_MT}/${i}_${DATE}.VV.TN.jpg)
        HEIGHT_TN=$(identify -format %h ${TMP_MT}/${i}_${DATE}.VV.TN.jpg)
        HEIGHT_LABEL=$(expr $HEIGHT_TN / 15)
        # add annotation with date
        convert -background '#0008' -fill white -gravity center -size ${WIDTH_TN}x${HEIGHT_LABEL} caption:"${DATE}" \
                ${TMP_MT}/${i}_${DATE}.VV.TN.jpg +swap -gravity north -composite ${TMP_MT}/${i}_${DATE}.VV.TN.jpg
        # create a tif thumbnail for visualization in sepal
        gdal_translate -outsize 20% 20% -a_nodata 0 ${TMP_MT}/${i}_${DATE}.VV.TN.tif ${OUT_STACK_MT}/Timeseries/Thumbnails/${i}_${DATE}.VV.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
      fi

    elif [ ${ODATATYPE} = "UInt8" ]; then

      SECONDS=0
      echo -ne " Scaling ${DATE} layer to 8 bit (-25 dB to 5dB) ..."
      gdal_translate -ot "Byte" -projwin $(ogr_extent ${CROPLINE}) -scale -25 5 1 255 ${file} ${TMP_MT}/${DATE}.8bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1
      rm -f ${TMP_MT}/mt-metrics_ssv.data/Gamma0_VV.img ${TMP_MT}/mt-metrics_ssv.data/Gamma0_VV.hdr

      # replace all zeros to one to avoid outlier removal from rescaling
      ost_replace_values.py -i ${TMP_MT}/${DATE}.8bit.tif -o ${TMP_MT}/${DATE}.8bit.ones.tif -r 0 -n 1 >> ${LOG_MT}/log_mt_stacking 2>&1
      rm -f ${TMP_MT}/${DATE}.8bit.tif

      # cut to the actual extent of interest coming from the intersect above
      gdalwarp -overwrite -co "COMPRESS=LZW" -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${TMP_MT}/${DATE}.8bit.ones.tif ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.8bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1
      # create a list of files fo later vrt creation
      echo ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.8bit.tif >> ${TMP_MT}/ts_vrt_list.txt
      duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
      rm -f ${TMP_MT}/${DATE}.8bit.ones.tif

      if [ ${POL_MODE_MT} == VV ];then
        SECONDS=0
        echo -ne " Creating a thumbnail file for the acquisition of ${DATE} ..."
        gdal_translate -of JPEG -outsize 20% 20% -a_nodata 0 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.8bit.tif ${TMP_MT}/${i}_${DATE}.VV.TN.jpg >> ${LOG_MT}/log_mt_stacking 2>&1
        # get width of jpeg
        WIDTH_TN=$(identify -format %w ${TMP_MT}/${i}_${DATE}.VV.TN.jpg)
        HEIGHT_TN=$(identify -format %h ${TMP_MT}/${i}_${DATE}.VV.TN.jpg)
        HEIGHT_LABEL=$(expr $HEIGHT_TN / 15)
        # add annotation with date
        convert -background '#0008' -fill white -gravity center -size ${WIDTH_TN}x${HEIGHT_LABEL} caption:"${DATE}" ${TMP_MT}/${i}_${DATE}.VV.TN.jpg +swap -gravity north -composite ${TMP_MT}/${i}_${DATE}.VV.TN.jpg
        # create a tif thumbnail for visualization in sepal
        gdal_translate -outsize 20% 20% -a_nodata 0 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.8bit.tif ${OUT_STACK_MT}/Timeseries/Thumbnails/${i}_${DATE}.VV.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
      fi

    elif [ ${ODATATYPE} = "Float32" ]; then

      SECONDS=0
      echo -ne " Cropping ${DATE} to common extent and cut by AOI ..."
      gdalwarp -overwrite -co "COMPRESS=LZW"  -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${file} ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.tif >> ${LOG_MT}/log_mt_stacking 2>&1
      echo ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.tif >> ${TMP_MT}/ts_vrt_list.txt
      duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

      if [ ${POL_MODE_MT} == VV ];then
        echo -ne " Creating a thumbnail file for the acquisition of ${DATE} ..."
        gdal_contrast_stretch -ndv 0 -percentile-range 0.01 0.99 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.tif ${TMP_MT}/${i}_${DATE}.VV.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        # create jpg
        gdal_translate -of JPEG -outsize 20% 20% -a_nodata 0 ${TMP_MT}/${i}_${DATE}.VV.TN.tif ${TMP_MT}/${i}_${DATE}.VV.TN.jpg >> ${LOG_MT}/log_mt_stacking 2>&1
        # get width of jpeg
        WIDTH_TN=$(identify -format %w ${TMP_MT}/${i}_${DATE}.VV.TN.jpg)
        HEIGHT_TN=$(identify -format %h ${TMP_MT}/${i}_${DATE}.VV.TN.jpg)
        HEIGHT_LABEL=$(expr $HEIGHT_TN / 15)
        # add annotation with date
        convert -background '#0008' -fill white -gravity center -size ${WIDTH_TN}x${HEIGHT_LABEL} caption:"${DATE}" \
                ${TMP_MT}/${i}_${DATE}.VV.TN.jpg +swap -gravity north -composite ${TMP_MT}/${i}_${DATE}.VV.TN.jpg
        # create a tif thumbnail for visualization in sepal
        gdal_translate -outsize 20% 20% -a_nodata 0 ${TMP_MT}/${i}_${DATE}.VV.TN.tif ${OUT_STACK_MT}/Timeseries/Thumbnails/${i}_${DATE}.VV.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
      fi
    fi

    i=$(expr $i + 1)
  done < ${TMP_MT}/tmp.date.filename.sorted

  # removing original snap files
  rm -rf ${TMP_MT}/mt_stack.vv.db.speckle.d* ${TMP_MT}/tmp*

  # create a virtual raster
  gdalbuildvrt -separate -srcnodata 0 ${OUT_STACK_MT}/Timeseries/timeseries.VV.vrt $(cat ${TMP_MT}/ts_vrt_list.txt | tr "\n" " ")  >> ${LOG_MT}/log_mt_stacking 2>&1
  rm -f ${TMP_MT}/ts_vrt_list.txt

  if [ ${POL_MODE_MT} == VV ];then

    # Create a time-series animation
    REC_DIR=${PWD}
    cd ${TMP_MT}
    convert -delay 100 -loop 10 $(ls -1 *.VV.TN.jpg | sort -n) ${OUT_STACK_MT}/Timeseries/time_animation.gif  >> ${LOG_MT}/log_mt_stacking 2>&1
    cd ${REC_DIR}
    rm -f ${TMP_MT}/*.VV.TN.jpg

    #SECONDS=0
    #echo -ne " Calculating temporal percentiles ..."
    #ost_mt_percentiles.py -i ${OUT_STACK_MT}/Timeseries/timeseries.VV.vrt -o ${OUT_STACK_MT}/MT_metrics/Gamma0.VV  >> ${LOG_MT}/log_mt_stacking 2>&1
    #mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.p90.tif ${OUT_STACK_MT}/MT_metrics/01_Gamma0.VV.p90.tif
    #mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.p10.tif ${OUT_STACK_MT}/MT_metrics/02_Gamma0.VV.p10.tif
    #mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.pDiff.tif ${OUT_STACK_MT}/MT_metrics/03_Gamma0.VV.pDiff.tif
    #gdalbuildvrt -separate -srcnodata 0 ${OUT_STACK_MT}/MT_metrics/Percentile.VV.vrt ${OUT_STACK_MT}/MT_metrics/01_Gamma0.VV.p90.tif ${OUT_STACK_MT}/MT_metrics/02_Gamma0.VV.p10.tif \
  #                                      ${OUT_STACK_MT}/MT_metrics/03_Gamma0.VV.pDiff.tif  >> ${LOG_MT}/log_mt_stacking 2>&1
  #  duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

    SECONDS=0
    echo -ne " Calculating multi-temporal metrics ..."
    ost_mt_metrics.py -i ${OUT_STACK_MT}/Timeseries/timeseries.VV.vrt -o ${OUT_STACK_MT}/MT_metrics/Gamma0.VV  >> ${LOG_MT}/log_mt_stacking 2>&1
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.avg.tif ${OUT_STACK_MT}/MT_metrics/01_Gamma0.VV.avg.tif
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.min.tif ${OUT_STACK_MT}/MT_metrics/02_Gamma0.VV.min.tif
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.max.tif ${OUT_STACK_MT}/MT_metrics/03_Gamma0.VV.max.tif
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.std.tif ${OUT_STACK_MT}/MT_metrics/04_Gamma0.VV.std.tif
    #mv ${OUT_STACK_MT}/MT_metrics/05_Gamma0_VV_coef_of_var.16bit.tif ${OUT_STACK_MT}/MT_metrics/05_Gamma0.VV.cov.tif
    gdalbuildvrt -separate -srcnodata 0 ${OUT_STACK_MT}/MT_metrics/Mt_metrics.VV.vrt ${OUT_STACK_MT}/MT_metrics/01_Gamma0.VV.avg.tif ${OUT_STACK_MT}/MT_metrics/02_Gamma0.VV.min.tif ${OUT_STACK_MT}/MT_metrics/03_Gamma0.VV.max.tif \
                                        ${OUT_STACK_MT}/MT_metrics/04_Gamma0.VV.std.tif ${OUT_STACK_MT}/MT_metrics/05_Gamma0.VV.cov.tif  >> ${LOG_MT}/log_mt_stacking 2>&1
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
  fi

  if [ ${POL_MODE_MT} == VH ];then

    SECONDS=0
    echo -ne " Applying the multi-temporal speckle filter to the VH polarized channels of the multi-temporal stack ... " &&
    bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_MT_Speckle.xml -x -Pinput=${TMP_MT}/mt_stack.coreg.dim -Ppol=VH -Pthreshold=5 -Poutput=${TMP_MT}/mt_stack.vh.speckle.dim >> ${LOG_MT}/log_mt_stacking 2>&1
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_SPECKLE}
    rm -rf ${TMP_MT}/mt_stack.coreg.d*

    for MTs in `ls -1 ${TMP_MT}/mt_stack.vh.speckle.data/*img`;do
      basename ${MTs} | rev | cut -c 5- | rev >> ${TMP_MT}/tmp_list
    done

    BANDLIST=$(cat ${TMP_MT}/tmp_list | tr '\n' ',' | rev | cut -c 2- | rev)
    rm -f ${TMP_MT}/tmp_list

    SECONDS=0
    echo -ne " Converting linear ot dB scale ... " &&
    bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_lin_to_db.xml -x -Pinput=${TMP_MT}/mt_stack.vh.speckle.dim -Pbandlist=${BANDLIST} -Poutput=${TMP_MT}/mt_stack.vh.db.speckle.dim >> ${LOG_MT}/log_mt_stacking 2>&1
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_SPECKLE}
    rm -rf ${TMP_MT}/mt_stack.vh.speckle.d*

    SECONDS=0
    echo -ne " Calculating the Coefficient of Variation for the VH polarized channels of the multi-temporal stack ... " &&
    bash ${SNAP_EXE} Stack-Averaging -x -SsourceProduct=${TMP_MT}/mt_stack.vh.db.speckle.dim -Pstatistic='Coefficient of Variation' -t ${TMP_MT}/cof_var.VH.dim >> ${LOG_MT}/log_mt_stacking 2>&1
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_SPECKLE}

    #-------------COV-------------------------------

    if [ ${ODATATYPE} = "UInt16" ]; then

      SECONDS=0
      echo " Scaling the Gamma0 VH coefficient of variation layer to 16 bit (0.000001 to 0.07) ..."
      gdal_translate -ot "UInt16" -projwin $(ogr_extent ${CROPLINE}) -scale 0.000001 0.07 1 65536 ${TMP_MT}/cof_var.VH.data/Gamma0_VH.img ${TMP_MT}/Gamma0_VH_coef_of_var.16bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1
      rm -rf ${TMP_MT}/cof_var.VH.d*

      # replace all zeros to one to avoid outlier removal from rescaling
      ost_replace_values.py -i ${TMP_MT}/Gamma0_VH_coef_of_var.16bit.tif -o ${TMP_MT}/Gamma0_VH_coef_of_var.16bit.ones.tif -r 0 -n 1 >> ${LOG_MT}/log_mt_stacking 2>&1
      rm -f ${TMP_MT}/Gamma0_VH_coef_of_var.16bit.tif

      # cut to the actual extent of interest coming from the intersect above
      gdalwarp -overwrite -co "COMPRESS=LZW" -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${TMP_MT}/Gamma0_VH_coef_of_var.16bit.ones.tif ${OUT_STACK_MT}/MT_metrics/10_Gamma0.VH.cov.tif >> ${LOG_MT}/log_mt_stacking 2>&1
      rm -f ${TMP_MT}/Gamma0_VH_coef_of_var.16bit.ones.tif
      duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

    elif [ ${ODATATYPE} = "UInt8" ]; then

      SECONDS=0
      echo " Scaling the Gamma0 VH coefficient of variation layer to 8 bit (0.000001 to 0.07) ..."
      gdal_translate -ot "Byte" -projwin $(ogr_extent ${CROPLINE}) -scale 0.000001 0.07 1 255 ${TMP_MT}/cof_var.VH.data/Gamma0_VH.img ${TMP_MT}/Gamma0_VH_coef_of_var.8bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1
      rm -rf ${TMP_MT}/cof_var.VH.d*

      # replace all zeros to one to avoid outlier removal from rescaling
      ost_replace_values.py -i ${TMP_MT}/Gamma0_VH_coef_of_var.8bit.tif -o ${TMP_MT}/Gamma0_VH_coef_of_var.8bit.ones.tif -r 0 -n 1 >> ${LOG_MT}/log_mt_stacking 2>&1
      rm -f ${TMP_MT}/Gamma0_VH_coef_of_var.8bit.tif

      # cut to the actual extent of interest coming from the intersect above
      gdalwarp -overwrite -co "COMPRESS=LZW" -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${TMP_MT}/Gamma0_VH_coef_of_var.8bit.ones.tif ${OUT_STACK_MT}/MT_metrics/10_Gamma0.VH.cov.tif >> ${LOG_MT}/log_mt_stacking 2>&1
      rm -f ${TMP_MT}/Gamma0_VH_coef_of_var.8bit.ones.tif
      duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

    elif [ ${ODATATYPE} = "Float32" ]; then

      gdalwarp -overwrite -co "COMPRESS=LZW" -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${TMP_MT}/cof_var.VH.data/Gamma0_VH.img ${OUT_STACK_MT}/MT_metrics/10_Gamma0.VH.cov.tif >> ${LOG_MT}/log_mt_stacking 2>&1
      rm -rf ${TMP_MT}/cof_var.VH.d*
      duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

    fi

      #-------------COV-------------------------------


    for file in $(ls -1 ${TMP_MT}/mt_stack.vh.db.speckle.data/*img); do

        DATE=`basename $(echo $file) | awk -F "_" '{print $4}'`
        date -d ${DATE} +%Y%m%d >> ${TMP_MT}/tmp.date
        echo $file >> ${TMP_MT}/tmp.filename

    done

    paste ${TMP_MT}/tmp.date ${TMP_MT}/tmp.filename >> ${TMP_MT}/tmp.date.filename
    sort -g ${TMP_MT}/tmp.date.filename >> ${TMP_MT}/tmp.date.filename.sorted

    i=1
    while read line; do
      #DATE=`basename $(echo $file) | awk -F "_" '{print $4}'`
      DATE=$(echo $line | awk '{print $1}')
      file=$(echo $line | awk '{print $2}')

      if [ ${ODATATYPE} = "UInt16" ]; then

        SECONDS=0
        echo -ne " Scaling ${DATE} layer to 16 bit (-25 dB to 5dB) ..."
        gdal_translate -ot "UInt16" -projwin $(ogr_extent ${CROPLINE}) -scale -25 5 1 65536 ${file} ${TMP_MT}/${DATE}.VH.16bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1

        # replace all zeros to one to avoid outlier removal from rescaling
        ost_replace_values.py -i ${TMP_MT}/${DATE}.VH.16bit.tif -o ${TMP_MT}/${DATE}.VH.16bit.ones.tif -r 0 -n 1 >> ${LOG_MT}/log_mt_stacking 2>&1
        rm -f ${TMP_MT}/${DATE}.VH.16bit.tif

        # cut to the actual extent of interest coming from the intersect above
        gdalwarp -overwrite -co "COMPRESS=LZW" -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${TMP_MT}/${DATE}.VH.16bit.ones.tif \
                 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VH.16bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        rm -f ${TMP_MT}/${DATE}.VH.16bit.ones.tif
        echo ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VH.16bit.tif >> ${TMP_MT}/ts_vrt_list.VH.txt
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

        echo -ne " Creating a thumbnail file for the acquisition of ${DATE} ..."
        gdal_contrast_stretch -ndv 0 -percentile-range 0.02 0.98 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.16bit.tif ${TMP_MT}/${i}_${DATE}.VV.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        gdal_contrast_stretch -ndv 0 -percentile-range 0.02 0.98 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VH.16bit.tif ${TMP_MT}/${i}_${DATE}.VH.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        gdal_calc.py -A ${TMP_MT}/${i}_${DATE}.VV.TN.tif -B ${TMP_MT}/${i}_${DATE}.VH.TN.tif --calc="A-B" --type=Byte --outfile=${TMP_MT}/${i}_${DATE}.VVVH.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1

        gdal_merge.py -separate -co "COMPRESS=LZW" -n 0 -o ${TMP_MT}/${i}_${DATE}.RGB.TN.tif \
                      ${TMP_MT}/${i}_${DATE}.VV.TN.tif ${TMP_MT}/${i}_${DATE}.VH.TN.tif ${TMP_MT}/${i}_${DATE}.VVVH.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        # create jpg
        gdal_translate -of JPEG -outsize 20% 20% -a_nodata 0 ${TMP_MT}/${i}_${DATE}.RGB.TN.tif ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg >> ${LOG_MT}/log_mt_stacking 2>&1

        # get width of jpeg
        WIDTH_TN=$(identify -format %w ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg)
        HEIGHT_TN=$(identify -format %h ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg)
        HEIGHT_LABEL=$(expr $HEIGHT_TN / 15)
        # add annotation with date
        convert -background '#0008' -fill white -gravity center -size ${WIDTH_TN}x${HEIGHT_LABEL} caption:"${DATE}" \
                ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg +swap -gravity north -composite ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg
        # create a tif thumbnail for visualization in sepal
        gdal_translate -outsize 20% 20% -a_nodata 0 ${TMP_MT}/${i}_${DATE}.RGB.TN.tif ${OUT_STACK_MT}/Timeseries/Thumbnails/${i}_${DATE}.RGB.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

      elif [ ${ODATATYPE} = "UInt8" ]; then

        SECONDS=0
        echo -ne " Scaling ${DATE} layer to 8 bit (-25 dB to 5dB) ..."
        gdal_translate -ot "Byte" -projwin $(ogr_extent ${CROPLINE}) -scale -25 5 1 255 ${file} ${TMP_MT}/${DATE}.VH.8bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1

        # replace all zeros to one to avoid outlier removal from rescaling
        ost_replace_values.py -i ${TMP_MT}/${DATE}.VH.8bit.tif -o ${TMP_MT}/${DATE}.VH.8bit.ones.tif -r 0 -n 1 >> ${LOG_MT}/log_mt_stacking 2>&1
        rm -f ${TMP_MT}/${DATE}.8bit.tif

        # cut to the actual extent of interest coming from the intersect above
        gdalwarp -overwrite -co "COMPRESS=LZW" -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${TMP_MT}/${DATE}.VH.8bit.ones.tif ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VH.8bit.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        rm -f ${TMP_MT}/${DATE}.VH.8bit.ones.tif
        echo ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VH.8bit.tif >> ${TMP_MT}/ts_vrt_list.VH.txt
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

        echo -ne " Creating a thumbnail file for the acquisition of ${DATE} ..."
        gdal_contrast_stretch -ndv 0 -percentile-range 0.02 0.98 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.8bit.tif ${TMP_MT}/${i}_${DATE}.VV.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        gdal_contrast_stretch -ndv 0 -percentile-range 0.02 0.98 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VH.8bit.tif ${TMP_MT}/${i}_${DATE}.VH.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        gdal_calc.py -A ${TMP_MT}/${i}_${DATE}.VV.TN.tif -B ${TMP_MT}/${i}_${DATE}.VH.TN.tif --calc="A-B" --type=Byte --outfile=${TMP_MT}/${i}_${DATE}.VVVH.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1

        gdal_merge.py -separate -co "COMPRESS=LZW" -a_nodata 0 -o ${TMP_MT}/${i}_${DATE}.RGB.TN.tif \
                      ${TMP_MT}/${i}_${DATE}.VV.TN.tif ${TMP_MT}/${i}_${DATE}.VH.TN.tif ${TMP_MT}/${i}_${DATE}.VVVH.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        # create jpg
        gdal_translate -of JPEG -outsize 20% 20% -a_nodata 0 ${TMP_MT}/${i}_${DATE}.RGB.TN.tif ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg >> ${LOG_MT}/log_mt_stacking 2>&1

        # get width of jpeg
        WIDTH_TN=$(identify -format %w ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg)
        HEIGHT_TN=$(identify -format %h ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg)
        HEIGHT_LABEL=$(expr $HEIGHT_TN / 15)
        # add annotation with date
        convert -background '#0008' -fill white -gravity center -size ${WIDTH_TN}x${HEIGHT_LABEL} caption:"${DATE}" \
                ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg +swap -gravity north -composite ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg

        # create a tif thumbnail for visualization in sepal
        gdal_translate -outsize 20% 20% -a_nodata 0 ${TMP_MT}/${i}_${DATE}.RGB.TN.tif ${OUT_STACK_MT}/Timeseries/Thumbnails/${i}_${DATE}.RGB.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

      elif [ ${ODATATYPE} = "Float32" ]; then

        SECONDS=0
        echo -ne " Cropping ${DATE} to common extent and cut by AOI ..."
        gdalwarp -overwrite -co "COMPRESS=LZW"  -dstnodata "0" -multi -wm "4096" -cutline ${CROPLINE} -crop_to_cutline ${file} ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VH.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        echo ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VH.tif >> ${TMP_MT}/ts_vrt_list.VH.txt
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

        # create jpgs for gif animation
        echo -ne " Creating a thumbnail file for the acquisition of ${DATE} ..."
        gdal_contrast_stretch -ndv 0 -percentile-range 0.02 0.98 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VV.tif ${TMP_MT}/${i}_${DATE}.VV.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        gdal_contrast_stretch -ndv 0 -percentile-range 0.02 0.98 ${OUT_STACK_MT}/Timeseries/${i}_${DATE}.VH.tif ${TMP_MT}/${i}_${DATE}.VH.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        gdal_calc.py -A ${TMP_MT}/${i}_${DATE}.VV.TN.tif -B ${TMP_MT}/${i}_${DATE}.VH.TN.tif --calc="A-B" --type=Byte --outfile=${TMP_MT}/${i}_${DATE}.VVVH.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1

        gdal_merge.py -separate -co "COMPRESS=LZW" -a_nodata 0 -o ${TMP_MT}/${i}_${DATE}.RGB.TN.tif \
                      ${TMP_MT}/${i}_${DATE}.VV.TN.tif ${TMP_MT}/${i}_${DATE}.VH.TN.tif ${TMP_MT}/${i}_${DATE}.VVVH.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        # create jpg
        gdal_translate -of JPEG -outsize 20% 20% -a_nodata 0 ${TMP_MT}/${i}_${DATE}.RGB.TN.tif ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg >> ${LOG_MT}/log_mt_stacking 2>&1

        # get width of jpeg
        WIDTH_TN=$(identify -format %w ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg)
        HEIGHT_TN=$(identify -format %h ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg)
        HEIGHT_LABEL=$(expr $HEIGHT_TN / 15)
        # add annotation with date
        convert -background '#0008' -fill white -gravity center -size ${WIDTH_TN}x${HEIGHT_LABEL} caption:"${DATE}" \
                ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg +swap -gravity north -composite ${TMP_MT}/${i}_${DATE}.RGB.TN.jpg

        # create a tif thumbnail for visualization in sepal
        gdal_translate -outsize 20% 20% -a_nodata 0 ${TMP_MT}/${i}_${DATE}.RGB.TN.tif ${OUT_STACK_MT}/Timeseries/Thumbnails/${i}_${DATE}.RGB.TN.tif >> ${LOG_MT}/log_mt_stacking 2>&1
        duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
      fi

    i=$(expr $i + 1)
  done < ${TMP_MT}/tmp.date.filename.sorted

    # remvoing original snap files
    rm -rf ${TMP_MT}/mt_stack.vh.db.speckle.d*

    # Create a time-series animation
    REC_DIR=${PWD}
    cd ${TMP_MT}
    convert -delay 100 -loop 10 $(ls -1 *.RGB.TN.jpg | sort -g) ${OUT_STACK_MT}/Timeseries/time_animation.gif  >> ${LOG_MT}/log_mt_stacking 2>&1
    cd ${REC_DIR}
    #rm -f ${TMP_MT}/*.RGB.TN.jpg

    # create a virtual raster
    gdalbuildvrt -separate -srcnodata 0 ${OUT_STACK_MT}/Timeseries/timeseries.VH.vrt $(cat ${TMP_MT}/ts_vrt_list.VH.txt | tr "\n" " ")  >> ${LOG_MT}/log_mt_stacking 2>&1
    rm -f ${TMP_MT}/ts_vrt_list.txt

    #SECONDS=0
    #echo -ne " Calculating temporal percentiles for VV polarization ..."
    #ost_mt_percentiles.py -i ${OUT_STACK_MT}/Timeseries/timeseries.VV.vrt -o ${OUT_STACK_MT}/MT_metrics/Gamma0.VV  >> ${LOG_MT}/log_mt_stacking 2>&1
    #mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.p90.tif ${OUT_STACK_MT}/MT_metrics/01_Gamma0.VV.p90.tif
    #mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.p10.tif ${OUT_STACK_MT}/MT_metrics/02_Gamma0.VV.p10.tif
    #mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.pDiff.tif ${OUT_STACK_MT}/MT_metrics/03_Gamma0.VV.pDiff.tif
    #duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

    #SECONDS=0
    #echo -ne " Calculating temporal percentiles for VH polarization ..."
    #ost_mt_percentiles.py -i ${OUT_STACK_MT}/Timeseries/timeseries.VH.vrt -o ${OUT_STACK_MT}/MT_metrics/Gamma0.VH  >> ${LOG_MT}/log_mt_stacking 2>&1
    #mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VH.p90.tif ${OUT_STACK_MT}/MT_metrics/04_Gamma0.VH.p90.tif
    #mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VH.p10.tif ${OUT_STACK_MT}/MT_metrics/05_Gamma0.VH.p10.tif
    #mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VH.pDiff.tif ${OUT_STACK_MT}/MT_metrics/06_Gamma0.VH.pDiff.tif
    #duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

    #gdalbuildvrt -separate -srcnodata 0 ${OUT_STACK_MT}/MT_metrics/Percentile.VVVH.vrt ${OUT_STACK_MT}/MT_metrics/01_Gamma0.VV.p90.tif ${OUT_STACK_MT}/MT_metrics/02_Gamma0.VV.p10.tif \
    #                                      ${OUT_STACK_MT}/MT_metrics/03_Gamma0.VV.pDiff.tif  ${OUT_STACK_MT}/MT_metrics/04_Gamma0.VH.p90.tif ${OUT_STACK_MT}/MT_metrics/05_Gamma0.VH.p10.tif \
    #                                      ${OUT_STACK_MT}/MT_metrics/06_Gamma0.VH.pDiff.tif >> ${LOG_MT}/log_mt_stacking 2>&1

    SECONDS=0
    echo -ne " Calculating multi-temporal metrics for the VV polarization ..."
    ost_mt_metrics.py -i ${OUT_STACK_MT}/Timeseries/timeseries.VV.vrt -o ${OUT_STACK_MT}/MT_metrics/Gamma0.VV  >> ${LOG_MT}/log_mt_stacking 2>&1
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.avg.tif ${OUT_STACK_MT}/MT_metrics/01_Gamma0.VV.avg.tif
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.max.tif ${OUT_STACK_MT}/MT_metrics/02_Gamma0.VV.max.tif
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.min.tif ${OUT_STACK_MT}/MT_metrics/03_Gamma0.VV.min.tif
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VV.std.tif ${OUT_STACK_MT}/MT_metrics/04_Gamma0.VV.std.tif
    #mv ${OUT_STACK_MT}/MT_metrics/05_Gamma0_VV_coef_of_var.16bit.tif ${OUT_STACK_MT}/MT_metrics/05_Gamma0.VV.cov.tif
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

    SECONDS=0
    echo -ne " Calculating multi-temporal metrics for the VH polarization ..."
    ost_mt_metrics.py -i ${OUT_STACK_MT}/Timeseries/timeseries.VH.vrt -o ${OUT_STACK_MT}/MT_metrics/Gamma0.VH  >> ${LOG_MT}/log_mt_stacking 2>&1
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VH.avg.tif ${OUT_STACK_MT}/MT_metrics/06_Gamma0.VH.avg.tif
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VH.max.tif ${OUT_STACK_MT}/MT_metrics/07_Gamma0.VH.max.tif
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VH.min.tif ${OUT_STACK_MT}/MT_metrics/08_Gamma0.VH.min.tif
    mv ${OUT_STACK_MT}/MT_metrics/Gamma0.VH.std.tif ${OUT_STACK_MT}/MT_metrics/09_Gamma0.VH.std.tif
    duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

    gdalbuildvrt -separate -srcnodata 0 ${OUT_STACK_MT}/MT_metrics/Mt_metrics.VVVH.vrt ${OUT_STACK_MT}/MT_metrics/01_Gamma0.VV.avg.tif ${OUT_STACK_MT}/MT_metrics/02_Gamma0.VV.max.tif \
                                        ${OUT_STACK_MT}/MT_metrics/03_Gamma0.VV.min.tif ${OUT_STACK_MT}/MT_metrics/04_Gamma0.VV.std.tif ${OUT_STACK_MT}/MT_metrics/05_Gamma0.VV.cov.tif \
                                        ${OUT_STACK_MT}/MT_metrics/06_Gamma0.VH.avg.tif ${OUT_STACK_MT}/MT_metrics/07_Gamma0.VH.max.tif ${OUT_STACK_MT}/MT_metrics/08_Gamma0.VH.min.tif \
                                        ${OUT_STACK_MT}/MT_metrics/09_Gamma0.VH.std.tif ${OUT_STACK_MT}/MT_metrics/10_Gamma0.VH.cov.tif >> ${LOG_MT}/log_mt_stacking 2>&1
  fi

  echo "------------------------------------------------------------------------------------------------------"
  echo " Info: Succesfully created a stack of multi-temporal metrics. "
  echo "------------------------------------------------------------------------------------------------------"

}

function s1_rename_mt_stack() {
  if [ -z "$1" ]; then
    echo " Missing arguments. Syntax:"
    echo " s1_rename_mt_stack <stack basename> "
    return
  fi

  STACK_DIM=`readlink -f $1.dim`
  STACK_DATA=`readlink -f $1.data`

  sed -i 's|Gamma0_VV_2|Gamma0_VV_max|g' ${STACK_DIM}
  sed -i 's|Gamma0_VV_3|Gamma0_VV_min|g' ${STACK_DIM}
  sed -i 's|Gamma0_VV_4|Gamma0_VV_stddev|g' ${STACK_DIM}
  sed -i 's|Gamma0_VV_5|Gamma0_VV_coef_of_var|g' ${STACK_DIM}
  sed -i 's|\<Gamma0_VV\>|Gamma0_VV_mean|g' ${STACK_DIM}

  mv ${STACK_DATA}/Gamma0_VV.img ${STACK_DATA}/Gamma0_VV_mean.img
  mv ${STACK_DATA}/Gamma0_VV.hdr ${STACK_DATA}/Gamma0_VV_mean.hdr
  mv ${STACK_DATA}/Gamma0_VV_2.img ${STACK_DATA}/Gamma0_VV_max.img
  mv ${STACK_DATA}/Gamma0_VV_2.hdr ${STACK_DATA}/Gamma0_VV_max.hdr
  mv ${STACK_DATA}/Gamma0_VV_3.img ${STACK_DATA}/Gamma0_VV_min.img
  mv ${STACK_DATA}/Gamma0_VV_3.hdr ${STACK_DATA}/Gamma0_VV_min.hdr
  mv ${STACK_DATA}/Gamma0_VV_4.img ${STACK_DATA}/Gamma0_VV_stddev.img
  mv ${STACK_DATA}/Gamma0_VV_4.hdr ${STACK_DATA}/Gamma0_VV_stddev.hdr
  mv ${STACK_DATA}/Gamma0_VV_5.img ${STACK_DATA}/Gamma0_VV_coef_of_var.img
  mv ${STACK_DATA}/Gamma0_VV_5.hdr ${STACK_DATA}/Gamma0_VV_coef_of_var.hdr

  if echo ${STACK_DIM} | grep -q sdv ;then

    sed -i 's|Gamma0_VH_2|Gamma0_VH_max|g' ${STACK_DIM}
    sed -i 's|Gamma0_VH_3|Gamma0_VH_min|g' ${STACK_DIM}
    sed -i 's|Gamma0_VH_4|Gamma0_VH_stddev|g' ${STACK_DIM}
    sed -i 's|Gamma0_VH_5|Gamma0_VH_coef_of_var|g' ${STACK_DIM}
    sed -i 's|\<Gamma0_VH\>|Gamma0_VH_mean|g' ${STACK_DIM}

    mv ${STACK_DATA}/Gamma0_VH.img ${STACK_DATA}/Gamma0_VH_mean.img
    mv ${STACK_DATA}/Gamma0_VH.hdr ${STACK_DATA}/Gamma0_VH_mean.hdr
    mv ${STACK_DATA}/Gamma0_VH_2.img ${STACK_DATA}/Gamma0_VH_max.img
    mv ${STACK_DATA}/Gamma0_VH_2.hdr ${STACK_DATA}/Gamma0_VH_max.hdr
    mv ${STACK_DATA}/Gamma0_VH_3.img ${STACK_DATA}/Gamma0_VH_min.img
    mv ${STACK_DATA}/Gamma0_VH_3.hdr ${STACK_DATA}/Gamma0_VH_min.hdr
    mv ${STACK_DATA}/Gamma0_VH_4.img ${STACK_DATA}/Gamma0_VH_stddev.img
    mv ${STACK_DATA}/Gamma0_VH_4.hdr ${STACK_DATA}/Gamma0_VH_stddev.hdr
    mv ${STACK_DATA}/Gamma0_VH_5.img ${STACK_DATA}/Gamma0_VH_coef_of_var.img
    mv ${STACK_DATA}/Gamma0_VH_5.hdr ${STACK_DATA}/Gamma0_VH_coef_of_var.hdr
  fi
}
