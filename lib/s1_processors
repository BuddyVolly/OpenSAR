function s1_frame_import() {
    if [ -z "$3" ]; then 
    echo " Missing arguments. Syntax:"
    echo " s1_frame_import <input_file> <output_file> <log_dir>"
    return
    fi

    # source other helpers
    source ${OPENSARKIT}/lib/helpers_source

    # error codes
    ERR_IMPORT="Error during clean import of product"

    BASE=`basename $1`
    echo ""
    SECONDS=0
    echo -ne " Importing S1 GRD data file, applying the precise orbit file, removing thermal noise and applying the Refined Lee Speckle Filter ..." &&
    bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_AO_TNR_SPK.xml -x -Pinput=$1 -Poutput=$2 > $3/log_import \
    & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_IMPORT}

}

function s1_swath_import() {
    if [ -z "$4" ]; then 
    echo " Missing arguments. Syntax:"
    echo " s1_swath_preprocess <filelist> <output_file> <tmp_dir> <log_dir>"
    return
    fi

    # source other helpers
    source ${OPENSARKIT}/lib/helpers_source

    # error codes
    ERR_IMPORT="Error during clean import of product"
    ERR_BRD_NOISE="Error during border noise removal"
    ERR_TF="Error during Terrain Flattening"
    ERR_TF="Error during geometric terrain correction"

    NR_OF_FRAMES=`cat $1 | wc -l`
    j=1

    for LINE in `cat $1`;do
	  s1_info ${LINE}
	  BASE=`basename ${LINE}`
	  echo ""
          SECONDS=0
          echo -ne " Importing S1 GRD data file, applying the precise orbit file, removing thermal noise and apply speckle filtering (Refined Lee) ..." &&
          bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_AO_TNR_SPK.xml -x -Pinput=${LINE} -Poutput=$3/${BASE}-import.dim > $4/log_import \
          & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
          [ $? -ne 0 ] && return ${ERR_IMPORT}
	  echo " Finished import of Frame: $j/${NR_OF_FRAMES}"
	  j=`expr $j + 1`
    done

    if [ -e $4/${BASE}-import.data/Intensity_VH.img ];then

	    SECONDS=0
	    echo -ne " Assembling the products of the same swath ..." &&
	    bash $SNAP_EXE SliceAssembly -PselectedPolarisations=VV,VH $(ls -1 $3/*-import.dim.dim | tr '\n' ' ' | rev | cut -c 2- | rev) -t $2 \
	    & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
	    [ $? -ne 0 ] && return ${ERR_ASSEMBLE}
#	    rm -rf $4/*-import.dim.d*

    else

	    SECONDS=0
	    echo -ne " Assembling the products of the same swath ..." &&
            bash $SNAP_EXE SliceAssembly -PselectedPolarisations=VV $(ls -1 $3/*-import.dim.dim | tr '\n' ' ' | rev | cut -c 2- | rev) -t $2 \
	    & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
	    [ $? -ne 0 ] && return ${ERR_ASSEMBLE}
#	    rm -rf $4/*-import.dim.d*
#	    bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_slice_assembly.xml -x -Pfilelist=$(ls -1 $4/*-import.dim.dim | tr '\n' ' ' | rev | cut -c 2- | rev) -Poutput=$4/swath.dim 2>&1>/dev/null \
    fi
}

function s1_rtc_processing() {
    if [ -z "$7" ]; then 
    echo " Missing arguments. Syntax:"
    echo " s1_rtc_processing <input file> <output_file> <resolution> <ratio calculation> <db-scaling> <tmp_dir> <log_dir>"
    return
    fi

    BASE=`echo $1 | rev | cut -c 5- | rev`

    COLUMNS=`gdalinfo ${BASE}.data/Intensity_VV.img | grep "Size is" | awk '{print $3}' | sed s/,//g`
    LINES=`gdalinfo ${BASE}.data/Intensity_VV.img | grep "Size is" | awk '{print $4}'`
    NEW_WIDTH=`expr $COLUMNS - 1000`
    NEW_HEIGHT=`expr $LINES - 1000`

    if [ $3 == "MED_RES" ];then

    	SECONDS=0
	echo " Removing GRD border noise by deleting the outer 500 rows, calibrating to beta0, "
	echo -ne " applying the terrain flattening and multi-look by a factor of 3  ..." &&
	bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_RB_CAL_TF_ML3.xml -x -Pinput=$1 -Pwidth=${NEW_WIDTH} -Pheight=${NEW_HEIGHT} -Poutput=$6/TF \
    	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
	[ $? -ne 0 ] && return ${ERR_BRD_NOISE} 
   
        if [ -e $6/TF.data/Gamma0_VH.img ];then

		if [[ $4 == 1 && $5 == 1 ]];then # db scale + ratio

			SECONDS=0
	                echo -ne " Applying the geometric terrain correction, calculate the VV/VH Band Ratio and transform backscatter to decibel scale  ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TC_DB_Ratio.xml -x -Pinput=$6/TF.dim -Poutput=$6/TC_DB -PoutputRatio=$6/Ratio \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

			SECONDS=0
			echo -ne " Merging backscatter bands with ratio"
			bash ${SNAP_EXE} BandMerge -x $6/TC_DB.dim $4/Ratio.dim -t $2 \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_BM} 
			rm -rf $6/TC_DB.d* $6/Ratio.d*

		elif [[ $4 == 1 && $5 == 0 ]];then # ratio but no db scale

			SECONDS=0
	                echo -ne " Applying the geometric terrain correction, and calculate the VV/VH Band Ratio  ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TC_Ratio.xml -x -Pinput=$6/TF.dim -Poutput=$6/TC -PoutputRatio=$6/Ratio \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

			SECONDS=0
			echo -ne " Merging backscatter bands with ratio"
			bash ${SNAP_EXE} BandMerge -x $6/TC.dim $6/Ratio.dim -t $2 \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			rm -rf $6/TC.d* $6/Ratio.d*
		
		elif [[ $4 == 0 && $5 == 0 ]];then # neither db nor ratio calculation
	
			SECONDS=0
	                echo -ne " Applying the geometric terrain correction ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TC.xml -x -Pinput=$6/TF.dim -Poutput=$2 \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

		elif [[ $4 == 0 && $5 == 1 ]];then # db scaling but no ratio calculation

			SECONDS=0
	                echo -ne " Applying the geometric terrain correction and transform backscatter to decibel scale ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_30_TC_DB.xml -x -Pinput=$6/TF.dim -Poutput=$2 \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

		fi
		
	else # SSV 30m

		if [[ $5 == 1 ]];then # db scaling

			SECONDS=0
        	echo -ne " Applying the geometric terrain correction and transform backscatter to decibel scale  ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SSV_30_TC_DB.xml -x -Pinput=$6/TF.dim -Poutput=$2 \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

		else

			SECONDS=0 # no db-scaling
        	echo -ne " Applying the geometric terrain correction ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SSV_30_TC.xml -x -Pinput=$6/TF.dim -Poutput=$2 \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

		fi

	fi

    elif [ $3 == "HI_RES" ];then

    	SECONDS=0
	echo " Removing GRD border noise by deleting the outer 500 rows, calibrating to beta0, "
	echo -ne " applying the terrain flattening and multi-look by a factor of 3  ..." &&
	bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_RB_CAL_TF_noML.xml -x -Pinput=$1 -Pwidth=${NEW_WIDTH} -Pheight=${NEW_HEIGHT} -Poutput=$6/TF \
    	& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
	[ $? -ne 0 ] && return ${ERR_BRD_NOISE} 
        rm -rf $6/${BASE}-import.dim
	
        if [ -e $6/TF.data/Gamma0_VH.img ];then


		if [[ $4 == 1 && $5 == 1 ]];then # db scale + ratio

			SECONDS=0
	                echo -ne " applying the geometric terrain correction, calculate the VV/VH Band Ratio and transform backscatter to decibel scale  ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_TC_DB_Ratio.xml -x -Pinput=$6/TF.dim -Poutput=$6/TC_DB -PoutputRatio=$6/Ratio \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

			SECONDS=0
			echo -ne " Merging backscatter bands with ratio"
			bash ${SNAP_EXE} BandMerge -x $6/TC_DB.dim $6/Ratio.dim -t $2 \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			rm -rf $4/TC_DB.d* $6/Ratio.d*

		elif [[ $4 == 1 && $5 == 0 ]];then # ratio but no db scale
			
			SECONDS=0
	                echo -ne " Applying the geometric terrain correction, and calculate the VV/VH Band Ratio  ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_TC_Ratio.xml -x -Pinput=$6/TF.dim -Poutput=$6/TC -PoutputRatio=$6/Ratio \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

			SECONDS=0
			echo -ne " Merging backscatter bands with ratio ..."
			bash ${SNAP_EXE} BandMerge -x $6/TC.dim $6/Ratio.dim -t $2 \
			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			rm -rf $6/TC.d* $4/Ratio.d*

		elif [[ $4 == 0 && $5 == 0 ]];then #neither db nor ratio calculation
	
			SECONDS=0
	                echo -ne " Applying the geometric terrain correction ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_TC.xml -x -Pinput=$6/TF.dim -Poutput=$2 \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

		elif [[ $4 == 0 && $5 == 1 ]];then #do db scaling but no ratio calculation

			SECONDS=0
	                echo -ne " Applying the geometric terrain correction and transform backscatter to decibel scale ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SDV_10_TC_DB.xml -x -Pinput=$6/TF.dim -Poutput=$2 \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

		fi

	else # SSV 10m case

		if [[ $5 == 1 ]];then

			SECONDS=0
            	    echo -ne " Applying the geometric terrain correction and transform backscatter to decibel scale ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SSV_10_TC_DB.xml -x -Pinput=$6/TF.dim -Poutput=$2 \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

		else
			
			SECONDS=0
        	        echo -ne " Applying the geometric terrain correction ..." &&
			bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_SSV_10_TC.xml -x -Pinput=$6/TF.dim -Poutput=$2 \
    			& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
			[ $? -ne 0 ] && return ${ERR_TC} 
      			rm -rf $6/TF.d*

		fi

	fi
fi

echo "------------------------------------------------------------------------------------------------------"
echo " Info: Succesfully processed file: `basename $1` to a radiometrically terrain corrected product. "
echo "------------------------------------------------------------------------------------------------------"
echo ""
echo ""

}

function s1_mt_metrics() {
    if [ -z "$4" ]; then 
    echo " Missing arguments. Syntax:"
    echo " s1_sdv_mt_metrics <file_list> <output directory> <pol mode> <tmpdir> <logfile>"
    return
    fi
   
    # source other helpers
    source ${OPENSARKIT}/lib/helpers_source

    # error codes
    ERR_STACKING=" Error during stacking of multi-temporal images"
    ERR_SPECKLE=" Error during stacking of multi-temporal images"

    SECONDS=0
    echo -ne " Creating the multitemporal stack ..." &&
    bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_Stacking.xml -x -Pfilelist=$1 -Poutput=$4/mt_stack.coreg.dim \
    & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_STACKING}
   
    SECONDS=0
    echo -ne " Exeuting multi-temporal Speckle-filtering to the VV polarized channels of the multi-temporal stack ... " &&
    bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_MT-Speckle.xml -x -Pinput=$4/mt_stack.coreg.dim -Ppol=VV -Pthreshold=5 -Poutput=$4/mt_stack.vv.speckle.dim \
    & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_SPECKLE}
    
    for MTs in `ls -1 $4/mt_stack.vv.speckle.data/*img`;do 
	basename ${MTs} | rev | cut -c 5- | rev >> $4/tmp_list
    done
    BANDLIST=$(cat $4/tmp_list | tr '\n' ',' | rev | cut -c 2- | rev)
    rm -f $4/tmp_list

    SECONDS=0
    echo -ne " Converting linear to db-scale ... " &&
    bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_lin_to_db.xml -x -Pinput=$4/mt_stack.vv.speckle.dim -Pbandlist=${BANDLIST} -Poutput=$2/mt_stack.vv.db.speckle.dim \
    & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_SPECKLE}
    rm -rf $4/mt_stack.vv.speckle.d*

    # change nodata value use (i.e. applies the nanmean etc. calculation in the next steps)
    sed -i 's|<NO_DATA_VALUE_USED>true</NO_DATA_VALUE_USED>|<NO_DATA_VALUE_USED>false</NO_DATA_VALUE_USED>|g' $2/mt_stack.vv.db.speckle.dim

    SECONDS=0
    echo -ne " Calculating the mean average of the VV polarized channels of the multi-temporal stack ... " &&
    bash ${SNAP_EXE} Stack-Averaging -x -SsourceProduct=$2/mt_stack.vv.db.speckle.dim -Pstatistic='Mean Average' -t $4/mean.VV.dim \
    & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_SPECKLE}

    SECONDS=0
    echo -ne " Calculating the maximum values of the VV polarized channels of the multi-temporal stack ... " &&
    bash ${SNAP_EXE} Stack-Averaging -x -SsourceProduct=$2/mt_stack.vv.db.speckle.dim -Pstatistic='Maximum' -t $4/max.VV.dim \
    & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_SPECKLE}

    SECONDS=0
    echo -ne " Calculating the minimum values of the VV polarized channels of the multi-temporal stack ... " &&
    bash ${SNAP_EXE} Stack-Averaging -x -SsourceProduct=$2/mt_stack.vv.db.speckle.dim -Pstatistic='Minimum' -t $4/min.VV.dim \
    & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_SPECKLE}
	
    for MTs in `ls -1 $2/mt_stack.vv.db.speckle.data/*img`;do 
		
	basename ${MTs} | rev | cut -c 5- | rev >> $4/tmp_list
    done
    BANDLIST=$(cat $4/tmp_list | tr '\n' ',' | rev | cut -c 2- | rev)
    rm $4/tmp_list
  
    SECONDS=0
    echo -ne " Calculating the standard deviation of the VV polarized channels of the multi-temporal stack ... " &&
    bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_MT-stddev.xml -Pinput=$2/mt_stack.vv.db.speckle.dim -Pbandlist="stddev(${BANDLIST})" -Poutput=$4/stdev.VV.dim \
    & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    [ $? -ne 0 ] && return ${ERR_SPECKLE}
	
    #SECONDS=0
    #echo " Calculating the coeffcient of variation of the VV polarized channels of the multi-temporal stack ... " &&
    #bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_MT-stddev.xml -Pinput=$4/mt_stack.vv.db.speckle.dim -Pbandlist="coef_var(${BANDLIST})" -Poutput=$4/coef_var.VV.dim \
    #& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
    #[ $? -ne 0 ] && return ${ERR_SPECKLE}
    
    # VH channels

    if [ $3 == VV ];then

	SECONDS=0
	echo -ne " Creating a preliminary stack ..." &&
	bash ${SNAP_EXE} BandMerge -x $4/mean.VV.dim $4/max.VV.dim $4/min.VV.dim $4/stdev.VV.dim -t $4/mt_stack.metrics.dim  \
        & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_STACKING}

	echo -ne " Calculating the VVmax-VVmin ratio ..." &&
        bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_BandMath.xml -x -Pinput=$4/mt_stack.metrics.dim -Pexpression='pow(10,Gamma0_VV_2/10)/pow(10,Gamma0_VV_3/10)' -PoutBand=VVmax-VVmin-ratio -Poutput=$4/VVmax-VVmin-ratio \
        & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_STACKING}

       # SECONDS=0
       # echo -ne " Creating the final stack ..." &&
       # bash ${SNAP_EXE} BandMerge -x $4/mean.VV.dim $4/max.VV.dim $4/min.VV.dim $4/stdev.VV.dim $4/VVmax-VVmin-ratio.dim -t $2/mt-metrics-ssv  \
       # & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       # [ $? -ne 0 ] && return ${ERR_STACKING}
     
       SECONDS=0
       echo -ne " Creating the final output data ..." &&
       mkdir -p $2/MT_METRICS/	&&
       gdal_translate -a_nodata 0 $4/mean.VV.data/Gamma0_VV.img $2/MT_METRICS/01-Gammma0.VV.mean.tif &&
       gdal_translate -a_nodata 0 $4/max.VV.data/Gamma0_VV.img $2/MT_METRICS/02-Gammma0.VV.max.tif &&
       gdal_translate -a_nodata 0 $4/min.VV.data/Gamma0_VV.img $2/MT_METRICS/03-Gammma0.VV.min.tif &&
       gdal_translate -a_nodata 0 $4/stdev.VV.data/stddev.img $2/MT_METRICS/04-Stddev.VV.min.tif &&
       gdal_translate -a_nodata 0 $4/VVmax-VVmin-ratio.data/VVmax-VVmin-ratio.img $2/MT_METRICS/05-MAX_MIN_RATIO.VV.min.tif &&

       gdalbuildvrt -separate -srcnodata 0 mt_metrics.stack.vrt \
       $2/MT_METRICS/01-Gammma0.VV.mean.tif $2/MT_METRICS/02-Gammma0.VV.max.tif $2/MT_METRICS/03-Gammma0.VV.min.tif $2/MT_METRICS/04-Stddev.VV.min.tif $2/MT_METRICS/05-MAX_MIN_RATIO.VV.min.tif \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

    elif [ $3 == VH ];then
   
	SECONDS=0
        echo -ne " Applying the multi-temporal speckle filter to the VH polarized channels of the multi-temporal stack ... " &&
        bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_MT-Speckle.xml -x -Pinput=$4/mt_stack.coreg.dim -Ppol=VH -Pthreshold=5 -Poutput=$4/mt_stack.vh.speckle.dim \
        & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
        [ $? -ne 0 ] && return ${ERR_SPECKLE}
#    rm -rf $4/mt_stack.coreg.d*

       for MTs in `ls -1 $4/mt_stack.vh.speckle.data/*img`;do 
	   basename ${MTs} | rev | cut -c 5- | rev >> $4/tmp_list
       done
       BANDLIST=$(cat $4/tmp_list | tr '\n' ',' | rev | cut -c 2- | rev)
       rm -f $4/tmp_list

       SECONDS=0
       echo -ne " Converting linear ot dB scale ... " &&
       bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_lin_to_db.xml -x -Pinput=$4/mt_stack.vh.speckle.dim -Pbandlist=${BANDLIST} -Poutput=$2/mt_stack.vh.db.speckle.dim \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       [ $? -ne 0 ] && return ${ERR_SPECKLE}
       rm -rf $4/mt_stack.vh.speckle.dim

       # change nodata value use (i.e. applies the nanmean etc. calculation in the next steps)
       sed -i 's|<NO_DATA_VALUE_USED>true</NO_DATA_VALUE_USED>|<NO_DATA_VALUE_USED>false</NO_DATA_VALUE_USED>|g' $2/mt_stack.vh.db.speckle.dim

       SECONDS=0
       echo -ne " Calculating the mean average of the VH polarized channels of the multi-temporal stack ... " &&
       bash ${SNAP_EXE} Stack-Averaging -x -SsourceProduct=$2/mt_stack.vh.db.speckle.dim -Pstatistic='Mean Average' -t $4/mean.VH.dim \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       [ $? -ne 0 ] && return ${ERR_SPECKLE}

       SECONDS=0
       echo -ne " Calculating the maximum values of the VH polarized channels of the multi-temporal stack ... " &&
       bash ${SNAP_EXE} Stack-Averaging -x -SsourceProduct=$2/mt_stack.vh.db.speckle.dim -Pstatistic='Maximum' -t $4/max.VH.dim \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       [ $? -ne 0 ] && return ${ERR_SPECKLE}

       SECONDS=0
       echo -ne " Calculating the minimum values of the VH polarized channels of the multi-temporal stack ... " &&
       bash ${SNAP_EXE} Stack-Averaging -x -SsourceProduct=$2/mt_stack.vh.db.speckle.dim -Pstatistic='Minimum' -t $4/min.VH.dim \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       [ $? -ne 0 ] && return ${ERR_SPECKLE}
	
       for MTs in `ls -1 $2/mt_stack.vh.db.speckle.data/*img`;do 
          basename ${MTs} | rev | cut -c 5- | rev >> $4/tmp_list
       done
      
       BANDLIST=$(cat $4/tmp_list | tr '\n' ',' | rev | cut -c 2- | rev)
       rm $4/tmp_list
    	
       SECONDS=0
       echo -ne " Calculating the standard deviation of the VH polarized channels of the multi-temporal stack ... " &&
       bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_MT-stddev.xml -Pinput=$2/mt_stack.vh.db.speckle.dim -Pbandlist="stddev(${BANDLIST})" -Poutput=$4/stdev.VH.dim \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       [ $? -ne 0 ] && return ${ERR_SPECKLE}
	
       #SECONDS=0
       #echo -ne " Calculating the coefficient of variation of the VH polarized channels of the multi-temporal stack ... " &&
       #bash ${SNAP_EXE} ${SNAP_GRAPHS}/S1_GRD_MT-stddev.xml -Pinput=$4/mt_stack.vh.db.speckle.dim -Pbandlist="coef_var(${BANDLIST})" -Poutput=$4/coef_var.VH.dim \
       #& spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       #[ $? -ne 0 ] && return ${ERR_SPECKLE}
   
       # Band_merge
       # with coeff.of var. 
       #bash ${SNAP_EXE} BandMerge -x $4/mean.VV.dim $4/max.VV.dim $4/min.VV.dim $4/stdev.VV.dim $4/coef_var.VV.dim $4/mean.VH.dim $4/max.VH.dim $4/min.VH.dim $4/stdev.VH.dim $4/coef_var.VH.dim -t $4/mt_stack.metrics.dim 

       SECONDS=0
       echo -ne " Creating a preliminary stack ..." &&
       bash ${SNAP_EXE} BandMerge -x $4/mean.VV.dim $4/max.VV.dim $4/min.VV.dim $4/stdev.VV.dim $4/mean.VH.dim $4/max.VH.dim $4/min.VH.dim $4/stdev.VH.dim -t $4/mt_stack.metrics.dim  \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       [ $? -ne 0 ] && return ${ERR_STACKING}
    
       # ratios

       SECONDS=0
       echo -ne " Calculating the VV-VH ratio ..." &&
       bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_BandMath.xml -x -Pinput=$4/mt_stack.metrics.dim -Pexpression='pow(10,Gamma0_VV/10)/pow(10,Gamma0_VH/10)' -PoutBand=VV-VH-ratio -Poutput=$4/VVVHratio \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       [ $? -ne 0 ] && return ${ERR_STACKING}
    
       echo -ne " Calculating the VVmax-VVmin ratio ..." &&
       bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_BandMath.xml -x -Pinput=$4/mt_stack.metrics.dim -Pexpression='pow(10,Gamma0_VV_2/10)/pow(10,Gamma0_VV_3/10)' -PoutBand=VVmax-VVmin-ratio -Poutput=$4/VVmax-VVmin-ratio \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       [ $? -ne 0 ] && return ${ERR_STACKING}

       echo -ne " Calculating the VHmax-VHmin ratio ..." &&
       bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_BandMath.xml -x -Pinput=$4/mt_stack.metrics.dim -Pexpression='pow(10,Gamma0_VV/10)/pow(10,Gamma0_VH/10)' -PoutBand=VH-max-VHmin-ratio -Poutput=$4/VHmax-VHmin-ratio \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       [ $? -ne 0 ] && return ${ERR_STACKING}
	
       echo -ne " Calculating the Stdev VV / Stddev VH ..." &&
       bash $SNAP_EXE ${SNAP_GRAPHS}/S1_GRD_BandMath.xml -x -Pinput=$4/mt_stack.metrics.dim -Pexpression='stddev/stddev_2' -PoutBand=STDEV-ratio -Poutput=$4/STDEV-ratio \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
       [ $? -ne 0 ] && return ${ERR_STACKING}

    #   SECONDS=0
    #  echo -ne " Creating the final stack ..." &&
    #   bash ${SNAP_EXE} BandMerge -x $4/mean.VV.dim $4/max.VV.dim $4/min.VV.dim $4/stdev.VV.dim $4/VVmax-VVmin-ratio.dim \
    #                              $4/mean.VH.dim $4/max.VH.dim $4/min.VH.dim $4/stdev.VH.dim $4/VHmax-VHmin-ratio.dim \
#				  $4/VVVHratio.dim $4/STDEV-ratio.dim -t $2/mt_metrics.sdv  \
 #      & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"
  #     [ $? -ne 0 ] && return ${ERR_STACKING}

       SECONDS=0
       echo -ne " Creating the final output data ..." &&
       mkdir -p $2/MT_METRICS/ &&
       gdal_translate -a_nodata 0 $4/mean.VV.data/Gamma0_VV.img $2/MT_METRICS/01-Gammma0.VV.mean.tif &&
       gdal_translate -a_nodata 0 $4/max.VV.data/Gamma0_VV.img $2/MT_METRICS/02-Gammma0.VV.max.tif &&
       gdal_translate -a_nodata 0 $4/min.VV.data/Gamma0_VV.img $2/MT_METRICS/03-Gammma0.VV.min.tif &&
       gdal_translate -a_nodata 0 $4/stdev.VV.data/stddev.img $2/MT_METRICS/04-Stddev.VV.min.tif &&
       gdal_translate -a_nodata 0 $4/VVmax-VVmin-ratio.data/VVmax-VVmin-ratio.img $2/MT_METRICS/05-MAX_MIN_RATIO.VV.min.tif &&

       gdal_translate -a_nodata 0 $4/mean.VH.data/Gamma0_VH.img $2/MT_METRICS/06-Gammma0.VH.mean.tif &&
       gdal_translate -a_nodata 0 $4/max.VH.data/Gamma0_VH.img $2/MT_METRICS/07-Gammma0.VH.max.tif &&
       gdal_translate -a_nodata 0 $4/min.VH.data/Gamma0_VH.img $2/MT_METRICS/08-Gammma0.VH.min.tif &&
       gdal_translate -a_nodata 0 $4/stdev.VH.data/stddev.img $2/MT_METRICS/09-Stddev.VH.min.tif &&
       gdal_translate -a_nodata 0 $4/VHmax-VHmin-ratio.data/VHmax-VHmin-ratio.img $2/MT_METRICS/10-MAX_MIN_RATIO.VH.min.tif &&

       gdal_translate -a_nodata 0 $4/VVVHratio.data/VV-VH-ratio.img $2/MT_METRICS/11-VV_VH_ratio.mean.tif &&
       gdal_translate -a_nodata 0 $4/STDEV-ratio.data/STDEV-ratio.img $2/MT_METRICS/12-STDDEV_Ratio.tif &&
       gdalbuildvrt -separate -srcnodata 0 mt_metrics.stack.vrt \
       $2/MT_METRICS/01-Gammma0.VV.mean.tif $2/MT_METRICS/02-Gammma0.VV.max.tif $2/MT_METRICS/03-Gammma0.VV.min.tif $2/MT_METRICS/04-Stddev.VV.min.tif $2/MT_METRICS/05-MAX_MIN_RATIO.VV.min.tif \
       $2/MT_METRICS/06-Gammma0.VH.mean.tif $2/MT_METRICS/07-Gammma0.VH.max.tif $2/MT_METRICS/08-Gammma0.VH.min.tif $2/MT_METRICS/09-Stddev.VH.min.tif $2/MT_METRICS/10-MAX_MIN_RATIO.VH.min.tif \
       $2/MT_METRICS/11-VV_VH_ratio.mean.tif $2/MT_METRICS/12-STDDEV_Ratio.tif \
       & spinner $! && duration=$SECONDS && echo -e " done ($(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed)"

   fi

echo "------------------------------------------------------------------------------------------------------"
echo " Info: Succesfully created a stack of multi-temporal metrics. "
echo "------------------------------------------------------------------------------------------------------"
echo ""
echo ""
    
}
    
