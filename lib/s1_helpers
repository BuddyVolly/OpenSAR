#! /bin/bash

# The MIT License (MIT)
# Copyright (c) 2016 Andreas Vollrath

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#get the orbit directions
function s1_orbit_dir() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_orbit <input_list>"
    return
    fi
    ORBIT=$(xml_grep str $1 |\
          grep orbitdirection |\
	  sed 's/  <str name="orbitdirection">//g' |\
	  sed 's|</str>||g')
    echo "$ORBIT"
}

# get polarization mode
function s1_pol_mode() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_pol_mode <input_list>"
    return
    fi
    POL_MODE=$(xml_grep str $1 |\
	grep polarisationmode |\
	sed 's/  <str name="polarisationmode">//g' |\
	sed 's|</str>||g')
    echo "$POL_MODE"
}

# get swath identifier
function s1_swath() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_swath <input_list>"
    return
    fi
    SWATH=$(xml_grep str $1 |\
	grep swathidentifier |\
	sed 's/  <str name="swathidentifier">//g' |\
	sed 's|</str>||g')
    echo "$SWATH"
}

# get Scene ID
function s1_ident() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_ident <input_list>"
    return
    fi
    IDENT=$(xml_grep str $1 |\
	grep \"identifier |\
	sed 's/  <str name="identifier">//g' |\
	sed 's|</str>||g')
    echo "$IDENT"
}

# get UUID for download
function s1_uuid() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_uuid <input_list>"
    return
    fi
    UUID=$(xml_grep id $1 --text_only |\
	tail -n +2)
    echo "$UUID"
}

# get acquisition date
function s1_date() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_date <input_list>"
    return
    fi
    DATE=$(xml_grep title $1 --text_only |\
 	tail -n +2 |\
	cut -c 18-25)
    echo "$DATE"
}

# get scene footprint
function s1_footprint() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_footprint <input_list>"
    return
    fi
    FOOT=$(xml_grep str $1 --text_only |\
	 grep "POLYGON ((" |\
	 sed 's|POLY|\"POLY|g' |\
	 sed 's|))|))"|g')
    echo "$FOOT"
}

# get orbit
function s1_orbit() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_orbit <input_list>"
    return
    fi
    ORBIT=$(xml_grep int $1 |\
	    grep \"orbitnumber |\
	    sed 's/  <int name="orbitnumber">//g' |\
	    sed 's|</int>||g')
    echo "$ORBIT"
}

# get track
function s1_track() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_track <input_list>"
    return
    fi
    ORBIT=$(xml_grep int $1 |\
	    grep \"orbitnumber |\
	    sed 's/  <int name="orbitnumber">//g' |\
	    sed 's|</int>||g')
    for line in $ORBIT;do
    if [[ `expr $line % 175` -lt 72 ]];then
       TRACK=`expr $line % 175 + 103`
       echo $TRACK
    else
       TRACK=`expr $line % 175 - 72`
       echo "$TRACK"
    fi
    done
}

# function s1_track_orbit() {
#     if [ -z "$1" ]; then
#     echo "Missing arguments. Syntax:"
#     echo "  s1_track <input_list>"
#     return
#     fi
#     if [[ `expr $1 % 175` -lt 72 ]];then
#        TRACK=`expr $1 % 175 + 103`
#        echo $TRACK
#     else
#        TRACK=`expr $1 % 175 - 72`
#        echo "$TRACK"
#     fi
# }

function s1a_track_orbit() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1a_track <absolute orbit>"
    return
    fi

    # get orbit and offsets
    absolute_orbit=$1
    cycle_offset=15
    orbit_offset=73

    # calculate the revisit cycle
    revisit_cycle=`echo "(( ${absolute_orbit} - ${orbit_offset} ) / 175 ) + ${cycle_offset}" | bc`

    # calculate the realtive orbit
    rel_orbit_1=`echo "( ${absolute_orbit} - ( ${revisit_cycle} * 175 ) )" | bc`
    rel_orbit_2=`echo "${absolute_orbit} - (( ${revisit_cycle} - ${cycle_offset}) * 175 ) - ${orbit_offset} + 1 " | bc`

    # return the realtive orbit
    echo "Revisit cycle: ${revisit_cycle}"
    echo "Relative Orbit simple: ${rel_orbit_1}"
    echo "Relative Orbit advanced: ${rel_orbit_2}"
}


function s1b_track_orbit() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1b_track_orbit <absolute orbit>"
    return
    fi

    # get orbit and offsets
    absolute_orbit=$1
    cycle_offset=7
    orbit_offset=27

    # calculate the revisit cycle
    revisit_cycle=`echo "(( ${absolute_orbit} - ${orbit_offset} ) / 175 ) + ${cycle_offset}" | bc`

    # calculate the realtive orbit
    rel_orbit_1=`echo "( ${absolute_orbit} - ( ${revisit_cycle} * 175 ) )" | bc`
    rel_orbit_2=`echo "${absolute_orbit} - (( ${revisit_cycle} - ${cycle_offset}) * 175 ) - ${orbit_offset} + 1 " | bc`

    # return the realtive orbit
    echo "Revisit cycle: ${revisit_cycle}"
    echo "Relative Orbit simple: ${rel_orbit_1}"
    echo "Relative Orbit advanced: ${rel_orbit_2}"
}

# get starting slice
function s1_start_time() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_slice_start <input_list>"
    return
    fi
    TRACK=$(xml_grep title $1 --text_only |\
 	tail -n +2 |\
	cut -c 27-32)
    echo "$TRACK"
}

# get ending slice
function s1_stop_time() {
    if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_slice_start <input_list>"
    return
    fi
    TRACK=$(xml_grep title $1 --text_only |\
 	tail -n +2 |\
	cut -c 43-48)
    echo "$TRACK"
}

# show S1 info
function s1_info() {
if [ -z "$1" ]; then
    echo "Missing arguments. Syntax:"
    echo "  s1_info <input_file>"
    return
    fi
    BASENAME=`basename $1`
    export SCENE_ID=`echo ${BASENAME} | rev | cut -c 5- | rev`
    export DATE=${SCENE_ID:17:8}
    export ORBIT=${SCENE_ID:49:6}
    export START=`echo "${SCENE_ID:26:2}":"${SCENE_ID:28:2}":"${SCENE_ID:30:2}"`
    export STOP=`echo "${SCENE_ID:42:2}":"${SCENE_ID:44:2}":"${SCENE_ID:46:2}"`
    export MODE=${SCENE_ID:7:3}
    export POL_MODE=${SCENE_ID:13:3}
    #TRACK=${SCENE_ID:26:3}
    #FRAME_START=${SCENE_ID:29:3}
    #FRAME_END=${SCENE_ID:45:3}
    if [[ ${SCENE_ID:0:3} == "S1A" ]];then
      export SATELLITE="Sentinel-1A/C-band SAR"
      export TRACK_INFO=`s1a_track_orbit $ORBIT`
    else
      export SATELLITE="Sentinel-1B/C-band SAR"
      export TRACK_INFO=`s1b_track_orbit $ORBIT`
    fi

    echo " "
    echo "----------------------------------------------------------------"
    echo " Scene Identifier: 		${SCENE_ID}"
    echo " Satellite/Sensor: 		${SATELLITE}"
    echo " Acquisiton Mode:		${MODE}"
    echo " Polarization Mode:		${POL_MODE}"
    echo " Acquisition Date:		${DATE:6:2}-${DATE:4:2}-${DATE:0:4}"
    echo " Start time:			${START}"
    echo " Stop time:			${STOP}"
    echo " Relative Satellite Track: 	${TRACK_INFO}"
    echo " Absolute Satellite Orbit: 	${ORBIT}"
    echo "----------------------------------------------------------------"
}
