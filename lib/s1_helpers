#get the orbit directions
function s1_orbit_dir() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_orbit <input_list>"
    return
    fi
    ORBIT=$(xml_grep str $1 |\
          grep orbitdirection |\
	  sed 's/  <str name="orbitdirection">//g' |\
	  sed 's|</str>||g')
    echo "$ORBIT"
}

# get polarization mode
function s1_pol_mode() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_pol_mode <input_list>"
    return
    fi
    POL_MODE=$(xml_grep str $1 |\
	grep polarisationmode |\
	sed 's/  <str name="polarisationmode">//g' |\
	sed 's|</str>||g')
    echo "$POL_MODE"
}

# get swath identifier
function s1_swath() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_swath <input_list>"
    return
    fi
    SWATH=$(xml_grep str $1 |\
	grep swathidentifier |\
	sed 's/  <str name="swathidentifier">//g' |\
	sed 's|</str>||g')
    echo "$SWATH"
}

# get Scene ID
function s1_ident() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_ident <input_list>"
    return
    fi
    IDENT=$(xml_grep str $1 |\
	grep \"identifier |\
	sed 's/  <str name="identifier">//g' |\
	sed 's|</str>||g')
    echo "$IDENT"
}

# get UUID for download
function s1_uuid() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_uuid <input_list>"
    return
    fi
    UUID=$(xml_grep id $1 --text_only |\
	tail -n +2)
    echo "$UUID"
}

# get acquisition date
function s1_date() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_date <input_list>"
    return
    fi
    DATE=$(xml_grep title $1 --text_only |\
 	tail -n +2 |\
	cut -c 18-25)
    echo "$DATE"
}

# get scene footprint
function s1_footprint() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_footprint <input_list>"
    return
    fi
    FOOT=$(xml_grep str $1 --text_only |\
	 grep "POLYGON ((" |\
	 sed 's|POLY|\"POLY|g' |\
	 sed 's|))|))"|g')
    echo "$FOOT"
}

# get orbit 
function s1_orbit() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_orbit <input_list>"
    return
    fi
    ORBIT=$(xml_grep int $1 |\
	    grep \"orbitnumber |\
	    sed 's/  <int name="orbitnumber">//g' |\
	    sed 's|</int>||g')
    echo "$ORBIT"
}

# get track
function s1_track() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_track <input_list>"
    return
    fi
    ORBIT=$(xml_grep int $1 |\
	    grep \"orbitnumber |\
	    sed 's/  <int name="orbitnumber">//g' |\
	    sed 's|</int>||g')
    for line in $ORBIT;do
    if [[ `expr $line % 175` -lt 72 ]];then
       TRACK=`expr $line % 175 + 103`
       echo $TRACK
    else
       TRACK=`expr $line % 175 - 72`
       echo "$TRACK"
    fi		
    done
}

function s1_track_orbit() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_track <input_list>"
    return
    fi
    if [[ `expr $1 % 175` -lt 72 ]];then
       TRACK=`expr $1 % 175 + 103`
       echo $TRACK
    else
       TRACK=`expr $1 % 175 - 72`
       echo "$TRACK"
    fi		
}

# get starting slice
function s1_start_time() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_slice_start <input_list>"
    return
    fi
    TRACK=$(xml_grep title $1 --text_only |\
 	tail -n +2 |\
	cut -c 27-32)
    echo "$TRACK"
}

# get ending slice
function s1_stop_time() {
    if [ -z "$1" ]; then 
    echo "Missing arguments. Syntax:"
    echo "  s1_slice_start <input_list>"
    return
    fi
    TRACK=$(xml_grep title $1 --text_only |\
 	tail -n +2 |\
	cut -c 43-48)
    echo "$TRACK"
}
