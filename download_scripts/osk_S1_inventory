#! /bin/bash 

#-------------------------------------------------------------------------------------------	
# 	0.1 Check for right usage & set up basic Script Variables
if [ "$#" != "7" ]; then

	echo -e ""
	echo -e "----------------------------------"
	echo -e " OpenSARKit, v.01"
	echo -e " Download Sentinel-1 data from ESA Scihub"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
#	echo -e " Author: Andreas Vollrath"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e "Software dependencies:"
	echo -e "	- xml-twig-tools"
	echo -e "	- gdal-bin"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "syntax: osk_download_Sentinel <output_folder> <Area_of_Interest> <start_date> <end_date> <Product_type> <Polarization_Mode> <Script_Mode>"
	echo -e ""
	echo -e "input parameters:"
	echo -e "output_folder		(output) folder where the downloaded data will be saved"
	echo -e "Area_of_Interest	(input) Shapefile of your Area of interest"
	echo -e "start_date		Start date of search in format YYYY-MM-DD"
	echo -e "end_date		End date of search in format YYYY-MM-DD"
	echo -e "Product_type			Acquisition Mode of Sentinel-1 SAR instrument"
	echo -e "			Available choices"
	echo -e "			  RAW (Unfocused Raw data)"
	echo -e "			  SLC (Single-Look-Complex)"
	echo -e "			  GRD (Detected Ground Range product)"
	echo -e ""
	echo -e "Polarization_Mode"			
	echo -e "			Available choices"
	echo -e "			  HH (for IWS HH/HV)"
	echo -e "			  VH (for IWS Mode VV/VH)"
	echo -e "			  VV (for IWS VV)"
	echo -e ""
	echo -e "Script_Mode"			
	echo -e "			Available choices"
	echo -e "			  0 (only do the data inventory)"
	echo -e "			  1 (data inventory + direct data download)"
	exit 1
else
	echo -e "----------------------------------"
	echo -e " OpenSARKit, v.01"
	echo -e " Download Sentinel-1 data from ESA Scihub"
	echo -e " Developed by: Food and Agriculture Organization of the United Nations, Rome"
	echo -e " Author: Andreas Vollrath"
	echo -e "----------------------------------"
	echo -e ""
	echo -e "----------------------------------"
	echo -e "Software dependencies:"
	echo -e "	- xml-twig-tools"
	echo -e "	- gdal-bin"
	echo -e "----------------------------------"
	echo -e ""

	# set up initial script variables
   	cd $1
   	PROC_DIR=`pwd`
   	TMP_DIR=${PROC_DIR}/TMP
   	mkdir -p ${TMP_DIR}
	PERIOD="( beginPosition:["$3"T00:00:00.000Z TO "$4"T23:59:59.999Z] AND endPosition:["$3"T00:00:00.000Z TO "$4"T23:59:59.999Z] )"
	PRODUCT_TYPE=$5
	POL_MODE=$6
fi

#	Credentials
read -r -p "Please type your ESA Scihub Username:" USERNAME
read -s -p "Please type your ESA Scihub Password:" PW
echo ""
echo "Getting the inventory data"



# get the corner coordinates from the AOI shapefile and build rectangle for data search  
LAYER=`ogrinfo $2 | grep 1: | awk $'{print $2}'`
X_MIN=`ogrinfo $2 $LAYER | grep Extent | awk -F '(' $'{print $2}' | awk -F ','  $'{print $1}'`
X_MAX=`ogrinfo $2 $LAYER | grep Extent | awk -F '(' $'{print $3}' | awk -F ','  $'{print $1}'`
Y_MIN=`ogrinfo $2 $LAYER | grep Extent | awk -F ',' $'{print $2}' | awk -F ')' $'{print $1}'`
Y_MAX=`ogrinfo $2 $LAYER | grep Extent | awk -F ',' $'{print $3}' | awk -F ')' $'{print $1}'`
AOI="POLYGON(($X_MIN$Y_MIN, $X_MIN$Y_MAX, $X_MAX$Y_MAX, $X_MAX$Y_MIN, $X_MIN$Y_MIN ))"

## Alternative Version with actual footprint (seems not to work because only rectangluar searches available)
#ogr2ogr -f CSV ${TMP_DIR}/tmp_AOI_WKT.csv $2 -lco GEOMETRY=AS_WKT
#AOI=`grep POLYGON ${TMP_DIR}/tmp_AOI_WKT.csv | awk -F "))" $'{print $1}'`
#echo $AOI

# get the OpenSearch result
echo "data inventory from scihub server"
wget --no-check-certificate --user=${USERNAME} --password=${PW} -O ${TMP_DIR}/datalist "https://scihub.esa.int/dhus//search?q=producttype:${PRODUCT_TYPE}+AND+polarisationMode:${POL_MODE}+AND+( footprint:\"Intersects($AOI)\")+AND+${PERIOD}&rows=10000&start=0"

# get the important info out of the xml result
xml_grep title ${TMP_DIR}/datalist --text_only | tail -n +2 > ${TMP_DIR}/scenes
xml_grep title ${TMP_DIR}/datalist --text_only | tail -n +2 | cut -c 18-25 > ${TMP_DIR}/dates
xml_grep id ${TMP_DIR}/datalist --text_only | tail -n +2 > ${TMP_DIR}/uuid
xml_grep str ${TMP_DIR}/datalist --text_only | grep "POLYGON ((" | sed 's|POLY|\"POLY|g' | sed 's|))|))"|g' > ${TMP_DIR}/polys
xml_grep str ${TMP_DIR}/datalist --text_only | grep "orbitDirection" > ${TMP_DIR}/orbit
xml_grep str ${TMP_DIR}/datalist --text_only | grep "swathidentifier" > ${TMP_DIR}/swath
	 
# write header
echo "Scene_ID,Product_ID,Date,Swath,Orbit_Dir,WKTGeom" > ${TMP_DIR}/wkt.csv
echo '"String(68)","String(37)","Integer(8)","String(5)","String(11)","String"' > ${TMP_DIR}/wkt.csvt

# write data
paste -d "," ${TMP_DIR}/scenes ${TMP_DIR}/uuid ${TMP_DIR}/dates ${TMP_DIR}/swath ${TMP_DIR}/orbit ${TMP_DIR}/polys > ${TMP_DIR}/data
cat ${TMP_DIR}/data >> ${TMP_DIR}/wkt.csv

mkdir -p ${PROC_DIR}/
mkdir -p ${PROC_DIR}/Inventory
INV=${PROC_DIR}/Inventory

# write a shapefile of coverage
echo "<OGRVRTDataSource>" > ${TMP_DIR}/wkt.vrt
echo "	<OGRVRTLayer name=\"wkt\">" >> ${TMP_DIR}/wkt.vrt
echo "   	<SrcDataSource>${TMP_DIR}/wkt.csv</SrcDataSource>" >> ${TMP_DIR}/wkt.vrt
echo "   	<GeometryType>wkbPolygon</GeometryType>" >> ${TMP_DIR}/wkt.vrt
echo "		<LayerSRS>WGS84</LayerSRS>"  >> ${TMP_DIR}/wkt.vrt
echo "		<GeometryField encoding=\"WKT\" field=\"WKTGeom\"> </GeometryField >" >> ${TMP_DIR}/wkt.vrt
echo "	</OGRVRTLayer>" >> ${TMP_DIR}/wkt.vrt
echo "</OGRVRTDataSource>" >> ${TMP_DIR}/wkt.vrt

cd ${PROC_DIR}
# convert to final schapefile
ogr2ogr -f "Esri Shapefile" ${INV}/S1_${POL_MODE}.shp ${TMP_DIR}/wkt.vrt

if [[ $7 == 1 ]];then
	osk_S1_download ${PROC_DIR} ${INV}/S1_${POL_MODE}.shp
fi

#	mkdir -p ${PROC_DIR}/ZIP

#	while read line; do 

		# get the data via the UUID
#  		SCENE=`echo $line | awk -F "," $'{print $1}'`			  
#		UUID=`echo $line | awk -F "," $'{print $2}'`		
#		DL_ADDRESS='https://scihub.esa.int/dhus/odata/v1/Products('"'${UUID}'"')/$value'
#		echo "Downloading $SCENE"

		# prepare a loop to avoid uncomplete data downloads		
#		i=1
#		echo "bla" > ${TMP_DIR}/tmp_error
		# do the loop 
#		for(( i=1; i<=2; i++ ));do

#			if grep -q "download completed" ${TMP_DIR}/tmp_error;then
#				i=3
#			else
#				i=1
#				aria2c --check-certificate=false --continue=true --http-user="${USERNAME}" --http-passwd="${PW}" "${DL_ADDRESS}" > ${TMP_DIR}/tmp_error
#			fi
#		done

#		echo "Moving $SCENE to ${PROC_DIR}/S1/ZIP"
#		DATE=${SCENE:17:8}
#		mkdir -p ${PROC_DIR}/ZIP/${DATE}/
#		mv ${SCENE}.zip ${PROC_DIR}/ZIP/${DATE}/${SCENE}.zip

#	done  < ${TMP_DIR}/data
#fi
rm -rf ${TMP_DIR}
